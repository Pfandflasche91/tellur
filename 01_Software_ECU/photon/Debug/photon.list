
photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000450  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000614  0800061c  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000614  08000614  0001061c  2**0
                  CONTENTS
  4 .ARM          00000000  08000614  08000614  0001061c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000614  0800061c  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000614  08000614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800061c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800061c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001061c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007e8  00000000  00000000  00010646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000235  00000000  00000000  00010e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00011068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000110f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011e9  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b0f  00000000  00000000  00012349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004786  00000000  00000000  00012e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000175de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  00017634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005fc 	.word	0x080005fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005fc 	.word	0x080005fc

08000204 <GPIO_PCLK>:
 * @return				- none
 * @Note				- none
 */

void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d141      	bne.n	800029a <GPIO_PCLK+0x96>
		{
			if(pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a43      	ldr	r2, [pc, #268]	; (8000328 <GPIO_PCLK+0x124>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PCLK+0x28>
			{
				GPIOA_PCLK_EN();
 800021e:	4b43      	ldr	r3, [pc, #268]	; (800032c <GPIO_PCLK+0x128>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a42      	ldr	r2, [pc, #264]	; (800032c <GPIO_PCLK+0x128>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
			{
				GPIOH_PCLK_DI();
			}

		}
}
 800022a:	e077      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a40      	ldr	r2, [pc, #256]	; (8000330 <GPIO_PCLK+0x12c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PCLK+0x3e>
				GPIOB_PCLK_EN();
 8000234:	4b3d      	ldr	r3, [pc, #244]	; (800032c <GPIO_PCLK+0x128>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a3c      	ldr	r2, [pc, #240]	; (800032c <GPIO_PCLK+0x128>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e06c      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a3b      	ldr	r2, [pc, #236]	; (8000334 <GPIO_PCLK+0x130>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PCLK+0x54>
				GPIOC_PCLK_EN();
 800024a:	4b38      	ldr	r3, [pc, #224]	; (800032c <GPIO_PCLK+0x128>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a37      	ldr	r2, [pc, #220]	; (800032c <GPIO_PCLK+0x128>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e061      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a37      	ldr	r2, [pc, #220]	; (8000338 <GPIO_PCLK+0x134>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PCLK+0x6a>
				GPIOD_PCLK_EN();
 8000260:	4b32      	ldr	r3, [pc, #200]	; (800032c <GPIO_PCLK+0x128>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a31      	ldr	r2, [pc, #196]	; (800032c <GPIO_PCLK+0x128>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e056      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOE)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a32      	ldr	r2, [pc, #200]	; (800033c <GPIO_PCLK+0x138>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PCLK+0x80>
				GPIOE_PCLK_EN();
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <GPIO_PCLK+0x128>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a2c      	ldr	r2, [pc, #176]	; (800032c <GPIO_PCLK+0x128>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e04b      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOH)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a2e      	ldr	r2, [pc, #184]	; (8000340 <GPIO_PCLK+0x13c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d147      	bne.n	800031c <GPIO_PCLK+0x118>
				GPIOH_PCLK_EN();
 800028c:	4b27      	ldr	r3, [pc, #156]	; (800032c <GPIO_PCLK+0x128>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a26      	ldr	r2, [pc, #152]	; (800032c <GPIO_PCLK+0x128>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e040      	b.n	800031c <GPIO_PCLK+0x118>
			if(pGPIOx == GPIOA)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <GPIO_PCLK+0x124>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PCLK+0xac>
				GPIOA_PCLK_DI();
 80002a2:	4b22      	ldr	r3, [pc, #136]	; (800032c <GPIO_PCLK+0x128>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a21      	ldr	r2, [pc, #132]	; (800032c <GPIO_PCLK+0x128>)
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e035      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOB)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <GPIO_PCLK+0x12c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_PCLK+0xc2>
				GPIOB_PCLK_DI();
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <GPIO_PCLK+0x128>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <GPIO_PCLK+0x128>)
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e02a      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOC)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <GPIO_PCLK+0x130>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PCLK+0xd8>
				GPIOC_PCLK_DI();
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <GPIO_PCLK+0x128>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a16      	ldr	r2, [pc, #88]	; (800032c <GPIO_PCLK+0x128>)
 80002d4:	f023 0304 	bic.w	r3, r3, #4
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e01f      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOD)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a16      	ldr	r2, [pc, #88]	; (8000338 <GPIO_PCLK+0x134>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PCLK+0xee>
				GPIOD_PCLK_DI();
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <GPIO_PCLK+0x128>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a10      	ldr	r2, [pc, #64]	; (800032c <GPIO_PCLK+0x128>)
 80002ea:	f023 0308 	bic.w	r3, r3, #8
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e014      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOE)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a11      	ldr	r2, [pc, #68]	; (800033c <GPIO_PCLK+0x138>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PCLK+0x104>
				GPIOE_PCLK_DI();
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <GPIO_PCLK+0x128>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <GPIO_PCLK+0x128>)
 8000300:	f023 0310 	bic.w	r3, r3, #16
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e009      	b.n	800031c <GPIO_PCLK+0x118>
			}else if (pGPIOx == GPIOH)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <GPIO_PCLK+0x13c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d105      	bne.n	800031c <GPIO_PCLK+0x118>
				GPIOH_PCLK_DI();
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <GPIO_PCLK+0x128>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a05      	ldr	r2, [pc, #20]	; (800032c <GPIO_PCLK+0x128>)
 8000316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000
 800032c:	40023800 	.word	0x40023800
 8000330:	40020400 	.word	0x40020400
 8000334:	40020800 	.word	0x40020800
 8000338:	40020c00 	.word	0x40020c00
 800033c:	40021000 	.word	0x40021000
 8000340:	40021c00 	.word	0x40021c00

08000344 <GPIO_Init>:
 * @param[in]			- Handle strcut of GPIO
 * @return				- none
 * @Note				- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	795b      	ldrb	r3, [r3, #5]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d821      	bhi.n	800039c <GPIO_Init+0x58>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	461a      	mov	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791b      	ldrb	r3, [r3, #4]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	2103      	movs	r1, #3
 8000378:	fa01 f303 	lsl.w	r3, r1, r3
 800037c:	43db      	mvns	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	400a      	ands	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6819      	ldr	r1, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
		temp=0;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
	}else
	{

	}
	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	799b      	ldrb	r3, [r3, #6]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	2103      	movs	r1, #3
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4619      	mov	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	400a      	ands	r2, r1
 80003ca:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6899      	ldr	r1, [r3, #8]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	430a      	orrs	r2, r1
 80003da:	609a      	str	r2, [r3, #8]
	temp=0;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	79db      	ldrb	r3, [r3, #7]
 80003e4:	461a      	mov	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	68da      	ldr	r2, [r3, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	4619      	mov	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	400a      	ands	r2, r1
 800040e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	68d9      	ldr	r1, [r3, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	430a      	orrs	r2, r1
 800041e:	60da      	str	r2, [r3, #12]
	temp=0;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a1b      	ldrb	r3, [r3, #8]
 8000428:	461a      	mov	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	2103      	movs	r1, #3
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6859      	ldr	r1, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	430a      	orrs	r2, r1
 8000462:	605a      	str	r2, [r3, #4]
	temp=0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
	//5. configure the alt functionality
	//TODO:implement alt function
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <GPIO_Write>:
 * @return				- 0 or 1
 * @Note				-
 */

void GPIO_Write(GPIO_Handle_t *pGPIOHandle, uint8_t Value)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	70fb      	strb	r3, [r7, #3]
	if(Value == 1)
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10d      	bne.n	80004a0 <GPIO_Write+0x2e>
	{
		pGPIOHandle->pGPIOx->ODR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	4619      	mov	r1, r3
 8000490:	2301      	movs	r3, #1
 8000492:	408b      	lsls	r3, r1
 8000494:	4619      	mov	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	430a      	orrs	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}
}
 800049e:	e00d      	b.n	80004bc <GPIO_Write+0x4a>
		pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	4619      	mov	r1, r3
 80004ac:	2301      	movs	r3, #1
 80004ae:	408b      	lsls	r3, r1
 80004b0:	43db      	mvns	r3, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	400a      	ands	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <main>:
#endif


void delayMillis(uint16_t delay);		//delay function
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t rectangle;
	rectangle.pGPIOx = GPIOA;
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <main+0x54>)
 80004d0:	607b      	str	r3, [r7, #4]
	rectangle.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	723b      	strb	r3, [r7, #8]
	rectangle.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 80004d6:	2301      	movs	r3, #1
 80004d8:	727b      	strb	r3, [r7, #9]
	rectangle.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_SPEED_FAST;
 80004da:	2302      	movs	r3, #2
 80004dc:	72bb      	strb	r3, [r7, #10]
	rectangle.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OPTYPE_PP;
 80004de:	2300      	movs	r3, #0
 80004e0:	733b      	strb	r3, [r7, #12]
	rectangle.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 80004e2:	2300      	movs	r3, #0
 80004e4:	72fb      	strb	r3, [r7, #11]

	//Clock activate for GPIOA AHB1ENR
	GPIO_PCLK(GPIOA,ENABLE);
 80004e6:	2101      	movs	r1, #1
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <main+0x54>)
 80004ea:	f7ff fe8b 	bl	8000204 <GPIO_PCLK>
	//GPIO Init
	GPIO_Init(&rectangle);
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff27 	bl	8000344 <GPIO_Init>
	while(1)
	{
		//GPIO_Write(GPIOA, GPIO_PIN0, Value);
		GPIO_Write(&rectangle, GPIO_PIN_SET);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ffb9 	bl	8000472 <GPIO_Write>
		delayMillis(500);
 8000500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000504:	f000 f80c 	bl	8000520 <delayMillis>
		GPIO_Write(&rectangle, GPIO_PIN_RESET);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffb0 	bl	8000472 <GPIO_Write>
		delayMillis(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000516:	f000 f803 	bl	8000520 <delayMillis>
		GPIO_Write(&rectangle, GPIO_PIN_SET);
 800051a:	e7ec      	b.n	80004f6 <main+0x2e>
 800051c:	40020000 	.word	0x40020000

08000520 <delayMillis>:
	}
}

void delayMillis(uint16_t delay)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	81fb      	strh	r3, [r7, #14]
	for(;delay>0; --delay)
 800052e:	e00d      	b.n	800054c <delayMillis+0x2c>
	{
		for(i = 0; i<1245;++i)
 8000530:	2300      	movs	r3, #0
 8000532:	81fb      	strh	r3, [r7, #14]
 8000534:	e002      	b.n	800053c <delayMillis+0x1c>
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	3301      	adds	r3, #1
 800053a:	81fb      	strh	r3, [r7, #14]
 800053c:	89fb      	ldrh	r3, [r7, #14]
 800053e:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8000542:	4293      	cmp	r3, r2
 8000544:	d9f7      	bls.n	8000536 <delayMillis+0x16>
	for(;delay>0; --delay)
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	3b01      	subs	r3, #1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1ee      	bne.n	8000530 <delayMillis+0x10>
		{
			;
		}
	}
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000564:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 f811 	bl	80005b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff ff99 	bl	80004c8 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a4:	0800061c 	.word	0x0800061c
  ldr r2, =_sbss
 80005a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC_IRQHandler>
	...

080005b4 <__libc_init_array>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4d0d      	ldr	r5, [pc, #52]	; (80005ec <__libc_init_array+0x38>)
 80005b8:	4c0d      	ldr	r4, [pc, #52]	; (80005f0 <__libc_init_array+0x3c>)
 80005ba:	1b64      	subs	r4, r4, r5
 80005bc:	10a4      	asrs	r4, r4, #2
 80005be:	2600      	movs	r6, #0
 80005c0:	42a6      	cmp	r6, r4
 80005c2:	d109      	bne.n	80005d8 <__libc_init_array+0x24>
 80005c4:	4d0b      	ldr	r5, [pc, #44]	; (80005f4 <__libc_init_array+0x40>)
 80005c6:	4c0c      	ldr	r4, [pc, #48]	; (80005f8 <__libc_init_array+0x44>)
 80005c8:	f000 f818 	bl	80005fc <_init>
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	2600      	movs	r6, #0
 80005d2:	42a6      	cmp	r6, r4
 80005d4:	d105      	bne.n	80005e2 <__libc_init_array+0x2e>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005dc:	4798      	blx	r3
 80005de:	3601      	adds	r6, #1
 80005e0:	e7ee      	b.n	80005c0 <__libc_init_array+0xc>
 80005e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e6:	4798      	blx	r3
 80005e8:	3601      	adds	r6, #1
 80005ea:	e7f2      	b.n	80005d2 <__libc_init_array+0x1e>
 80005ec:	08000614 	.word	0x08000614
 80005f0:	08000614 	.word	0x08000614
 80005f4:	08000614 	.word	0x08000614
 80005f8:	08000618 	.word	0x08000618

080005fc <_init>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr

08000608 <_fini>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr
