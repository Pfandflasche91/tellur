
photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000894  08000894  00010894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080008ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  080008b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080008b0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001565  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000488  00000000  00000000  00021593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00021a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d0  00000000  00000000  00021b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196e6  00000000  00000000  00021bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001350  00000000  00000000  0003b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7bd  00000000  00000000  0003c62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7deb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  000c7e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800087c 	.word	0x0800087c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800087c 	.word	0x0800087c

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ffc2 	bl	8000204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <main>:
bool     timerTrigger = false;

#define  SYSTICK_MAX  (2000)

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// Initialisierung des SysTick-Timers
	SysTick_Config(SystemCoreClock / 1000);
 80002a0:	4b39      	ldr	r3, [pc, #228]	; (8000388 <main+0xec>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a39      	ldr	r2, [pc, #228]	; (800038c <main+0xf0>)
 80002a6:	fba2 2303 	umull	r2, r3, r2, r3
 80002aa:	099b      	lsrs	r3, r3, #6
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffd3 	bl	8000258 <SysTick_Config>
	SystemCoreClockUpdate();
 80002b2:	f000 f8eb 	bl	800048c <SystemCoreClockUpdate>


    // Aktivierung des Bustaktes von GPIOA
    gpioInitPort(GPIOA);
 80002b6:	4836      	ldr	r0, [pc, #216]	; (8000390 <main+0xf4>)
 80002b8:	f000 f968 	bl	800058c <gpioInitPort>

    // Konfiguration: PA0
    gpioSelectPinMode(GPIOA, PIN0, OUTPUT);
 80002bc:	2201      	movs	r2, #1
 80002be:	2100      	movs	r1, #0
 80002c0:	4833      	ldr	r0, [pc, #204]	; (8000390 <main+0xf4>)
 80002c2:	f000 f9d5 	bl	8000670 <gpioSelectPinMode>
    gpioSetOutputType(GPIOA, PIN0, PUSHPULL);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2100      	movs	r1, #0
 80002ca:	4831      	ldr	r0, [pc, #196]	; (8000390 <main+0xf4>)
 80002cc:	f000 fa3b 	bl	8000746 <gpioSetOutputType>
    gpioSelectPushPullType(GPIOA, PIN0, PULLUP);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2100      	movs	r1, #0
 80002d4:	482e      	ldr	r0, [pc, #184]	; (8000390 <main+0xf4>)
 80002d6:	f000 fa60 	bl	800079a <gpioSelectPushPullType>

    // Konfiguration: PA1
    gpioSelectPinMode(GPIOA, PIN1, OUTPUT);
 80002da:	2201      	movs	r2, #1
 80002dc:	2101      	movs	r1, #1
 80002de:	482c      	ldr	r0, [pc, #176]	; (8000390 <main+0xf4>)
 80002e0:	f000 f9c6 	bl	8000670 <gpioSelectPinMode>
    gpioSetOutputType(GPIOA, PIN1, PUSHPULL);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4829      	ldr	r0, [pc, #164]	; (8000390 <main+0xf4>)
 80002ea:	f000 fa2c 	bl	8000746 <gpioSetOutputType>
    gpioSelectPushPullType(GPIOA, PIN1, PULLUP);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2101      	movs	r1, #1
 80002f2:	4827      	ldr	r0, [pc, #156]	; (8000390 <main+0xf4>)
 80002f4:	f000 fa51 	bl	800079a <gpioSelectPushPullType>

    while (1)
    {
    	UPDATETimers();
 80002f8:	f000 f878 	bl	80003ec <UPDATETimers>

    	// Wurde der Timer fuer Pin0 gestartet?
    	if (pin0TimerStarted == false)
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <main+0xf8>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	f083 0301 	eor.w	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d008      	beq.n	800031c <main+0x80>
    	{
    		pin0Timer = getUptime() + 200; // Delay = 200 ms
 800030a:	f000 f865 	bl	80003d8 <getUptime>
 800030e:	4603      	mov	r3, r0
 8000310:	33c8      	adds	r3, #200	; 0xc8
 8000312:	4a21      	ldr	r2, [pc, #132]	; (8000398 <main+0xfc>)
 8000314:	6013      	str	r3, [r2, #0]
    		pin0TimerStarted = true;       // Verhindert, dass pin0Timer
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <main+0xf8>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
    										//TODO: Timer via interrupt
    	}

    	// Wurde der Timer gestartet, wird geprueft, ob der Timer
    	// abgelaufen ist.
    	if (pin0TimerStarted == true && getUptime() > pin0Timer)
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <main+0xf8>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d00d      	beq.n	8000340 <main+0xa4>
 8000324:	f000 f858 	bl	80003d8 <getUptime>
 8000328:	4602      	mov	r2, r0
 800032a:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <main+0xfc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d906      	bls.n	8000340 <main+0xa4>
    	{
    		gpioTogglePin(GPIOA, PIN0);    // pin0Timer ist abgelaufen
 8000332:	2100      	movs	r1, #0
 8000334:	4816      	ldr	r0, [pc, #88]	; (8000390 <main+0xf4>)
 8000336:	f000 f9e9 	bl	800070c <gpioTogglePin>
    		pin0TimerStarted = false;      // Erlauben, dass pin0Timer
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <main+0xf8>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
    		                               // neu geladen werden kann.
    	}

    	// Hier gelten die gleichen Kommentare wie fuer pin0Timer.
    	if (pin1TimerStarted == false)
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <main+0x100>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	f083 0301 	eor.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <main+0xc6>
    	{
    		pin1Timer = getUptime() + 400;
 800034e:	f000 f843 	bl	80003d8 <getUptime>
 8000352:	4603      	mov	r3, r0
 8000354:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <main+0x104>)
 800035a:	6013      	str	r3, [r2, #0]
    		pin1TimerStarted = true;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <main+0x100>)
 800035e:	2201      	movs	r2, #1
 8000360:	701a      	strb	r2, [r3, #0]
    	}

    	if (pin1TimerStarted == true && getUptime() > pin1Timer)
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <main+0x100>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0c6      	beq.n	80002f8 <main+0x5c>
 800036a:	f000 f835 	bl	80003d8 <getUptime>
 800036e:	4602      	mov	r2, r0
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <main+0x104>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d9bf      	bls.n	80002f8 <main+0x5c>
    	{
    		gpioTogglePin(GPIOA, PIN1);
 8000378:	2101      	movs	r1, #1
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <main+0xf4>)
 800037c:	f000 f9c6 	bl	800070c <gpioTogglePin>
    		pin1TimerStarted = false;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <main+0x100>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
    	UPDATETimers();
 8000386:	e7b7      	b.n	80002f8 <main+0x5c>
 8000388:	20000000 	.word	0x20000000
 800038c:	10624dd3 	.word	0x10624dd3
 8000390:	40020000 	.word	0x40020000
 8000394:	20000024 	.word	0x20000024
 8000398:	20000028 	.word	0x20000028
 800039c:	20000025 	.word	0x20000025
 80003a0:	2000002c 	.word	0x2000002c

080003a4 <SysTick_Handler>:

/**
 * @brief Interrupt-Service-Routine fuer den SysTick-Timer
 */
void SysTick_Handler (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
    ++tick;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <SysTick_Handler+0x2c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <SysTick_Handler+0x2c>)
 80003b0:	6013      	str	r3, [r2, #0]

    // Durch den folgenden Test erreichen wir, dass der SysTick-Timer
    // beliebig lange laufen kann. Ein SysTick-Ueberlauf ist nun nicht
    // mehr relevant.
    if (tick > SYSTICK_MAX)
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <SysTick_Handler+0x2c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003ba:	d905      	bls.n	80003c8 <SysTick_Handler+0x24>
    {
    	tick = 0UL;
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <SysTick_Handler+0x2c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
    	timerCorrected = true;
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <SysTick_Handler+0x30>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	701a      	strb	r2, [r3, #0]
    }
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	20000020 	.word	0x20000020
 80003d4:	20000030 	.word	0x20000030

080003d8 <getUptime>:
 *
 * @param[in]  none
 * @param[out] tick : Der aktuelle Wert des Zaehlers
 */
uint32_t getUptime(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	return tick;
 80003dc:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <getUptime+0x10>)
 80003de:	681b      	ldr	r3, [r3, #0]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20000020 	.word	0x20000020

080003ec <UPDATETimers>:
 * @par   Die verwendeten Timer muessen korrigiert werden. Erfolgt
 *        dies nicht, waere das Toggle-Timing der Pins nicht mehr
 *        korrekt.
 */
void UPDATETimers(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	if (timerCorrected == true)
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <UPDATETimers+0x34>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00e      	beq.n	8000416 <UPDATETimers+0x2a>
	{
		pin0Timer -= SYSTICK_MAX;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <UPDATETimers+0x38>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000400:	4a08      	ldr	r2, [pc, #32]	; (8000424 <UPDATETimers+0x38>)
 8000402:	6013      	str	r3, [r2, #0]
		pin1Timer -= SYSTICK_MAX;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <UPDATETimers+0x3c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <UPDATETimers+0x3c>)
 800040e:	6013      	str	r3, [r2, #0]
		timerCorrected = false;
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <UPDATETimers+0x34>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
	}
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000030 	.word	0x20000030
 8000424:	20000028 	.word	0x20000028
 8000428:	2000002c 	.word	0x2000002c

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000430:	f000 f825 	bl	800047e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f000 f9eb 	bl	8000834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff ff1d 	bl	800029c <main>

08000462 <LoopForever>:

LoopForever:
    b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000470:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000474:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000478:	20000034 	.word	0x20000034

0800047c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC_IRQHandler>

0800047e <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
	...

0800048c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	2302      	movs	r3, #2
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	2302      	movs	r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <SystemCoreClockUpdate+0xec>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	2b08      	cmp	r3, #8
 80004b4:	d011      	beq.n	80004da <SystemCoreClockUpdate+0x4e>
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	2b08      	cmp	r3, #8
 80004ba:	d844      	bhi.n	8000546 <SystemCoreClockUpdate+0xba>
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d003      	beq.n	80004ca <SystemCoreClockUpdate+0x3e>
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d004      	beq.n	80004d2 <SystemCoreClockUpdate+0x46>
 80004c8:	e03d      	b.n	8000546 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004ca:	4b2c      	ldr	r3, [pc, #176]	; (800057c <SystemCoreClockUpdate+0xf0>)
 80004cc:	4a2c      	ldr	r2, [pc, #176]	; (8000580 <SystemCoreClockUpdate+0xf4>)
 80004ce:	601a      	str	r2, [r3, #0]
      break;
 80004d0:	e03d      	b.n	800054e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <SystemCoreClockUpdate+0xf0>)
 80004d4:	4a2b      	ldr	r2, [pc, #172]	; (8000584 <SystemCoreClockUpdate+0xf8>)
 80004d6:	601a      	str	r2, [r3, #0]
      break;
 80004d8:	e039      	b.n	800054e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <SystemCoreClockUpdate+0xec>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	0d9b      	lsrs	r3, r3, #22
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <SystemCoreClockUpdate+0xec>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00c      	beq.n	8000510 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <SystemCoreClockUpdate+0xf8>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <SystemCoreClockUpdate+0xec>)
 8000500:	6852      	ldr	r2, [r2, #4]
 8000502:	0992      	lsrs	r2, r2, #6
 8000504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e00b      	b.n	8000528 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000510:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <SystemCoreClockUpdate+0xf4>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	fbb2 f3f3 	udiv	r3, r2, r3
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <SystemCoreClockUpdate+0xec>)
 800051a:	6852      	ldr	r2, [r2, #4]
 800051c:	0992      	lsrs	r2, r2, #6
 800051e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000522:	fb02 f303 	mul.w	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <SystemCoreClockUpdate+0xec>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	0c1b      	lsrs	r3, r3, #16
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	3301      	adds	r3, #1
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <SystemCoreClockUpdate+0xf0>)
 8000542:	6013      	str	r3, [r2, #0]
      break;
 8000544:	e003      	b.n	800054e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <SystemCoreClockUpdate+0xf0>)
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <SystemCoreClockUpdate+0xf4>)
 800054a:	601a      	str	r2, [r3, #0]
      break;
 800054c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <SystemCoreClockUpdate+0xec>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	091b      	lsrs	r3, r3, #4
 8000554:	f003 030f 	and.w	r3, r3, #15
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <SystemCoreClockUpdate+0xfc>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <SystemCoreClockUpdate+0xf0>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	fa22 f303 	lsr.w	r3, r2, r3
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <SystemCoreClockUpdate+0xf0>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800
 800057c:	20000000 	.word	0x20000000
 8000580:	00f42400 	.word	0x00f42400
 8000584:	017d7840 	.word	0x017d7840
 8000588:	08000894 	.word	0x08000894

0800058c <gpioInitPort>:
 *
 * @param[in]  *port : Pointer to the GPIO port
 * @param[out]  none
 */
void gpioInitPort(GPIO_TypeDef *port)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if (GPIOA == port)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <gpioInitPort+0xc0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <gpioInitPort+0x1e>
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <gpioInitPort+0xc4>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <gpioInitPort+0xc4>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else if (GPIOH == port)
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
	}
}
 80005a8:	e04b      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOB == port)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <gpioInitPort+0xc8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <gpioInitPort+0x34>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <gpioInitPort+0xc4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <gpioInitPort+0xc4>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005be:	e040      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOC == port)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <gpioInitPort+0xcc>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <gpioInitPort+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <gpioInitPort+0xc4>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <gpioInitPort+0xc4>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d4:	e035      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOD == port)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <gpioInitPort+0xd0>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <gpioInitPort+0x60>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <gpioInitPort+0xc4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <gpioInitPort+0xc4>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ea:	e02a      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOE == port)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <gpioInitPort+0xd4>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <gpioInitPort+0x76>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <gpioInitPort+0xc4>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a15      	ldr	r2, [pc, #84]	; (8000650 <gpioInitPort+0xc4>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000600:	e01f      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOF == port)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <gpioInitPort+0xd8>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <gpioInitPort+0x8c>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <gpioInitPort+0xc4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <gpioInitPort+0xc4>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000616:	e014      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOG == port)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <gpioInitPort+0xdc>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <gpioInitPort+0xa2>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <gpioInitPort+0xc4>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <gpioInitPort+0xc4>)
 8000626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	e009      	b.n	8000642 <gpioInitPort+0xb6>
	else if (GPIOH == port)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <gpioInitPort+0xe0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d105      	bne.n	8000642 <gpioInitPort+0xb6>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <gpioInitPort+0xc4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <gpioInitPort+0xc4>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40020000 	.word	0x40020000
 8000650:	40023800 	.word	0x40023800
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	40021c00 	.word	0x40021c00

08000670 <gpioSelectPinMode>:
 *
 * @param[in]  *port : Pointer to the GPIO port
 * @param[out]  none
 */
void gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
 800067c:	4613      	mov	r3, r2
 800067e:	70bb      	strb	r3, [r7, #2]
	// Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	78fa      	ldrb	r2, [r7, #3]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	401a      	ands	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <gpioSelectPinMode+0x40>
	{
		port->MODER |= (mode << (pin * 2));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	78b9      	ldrb	r1, [r7, #2]
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	0052      	lsls	r2, r2, #1
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
	}
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <gpioSetPin>:
 * @param[in]  *port : Pointer to the GPIO port
 * @param[in]   pin  : Number of the GPIO pin
 * @param[out]  none
 */
void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	619a      	str	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <gpioResetPin>:
 * @param[in]  *port : Pointer to the GPIO port
 * @param[in]   pin  : Number of the GPIO pin
 * @param[out]  none
 */
void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1 << (pin + 16));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	78fa      	ldrb	r2, [r7, #3]
 80006f4:	3210      	adds	r2, #16
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	619a      	str	r2, [r3, #24]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <gpioTogglePin>:
 * @param[in]  *port : Pointer to the GPIO port
 * @param[in]   pin  : Number of the GPIO pin
 * @param[out]  none
 */
void gpioTogglePin(GPIO_TypeDef *port, PIN_NUM pin)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	if (gpioGetPinVal(port, pin))
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f873 	bl	8000808 <gpioGetPinVal>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <gpioTogglePin+0x28>
	{
		gpioResetPin(port, pin);
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	4619      	mov	r1, r3
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ffd8 	bl	80006e2 <gpioResetPin>
	}
	else
	{
		gpioSetPin(port, pin);
	}
}
 8000732:	e004      	b.n	800073e <gpioTogglePin+0x32>
		gpioSetPin(port, pin);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffbe 	bl	80006ba <gpioSetPin>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <gpioSetOutputType>:
 * @param[in]   outType : Selects between Push/Pull or Open Drain
 *
 * @param[out]  none
 */
bool gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM pin, OUTPUT_TYPE outType)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	70fb      	strb	r3, [r7, #3]
 8000752:	4613      	mov	r3, r2
 8000754:	70bb      	strb	r3, [r7, #2]
	if (pin >= PIN0 && pin <= PIN15)
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d816      	bhi.n	800078a <gpioSetOutputType+0x44>
	{
		port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]
		if (OPENDRAIN == outType)
 8000770:	78bb      	ldrb	r3, [r7, #2]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10b      	bne.n	800078e <gpioSetOutputType+0x48>
		{
			port->OTYPER |= (1 << pin);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	431a      	orrs	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	e001      	b.n	800078e <gpioSetOutputType+0x48>
		}
	}
	else
	{
        return false;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <gpioSetOutputType+0x4a>
	}

	return true;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <gpioSelectPushPullType>:
 * @param[in]   outType : Different pull-up/pull-down settings
 *
 * @param[out]  none
 */
void gpioSelectPushPullType(GPIO_TypeDef *port, PIN_NUM pin, PUPD_MODE pupd)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
 80007a6:	4613      	mov	r3, r2
 80007a8:	70bb      	strb	r3, [r7, #2]
    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	2103      	movs	r1, #3
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d11a      	bne.n	80007fe <gpioSelectPushPullType+0x64>
	{
		if (PULLUP == pupd)
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10a      	bne.n	80007e4 <gpioSelectPushPullType+0x4a>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	78fa      	ldrb	r2, [r7, #3]
 80007d4:	0052      	lsls	r2, r2, #1
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60da      	str	r2, [r3, #12]
		else if (PULLDOWN == pupd)
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
		}
	}
}
 80007e2:	e00c      	b.n	80007fe <gpioSelectPushPullType+0x64>
		else if (PULLDOWN == pupd)
 80007e4:	78bb      	ldrb	r3, [r7, #2]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d109      	bne.n	80007fe <gpioSelectPushPullType+0x64>
			port->PUPDR |= (PULLDOWN << (pin *2));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	78fa      	ldrb	r2, [r7, #3]
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	2102      	movs	r1, #2
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	431a      	orrs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <gpioGetPinVal>:
 * @param[in]   pin   : Number of the GPIO pin
 *
 * @param[out]  pinValue
 */
uint8_t gpioGetPinVal(GPIO_TypeDef *port, PIN_NUM pin)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	return (port->IDR & (1 << pin));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4013      	ands	r3, r2
 8000826:	b2db      	uxtb	r3, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
	...

08000834 <__libc_init_array>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	4d0d      	ldr	r5, [pc, #52]	; (800086c <__libc_init_array+0x38>)
 8000838:	4c0d      	ldr	r4, [pc, #52]	; (8000870 <__libc_init_array+0x3c>)
 800083a:	1b64      	subs	r4, r4, r5
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	2600      	movs	r6, #0
 8000840:	42a6      	cmp	r6, r4
 8000842:	d109      	bne.n	8000858 <__libc_init_array+0x24>
 8000844:	4d0b      	ldr	r5, [pc, #44]	; (8000874 <__libc_init_array+0x40>)
 8000846:	4c0c      	ldr	r4, [pc, #48]	; (8000878 <__libc_init_array+0x44>)
 8000848:	f000 f818 	bl	800087c <_init>
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	2600      	movs	r6, #0
 8000852:	42a6      	cmp	r6, r4
 8000854:	d105      	bne.n	8000862 <__libc_init_array+0x2e>
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f855 3b04 	ldr.w	r3, [r5], #4
 800085c:	4798      	blx	r3
 800085e:	3601      	adds	r6, #1
 8000860:	e7ee      	b.n	8000840 <__libc_init_array+0xc>
 8000862:	f855 3b04 	ldr.w	r3, [r5], #4
 8000866:	4798      	blx	r3
 8000868:	3601      	adds	r6, #1
 800086a:	e7f2      	b.n	8000852 <__libc_init_array+0x1e>
 800086c:	080008a4 	.word	0x080008a4
 8000870:	080008a4 	.word	0x080008a4
 8000874:	080008a4 	.word	0x080008a4
 8000878:	080008a8 	.word	0x080008a8

0800087c <_init>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	bf00      	nop
 8000880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000882:	bc08      	pop	{r3}
 8000884:	469e      	mov	lr, r3
 8000886:	4770      	bx	lr

08000888 <_fini>:
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	bf00      	nop
 800088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088e:	bc08      	pop	{r3}
 8000890:	469e      	mov	lr, r3
 8000892:	4770      	bx	lr
