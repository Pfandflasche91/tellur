
Brom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800bb74  0800bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd40  0800bd40  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd40  0800bd40  0001bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd48  0800bd48  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd48  0800bd48  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800bd50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  20000170  0800bec0  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  0800bec0  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f84  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003746  00000000  00000000  00039124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c9c  00000000  00000000  0003eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019675  00000000  00000000  00064c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d60dd  00000000  00000000  0007e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001543e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000619c  00000000  00000000  00154438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0015a5d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000170 	.word	0x20000170
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb5c 	.word	0x0800bb5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000174 	.word	0x20000174
 800020c:	0800bb5c 	.word	0x0800bb5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b098      	sub	sp, #96	; 0x60
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char uart_buf[50];
	int uart_buf_len;
	uint16_t timer_val;
	int counter = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff1f 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f8a7 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fb0b 	bl	8000bf0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005da:	f009 fa87 	bl	8009aec <MX_USB_DEVICE_Init>
  MX_TIM13_Init();
 80005de:	f000 fa95 	bl	8000b0c <MX_TIM13_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 fadb 	bl	8000b9c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005e6:	f000 f909 	bl	80007fc <MX_TIM2_Init>
  MX_TIM14_Init();
 80005ea:	f000 fab3 	bl	8000b54 <MX_TIM14_Init>
  MX_TIM3_Init();
 80005ee:	f000 f97f 	bl	80008f0 <MX_TIM3_Init>
  MX_TIM11_Init();
 80005f2:	f000 f9ed 	bl	80009d0 <MX_TIM11_Init>
  MX_TIM12_Init();
 80005f6:	f000 fa39 	bl	8000a6c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4943      	ldr	r1, [pc, #268]	; (800070c <main+0x148>)
 8000600:	4618      	mov	r0, r3
 8000602:	f00a f8a1 	bl	800a748 <siprintf>
 8000606:	65b8      	str	r0, [r7, #88]	; 0x58
  //HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);

  // STart timer
  	  srand(time(NULL));
 8000608:	2000      	movs	r0, #0
 800060a:	f00a f8bd 	bl	800a788 <time>
 800060e:	4602      	mov	r2, r0
 8000610:	460b      	mov	r3, r1
 8000612:	4613      	mov	r3, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f00a f82b 	bl	800a670 <srand>
  	  HAL_TIM_Base_Start_IT(&htim13);
 800061a:	483d      	ldr	r0, [pc, #244]	; (8000710 <main+0x14c>)
 800061c:	f003 fe76 	bl	800430c <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	483c      	ldr	r0, [pc, #240]	; (8000714 <main+0x150>)
 8000624:	f003 fffa 	bl	800461c <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	483a      	ldr	r0, [pc, #232]	; (8000714 <main+0x150>)
 800062c:	f004 f8be 	bl	80047ac <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000630:	2104      	movs	r1, #4
 8000632:	4838      	ldr	r0, [pc, #224]	; (8000714 <main+0x150>)
 8000634:	f003 feda 	bl	80043ec <HAL_TIM_OC_Start>

  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000638:	2104      	movs	r1, #4
 800063a:	4836      	ldr	r0, [pc, #216]	; (8000714 <main+0x150>)
 800063c:	f003 ffee 	bl	800461c <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000640:	2104      	movs	r1, #4
 8000642:	4834      	ldr	r0, [pc, #208]	; (8000714 <main+0x150>)
 8000644:	f004 f8b2 	bl	80047ac <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000648:	2104      	movs	r1, #4
 800064a:	4832      	ldr	r0, [pc, #200]	; (8000714 <main+0x150>)
 800064c:	f003 fece 	bl	80043ec <HAL_TIM_OC_Start>

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000650:	2108      	movs	r1, #8
 8000652:	4830      	ldr	r0, [pc, #192]	; (8000714 <main+0x150>)
 8000654:	f003 ffe2 	bl	800461c <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000658:	2108      	movs	r1, #8
 800065a:	482e      	ldr	r0, [pc, #184]	; (8000714 <main+0x150>)
 800065c:	f004 f8a6 	bl	80047ac <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 8000660:	2108      	movs	r1, #8
 8000662:	482c      	ldr	r0, [pc, #176]	; (8000714 <main+0x150>)
 8000664:	f003 fec2 	bl	80043ec <HAL_TIM_OC_Start>

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000668:	210c      	movs	r1, #12
 800066a:	482a      	ldr	r0, [pc, #168]	; (8000714 <main+0x150>)
 800066c:	f003 ffd6 	bl	800461c <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000670:	210c      	movs	r1, #12
 8000672:	4828      	ldr	r0, [pc, #160]	; (8000714 <main+0x150>)
 8000674:	f004 f89a 	bl	80047ac <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_4);
 8000678:	210c      	movs	r1, #12
 800067a:	4826      	ldr	r0, [pc, #152]	; (8000714 <main+0x150>)
 800067c:	f003 feb6 	bl	80043ec <HAL_TIM_OC_Start>

  	  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4825      	ldr	r0, [pc, #148]	; (8000718 <main+0x154>)
 8000684:	f004 f892 	bl	80047ac <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <main+0x154>)
 800068c:	f003 feae 	bl	80043ec <HAL_TIM_OC_Start>

  	  HAL_TIM_Base_Start_IT(&htim14);
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <main+0x158>)
 8000692:	f003 fe3b 	bl	800430c <HAL_TIM_Base_Start_IT>

  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	481e      	ldr	r0, [pc, #120]	; (8000714 <main+0x150>)
 800069a:	f004 f9f7 	bl	8004a8c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char txBuf[32];
  uint8_t count = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  timer_val = __HAL_TIM_GET_COUNTER(&htim13);
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x14c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  // wait for 50 ms
	  HAL_Delay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f000 ff20 	bl	80014f4 <HAL_Delay>
	  //get time elapsed
	  timer_val = __HAL_TIM_GET_COUNTER(&htim13) - timer_val;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <main+0x14c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	  //show elapsed time
	  //uart_buf_len = sprintf(uart_buf, "%u us\r\n",timer_val);
	  //CDC_Transmit_FS((uint8_t *) uart_buf, strlen(uart_buf));

	  uart_buf_len = sprintf(uart_buf, "Iteration %i s\r\n", counter);
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006cc:	4914      	ldr	r1, [pc, #80]	; (8000720 <main+0x15c>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00a f83a 	bl	800a748 <siprintf>
 80006d4:	65b8      	str	r0, [r7, #88]	; 0x58
	  CDC_Transmit_FS((uint8_t *) uart_buf, strlen(uart_buf));
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd98 	bl	8000210 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f009 fabc 	bl	8009c68 <CDC_Transmit_FS>

	  //HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);
	  counter += 1;
 80006f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f2:	3301      	adds	r3, #1
 80006f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (counter == 123)
 80006f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f8:	2b7b      	cmp	r3, #123	; 0x7b
 80006fa:	d101      	bne.n	8000700 <main+0x13c>
	  {
		  counter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	  }
	  HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f000 fef6 	bl	80014f4 <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim13);
 8000708:	e7cc      	b.n	80006a4 <main+0xe0>
 800070a:	bf00      	nop
 800070c:	0800bb74 	.word	0x0800bb74
 8000710:	200002ac 	.word	0x200002ac
 8000714:	2000018c 	.word	0x2000018c
 8000718:	200001d4 	.word	0x200001d4
 800071c:	200002f4 	.word	0x200002f4
 8000720:	0800bb84 	.word	0x0800bb84

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f009 ff94 	bl	800a660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800079c:	2348      	movs	r3, #72	; 0x48
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007a4:	2303      	movs	r3, #3
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fabd 	bl	8003d30 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 fae0 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fc35 	bl	800304c <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007e8:	f000 faca 	bl	8000d80 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	; 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_TIM2_Init+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600;
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000834:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <MX_TIM2_Init+0xf0>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000848:	f003 fe98 	bl	800457c <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000852:	f000 fa95 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4821      	ldr	r0, [pc, #132]	; (80008ec <MX_TIM2_Init+0xf0>)
 8000866:	f005 f9b5 	bl	8005bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000870:	f000 fa86 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000878:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800087c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <MX_TIM2_Init+0xf0>)
 800088e:	f004 fbc9 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000898:	f000 fa72 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_TIM2_Init+0xf0>)
 80008a4:	f004 fbbe 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008ae:	f000 fa67 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2208      	movs	r2, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_TIM2_Init+0xf0>)
 80008ba:	f004 fbb3 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80008c4:	f000 fa5c 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	220c      	movs	r2, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <MX_TIM2_Init+0xf0>)
 80008d0:	f004 fba8 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80008da:	f000 fa51 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_TIM2_Init+0xf0>)
 80008e0:	f000 fb54 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000018c 	.word	0x2000018c

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800091c:	4a2b      	ldr	r2, [pc, #172]	; (80009cc <MX_TIM3_Init+0xdc>)
 800091e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_TIM3_Init+0xd8>)
 8000922:	2254      	movs	r2, #84	; 0x54
 8000924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_TIM3_Init+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000;
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800092e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_TIM3_Init+0xd8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000940:	4821      	ldr	r0, [pc, #132]	; (80009c8 <MX_TIM3_Init+0xd8>)
 8000942:	f003 fc93 	bl	800426c <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 fa18 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	4619      	mov	r1, r3
 800095c:	481a      	ldr	r0, [pc, #104]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800095e:	f004 fc23 	bl	80051a8 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 fa0a 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800096e:	f004 f833 	bl	80049d8 <HAL_TIM_IC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 fa02 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800097c:	2350      	movs	r3, #80	; 0x50
 800097e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <MX_TIM3_Init+0xd8>)
 800098c:	f005 f922 	bl	8005bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000996:	f000 f9f3 	bl	8000d80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800099e:	2301      	movs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM3_Init+0xd8>)
 80009b2:	f004 fa9b 	bl	8004eec <HAL_TIM_IC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80009bc:	f000 f9e0 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001d4 	.word	0x200001d4
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM11_Init+0x94>)
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <MX_TIM11_Init+0x98>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM11_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_TIM11_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM11_Init+0x94>)
 80009fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a0e:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a10:	f003 fc2c 	bl	800426c <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000a1a:	f000 f9b1 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a20:	f003 fdac 	bl	800457c <HAL_TIM_PWM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 f9a9 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a46:	f004 faed 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000a50:	f000 f996 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM11_Init+0x94>)
 8000a56:	f000 fa99 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000021c 	.word	0x2000021c
 8000a68:	40014800 	.word	0x40014800

08000a6c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <MX_TIM12_Init+0x9c>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000aac:	f003 fd66 	bl	800457c <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000ab6:	f000 f963 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	; 0x60
 8000abc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000ad2:	f004 faa7 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000adc:	f000 f950 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000ae8:	f004 fa9c 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000af2:	f000 f945 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM12_Init+0x98>)
 8000af8:	f000 fa48 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000264 	.word	0x20000264
 8000b08:	40001800 	.word	0x40001800

08000b0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_TIM13_Init+0x44>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7200-1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b18:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b26:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_TIM13_Init+0x40>)
 8000b3a:	f003 fb97 	bl	800426c <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000b44:	f000 f91c 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200002ac 	.word	0x200002ac
 8000b50:	40001c00 	.word	0x40001c00

08000b54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <MX_TIM14_Init+0x44>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720-1;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b60:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b64:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b72:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_TIM14_Init+0x40>)
 8000b82:	f003 fb73 	bl	800426c <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000b8c:	f000 f8f8 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200002f4 	.word	0x200002f4
 8000b98:	40002000 	.word	0x40002000

08000b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART3_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	f005 f88e 	bl	8005cf4 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f8cf 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c
 8000bec:	40004800 	.word	0x40004800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_GPIO_Init+0xb4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2104      	movs	r1, #4
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c7c:	f000 ff04 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c80:	2304      	movs	r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0xb8>)
 8000c98:	f000 fd62 	bl	8001760 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	int duty_cycle = 10;
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	60fb      	str	r3, [r7, #12]
	if (htim == &htim2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d121      	bne.n	8000d04 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
	{
		duty_cycle = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_1);
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	60fb      	str	r3, [r7, #12]

		if (duty_cycle < 2400-1-10)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f640 1254 	movw	r2, #2388	; 0x954
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	dc03      	bgt.n	8000cda <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
		{
			duty_cycle = duty_cycle +1;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e001      	b.n	8000cde <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		}else
		{
			duty_cycle = 10;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	60fb      	str	r3, [r7, #12]
		}
		int r = rand() % (2400-1);
 8000cde:	f009 fcf5 	bl	800a6cc <rand>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	1191      	asrs	r1, r2, #6
 8000cec:	17da      	asrs	r2, r3, #31
 8000cee:	1a8a      	subs	r2, r1, r2
 8000cf0:	f640 115f 	movw	r1, #2399	; 0x95f
 8000cf4:	fb01 f202 	mul.w	r2, r1, r2
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
		//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,r);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,duty_cycle);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000018c 	.word	0x2000018c
 8000d10:	06d45aeb 	.word	0x06d45aeb

08000d14 <HAL_TIM_PeriodElapsedCallback>:
	float test = 1;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	int duty = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
	if (htim == &htim13)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		//Toogle LED
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		duty=1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
	}
	if (htim == &htim2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d101      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		duty = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	60fb      	str	r3, [r7, #12]
			duty = 0;
		}*/

		//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1000);
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200002ac 	.word	0x200002ac
 8000d48:	2000018c 	.word	0x2000018c

08000d4c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	encoder = __HAL_TIM_GET_COUNTER(&htim3);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000d5c:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_TIM_IC_CaptureCallback+0x30>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200001d4 	.word	0x200001d4
 8000d78:	20000380 	.word	0x20000380
 8000d7c:	2000018c 	.word	0x2000018c

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dec:	d10e      	bne.n	8000e0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000e0a:	e012      	b.n	8000e32 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_TIM_PWM_MspInit+0x68>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_TIM_PWM_MspInit+0x64>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40001800 	.word	0x40001800

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <HAL_TIM_Base_MspInit+0x12c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d134      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482f      	ldr	r0, [pc, #188]	; (8000f7c <HAL_TIM_Base_MspInit+0x134>)
 8000ebe:	f000 fc4f 	bl	8001760 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	201d      	movs	r0, #29
 8000ec8:	f000 fc13 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ecc:	201d      	movs	r0, #29
 8000ece:	f000 fc2c 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ed2:	e04a      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM11)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a29      	ldr	r2, [pc, #164]	; (8000f80 <HAL_TIM_Base_MspInit+0x138>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10e      	bne.n	8000efc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
}
 8000efa:	e036      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM13)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_TIM_Base_MspInit+0x13c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d116      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	202c      	movs	r0, #44	; 0x2c
 8000f28:	f000 fbe3 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000f2c:	202c      	movs	r0, #44	; 0x2c
 8000f2e:	f000 fbfc 	bl	800172a <HAL_NVIC_EnableIRQ>
}
 8000f32:	e01a      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM14)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_TIM_Base_MspInit+0x140>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d115      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x130>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	202d      	movs	r0, #45	; 0x2d
 8000f60:	f000 fbc7 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f64:	202d      	movs	r0, #45	; 0x2d
 8000f66:	f000 fbe0 	bl	800172a <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40014800 	.word	0x40014800
 8000f84:	40001c00 	.word	0x40001c00
 8000f88:	40002000 	.word	0x40002000

08000f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d13d      	bne.n	800102a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4831      	ldr	r0, [pc, #196]	; (80010c8 <HAL_TIM_MspPostInit+0x13c>)
 8001002:	f000 fbad 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001018:	2301      	movs	r3, #1
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	482a      	ldr	r0, [pc, #168]	; (80010cc <HAL_TIM_MspPostInit+0x140>)
 8001024:	f000 fb9c 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001028:	e048      	b.n	80010bc <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM11)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <HAL_TIM_MspPostInit+0x144>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d11f      	bne.n	8001074 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001062:	2303      	movs	r3, #3
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4817      	ldr	r0, [pc, #92]	; (80010cc <HAL_TIM_MspPostInit+0x140>)
 800106e:	f000 fb77 	bl	8001760 <HAL_GPIO_Init>
}
 8001072:	e023      	b.n	80010bc <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <HAL_TIM_MspPostInit+0x148>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11e      	bne.n	80010bc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_TIM_MspPostInit+0x138>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800109a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010ac:	2309      	movs	r3, #9
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_TIM_MspPostInit+0x140>)
 80010b8:	f000 fb52 	bl	8001760 <HAL_GPIO_Init>
}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40014800 	.word	0x40014800
 80010d4:	40001800 	.word	0x40001800

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_UART_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12c      	bne.n	8001154 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001132:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001144:	2307      	movs	r3, #7
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0x8c>)
 8001150:	f000 fb06 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004800 	.word	0x40004800
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f97e 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM3_IRQHandler+0x10>)
 80011c2:	f003 fd8b 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001d4 	.word	0x200001d4

080011d0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80011d6:	f003 fd81 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002ac 	.word	0x200002ac

080011e4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011ea:	f003 fd77 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002f4 	.word	0x200002f4

080011f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <OTG_FS_IRQHandler+0x10>)
 80011fe:	f000 fdb3 	bl	8001d68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000186c 	.word	0x2000186c

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001226:	f009 f9f1 	bl	800a60c <__errno>
 800122a:	4603      	mov	r3, r0
 800122c:	2216      	movs	r2, #22
 800122e:	601a      	str	r2, [r3, #0]
	return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_exit>:

void _exit (int status)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffe7 	bl	800121c <_kill>
	while (1) {}		/* Make sure we hang here */
 800124e:	e7fe      	b.n	800124e <_exit+0x12>

08001250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e00a      	b.n	8001278 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	4601      	mov	r1, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf0      	blt.n	8001262 <_read+0x12>
	}

return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf1      	blt.n	800129c <_write+0x12>
	}
	return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_close>:

int _close(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f009 f956 	bl	800a60c <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000384 	.word	0x20000384
 8001394:	20001fa8 	.word	0x20001fa8

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffd7 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f009 f915 	bl	800a618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f8e9 	bl	80005c4 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001400:	0800bd50 	.word	0x0800bd50
  ldr r2, =_sbss
 8001404:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001408:	20001fa8 	.word	0x20001fa8

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f94f 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fca2 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f967 	bl	8001746 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f92f 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000388 	.word	0x20000388

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000388 	.word	0x20000388

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e165      	b.n	8001a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8154 	bne.w	8001a42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ae 	beq.w	8001a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a5c      	ldr	r2, [pc, #368]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_GPIO_Init+0x300>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4f      	ldr	r2, [pc, #316]	; (8001a68 <HAL_GPIO_Init+0x308>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x21a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <HAL_GPIO_Init+0x30c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x216>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <HAL_GPIO_Init+0x310>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x212>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x314>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_GPIO_Init+0x318>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x20a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x31c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x206>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x320>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x202>
 800195e:	2306      	movs	r3, #6
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001962:	2307      	movs	r3, #7
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x21c>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x21c>
 800197a:	2300      	movs	r3, #0
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198c:	4935      	ldr	r1, [pc, #212]	; (8001a64 <HAL_GPIO_Init+0x304>)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_GPIO_Init+0x324>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a3c:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3301      	adds	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	f67f ae96 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af0a      	add	r7, sp, #40	; 0x28
 8001ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e116      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f008 fa18 	bl	8009f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fcc9 	bl	80064a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f004 fba0 	bl	8006278 <USB_CoreInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d7      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fcb7 	bl	80064c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e04a      	b.n	8001bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	4602      	mov	r2, r0
 8001b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	; 0x4c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3af      	bcc.n	8001b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f004 fc4f 	bl	800655c <USB_DevInit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e014      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d102      	bne.n	8001cee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f001 f98b 	bl	8003004 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fd91 	bl	800781a <USB_DevDisconnect>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_Start+0x1c>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e020      	b.n	8001d60 <HAL_PCD_Start+0x5e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d109      	bne.n	8001d42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fb9a 	bl	8006480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fd41 	bl	80077d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08d      	sub	sp, #52	; 0x34
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f005 fdff 	bl	8007982 <USB_GetMode>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 84b7 	bne.w	80026fa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 fd63 	bl	800785c <USB_ReadInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 84ad 	beq.w	80026f8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 fd50 	bl	800785c <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f002 0202 	and.w	r2, r2, #2
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 fd3e 	bl	800785c <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d161      	bne.n	8001eae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0210 	bic.w	r2, r2, #16
 8001df8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	0c5b      	lsrs	r3, r3, #17
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d124      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d035      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	6a38      	ldr	r0, [r7, #32]
 8001e46:	f005 fb75 	bl	8007534 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e56:	441a      	add	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e68:	441a      	add	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	621a      	str	r2, [r3, #32]
 8001e6e:	e016      	b.n	8001e9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	0c5b      	lsrs	r3, r3, #17
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d110      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e82:	2208      	movs	r2, #8
 8001e84:	4619      	mov	r1, r3
 8001e86:	6a38      	ldr	r0, [r7, #32]
 8001e88:	f005 fb54 	bl	8007534 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e98:	441a      	add	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0210 	orr.w	r2, r2, #16
 8001eac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 fcd2 	bl	800785c <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ebe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ec2:	f040 80a7 	bne.w	8002014 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f005 fcd7 	bl	8007882 <USB_ReadDevAllOutEpInterrupt>
 8001ed4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ed6:	e099      	b.n	800200c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 808e 	beq.w	8002000 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 fcfb 	bl	80078ea <USB_ReadDevOutEPInterrupt>
 8001ef4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2301      	movs	r3, #1
 8001f10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 feef 	bl	8002cf8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00c      	beq.n	8001f3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f30:	461a      	mov	r2, r3
 8001f32:	2308      	movs	r3, #8
 8001f34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 ffc5 	bl	8002ec8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f54:	461a      	mov	r2, r3
 8001f56:	2310      	movs	r3, #16
 8001f58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d030      	beq.n	8001fc6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d109      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	3304      	adds	r3, #4
 8001f98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	78db      	ldrb	r3, [r3, #3]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d108      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f008 f8d0 	bl	800a154 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2320      	movs	r3, #32
 8001fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3301      	adds	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f af62 	bne.w	8001ed8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f005 fc1f 	bl	800785c <USB_ReadInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002028:	f040 80db 	bne.w	80021e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fc40 	bl	80078b6 <USB_ReadDevAllInEpInterrupt>
 8002036:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800203c:	e0cd      	b.n	80021da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80c2 	beq.w	80021ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f005 fc66 	bl	8007926 <USB_ReadDevInEPInterrupt>
 800205a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d057      	beq.n	8002116 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	2201      	movs	r2, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	69f9      	ldr	r1, [r7, #28]
 8002082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002086:	4013      	ands	r3, r2
 8002088:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002096:	461a      	mov	r2, r3
 8002098:	2301      	movs	r3, #1
 800209a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d132      	bne.n	800210a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	334c      	adds	r3, #76	; 0x4c
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4403      	add	r3, r0
 80020c4:	3348      	adds	r3, #72	; 0x48
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4419      	add	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4403      	add	r3, r0
 80020d8:	334c      	adds	r3, #76	; 0x4c
 80020da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d113      	bne.n	800210a <HAL_PCD_IRQHandler+0x3a2>
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3354      	adds	r3, #84	; 0x54
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002102:	461a      	mov	r2, r3
 8002104:	2101      	movs	r1, #1
 8002106:	f005 fc6d 	bl	80079e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f007 ff9a 	bl	800a04a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2308      	movs	r3, #8
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	2310      	movs	r3, #16
 800214c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	6a38      	ldr	r0, [r7, #32]
 8002178:	f004 fb4e 	bl	8006818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	3338      	adds	r3, #56	; 0x38
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	78db      	ldrb	r3, [r3, #3]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f007 ffe7 	bl	800a178 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b6:	461a      	mov	r2, r3
 80021b8:	2302      	movs	r3, #2
 80021ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fd08 	bl	8002bde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	3301      	adds	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f47f af2e 	bne.w	800203e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f005 fb38 	bl	800785c <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021f6:	d122      	bne.n	800223e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800221e:	2100      	movs	r1, #0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f008 f961 	bl	800a4e8 <HAL_PCDEx_LPM_Callback>
 8002226:	e002      	b.n	800222e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f007 ff85 	bl	800a138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800223c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f005 fb0a 	bl	800785c <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002252:	d112      	bne.n	800227a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f007 ff41 	bl	800a0ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002278:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f005 faec 	bl	800785c <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800228e:	d121      	bne.n	80022d4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800229e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d111      	bne.n	80022ce <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	f003 020f 	and.w	r2, r3, #15
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022c4:	2101      	movs	r1, #1
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f008 f90e 	bl	800a4e8 <HAL_PCDEx_LPM_Callback>
 80022cc:	e002      	b.n	80022d4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f007 ff0c 	bl	800a0ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 fabf 	bl	800785c <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e8:	f040 80b7 	bne.w	800245a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2110      	movs	r1, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fa86 	bl	8006818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	e046      	b.n	80023a0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231e:	461a      	mov	r2, r3
 8002320:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002324:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002336:	0151      	lsls	r1, r2, #5
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	440a      	add	r2, r1
 800233c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002340:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002344:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002352:	461a      	mov	r2, r3
 8002354:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002358:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236a:	0151      	lsls	r1, r2, #5
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	440a      	add	r2, r1
 8002370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002374:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002378:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238a:	0151      	lsls	r1, r2, #5
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	440a      	add	r2, r1
 8002390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002394:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002398:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	3301      	adds	r3, #1
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3b3      	bcc.n	8002312 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d6:	f043 030b 	orr.w	r3, r3, #11
 80023da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ec:	f043 030b 	orr.w	r3, r3, #11
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	e015      	b.n	8002420 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002406:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800240a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241a:	f043 030b 	orr.w	r3, r3, #11
 800241e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002432:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002444:	461a      	mov	r2, r3
 8002446:	f005 facd 	bl	80079e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f005 f9fc 	bl	800785c <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800246a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246e:	d124      	bne.n	80024ba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f005 fa92 	bl	800799e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fa47 	bl	8006912 <USB_GetDevSpeed>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681c      	ldr	r4, [r3, #0]
 8002490:	f000 fec2 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8002494:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4620      	mov	r0, r4
 80024a0:	f003 ff4c 	bl	800633c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f007 fdf8 	bl	800a09a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f005 f9cc 	bl	800785c <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d10a      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f007 fdd5 	bl	800a07e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f002 0208 	and.w	r2, r2, #8
 80024e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 f9b7 	bl	800785c <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d122      	bne.n	800253e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002504:	2301      	movs	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
 8002508:	e014      	b.n	8002534 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fb27 	bl	8002b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	429a      	cmp	r2, r3
 800253c:	d3e5      	bcc.n	800250a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f005 f98a 	bl	800785c <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002552:	d13b      	bne.n	80025cc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002554:	2301      	movs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	e02b      	b.n	80025b2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3340      	adds	r3, #64	; 0x40
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d115      	bne.n	80025ac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002580:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	da12      	bge.n	80025ac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333f      	adds	r3, #63	; 0x3f
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fae8 	bl	8002b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	3301      	adds	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3ce      	bcc.n	800255a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 f943 	bl	800785c <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e0:	d155      	bne.n	800268e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e2:	2301      	movs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	e045      	b.n	8002674 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d12e      	bne.n	800266e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002610:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002612:	2b00      	cmp	r3, #0
 8002614:	da2b      	bge.n	800266e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002622:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002626:	429a      	cmp	r2, r3
 8002628:	d121      	bne.n	800266e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6053      	str	r3, [r2, #4]
            break;
 800266c:	e007      	b.n	800267e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	429a      	cmp	r2, r3
 800267c:	d3b4      	bcc.n	80025e8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800268c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f005 f8e2 	bl	800785c <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d10a      	bne.n	80026ba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 fd79 	bl	800a19c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 f8cc 	bl	800785c <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d115      	bne.n	80026fa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f007 fd69 	bl	800a1b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e000      	b.n	80026fa <HAL_PCD_IRQHandler+0x992>
      return;
 80026f8:	bf00      	nop
    }
  }
}
 80026fa:	3734      	adds	r7, #52	; 0x34
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_SetAddress+0x1a>
 8002716:	2302      	movs	r3, #2
 8002718:	e013      	b.n	8002742 <HAL_PCD_SetAddress+0x42>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f005 f82a 	bl	800778c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	4608      	mov	r0, r1
 8002754:	4611      	mov	r1, r2
 8002756:	461a      	mov	r2, r3
 8002758:	4603      	mov	r3, r0
 800275a:	70fb      	strb	r3, [r7, #3]
 800275c:	460b      	mov	r3, r1
 800275e:	803b      	strh	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276c:	2b00      	cmp	r3, #0
 800276e:	da0f      	bge.n	8002790 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	3338      	adds	r3, #56	; 0x38
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3304      	adds	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	705a      	strb	r2, [r3, #1]
 800278e:	e00f      	b.n	80027b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027bc:	883a      	ldrh	r2, [r7, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	78ba      	ldrb	r2, [r7, #2]
 80027c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d102      	bne.n	80027e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_EP_Open+0xaa>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e00e      	b.n	8002812 <HAL_PCD_EP_Open+0xc8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f8aa 	bl	800695c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002810:	7afb      	ldrb	r3, [r7, #11]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da0f      	bge.n	800284e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	3338      	adds	r3, #56	; 0x38
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	705a      	strb	r2, [r3, #1]
 800284c:	e00f      	b.n	800286e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_Close+0x6e>
 8002884:	2302      	movs	r3, #2
 8002886:	e00e      	b.n	80028a6 <HAL_PCD_EP_Close+0x8c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 f8e8 	bl	8006a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	460b      	mov	r3, r1
 80028bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800290a:	7afb      	ldrb	r3, [r7, #11]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	f004 fbc7 	bl	80070b4 <USB_EP0StartXfer>
 8002926:	e008      	b.n	800293a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6979      	ldr	r1, [r7, #20]
 8002936:	f004 f975 	bl	8006c24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 020f 	and.w	r2, r3, #15
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	460b      	mov	r3, r1
 8002982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f003 020f 	and.w	r2, r3, #15
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	3338      	adds	r3, #56	; 0x38
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	3304      	adds	r3, #4
 800299a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2201      	movs	r2, #1
 80029b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6979      	ldr	r1, [r7, #20]
 80029e6:	f004 fb65 	bl	80070b4 <USB_EP0StartXfer>
 80029ea:	e008      	b.n	80029fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6979      	ldr	r1, [r7, #20]
 80029fa:	f004 f913 	bl	8006c24 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d901      	bls.n	8002a26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e050      	b.n	8002ac8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0f      	bge.n	8002a4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3338      	adds	r3, #56	; 0x38
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
 8002a4c:	e00d      	b.n	8002a6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_EP_SetStall+0x82>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e01e      	b.n	8002ac8 <HAL_PCD_EP_SetStall+0xc0>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 fda3 	bl	80075e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	b2d9      	uxtb	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f004 ff93 	bl	80079e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 020f 	and.w	r2, r3, #15
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d901      	bls.n	8002aee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e042      	b.n	8002b74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da0f      	bge.n	8002b16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3338      	adds	r3, #56	; 0x38
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	705a      	strb	r2, [r3, #1]
 8002b14:	e00f      	b.n	8002b36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_PCD_EP_ClrStall+0x86>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e00e      	b.n	8002b74 <HAL_PCD_EP_ClrStall+0xa4>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 fdab 	bl	80076c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da0c      	bge.n	8002baa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3338      	adds	r3, #56	; 0x38
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e00c      	b.n	8002bc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fbca 	bl	8007364 <USB_EPStopXfer>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b08a      	sub	sp, #40	; 0x28
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	3338      	adds	r3, #56	; 0x38
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d901      	bls.n	8002c16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06c      	b.n	8002cf0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d902      	bls.n	8002c32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3303      	adds	r3, #3
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3a:	e02b      	b.n	8002c94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d902      	bls.n	8002c58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	3303      	adds	r3, #3
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6919      	ldr	r1, [r3, #16]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	4603      	mov	r3, r0
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f004 fc1e 	bl	80074b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	441a      	add	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	441a      	add	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d809      	bhi.n	8002cbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d203      	bcs.n	8002cbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1be      	bne.n	8002c3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d811      	bhi.n	8002cee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	6939      	ldr	r1, [r7, #16]
 8002ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cea:	4013      	ands	r3, r2
 8002cec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	333c      	adds	r3, #60	; 0x3c
 8002d10:	3304      	adds	r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d17b      	bne.n	8002e26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	f240 80b9 	bls.w	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80b3 	beq.w	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d60:	6093      	str	r3, [r2, #8]
 8002d62:	e0a7      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	e098      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8093 	bne.w	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d90f      	bls.n	8002db6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	6093      	str	r3, [r2, #8]
 8002db4:	e07e      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e00:	461a      	mov	r2, r3
 8002e02:	2101      	movs	r1, #1
 8002e04:	f004 fdee 	bl	80079e4 <USB_EP0_OutStart>
 8002e08:	e006      	b.n	8002e18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f007 f8f8 	bl	800a014 <HAL_PCD_DataOutStageCallback>
 8002e24:	e046      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d124      	bne.n	8002e78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	e032      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e64:	461a      	mov	r2, r3
 8002e66:	2320      	movs	r3, #32
 8002e68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f007 f8cf 	bl	800a014 <HAL_PCD_DataOutStageCallback>
 8002e76:	e01d      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d114      	bne.n	8002ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f004 fd9e 	bl	80079e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f007 f8b0 	bl	800a014 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54300a 	.word	0x4f54300a
 8002ec4:	4f54310a 	.word	0x4f54310a

08002ec8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	333c      	adds	r3, #60	; 0x3c
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d90e      	bls.n	8002f1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f007 f867 	bl	8009ff0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d90c      	bls.n	8002f44 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d108      	bne.n	8002f44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2101      	movs	r1, #1
 8002f40:	f004 fd50 	bl	80079e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	4f54300a 	.word	0x4f54300a

08002f54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
 8002f60:	4613      	mov	r3, r2
 8002f62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d107      	bne.n	8002f82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f72:	883b      	ldrh	r3, [r7, #0]
 8002f74:	0419      	lsls	r1, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f80:	e028      	b.n	8002fd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e00d      	b.n	8002fb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3340      	adds	r3, #64	; 0x40
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3ec      	bcc.n	8002f96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fbc:	883b      	ldrh	r3, [r7, #0]
 8002fbe:	0418      	lsls	r0, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4302      	orrs	r2, r0
 8002fcc:	3340      	adds	r3, #64	; 0x40
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	f043 0303 	orr.w	r3, r3, #3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fe f9ce 	bl	80014dc <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fe f9ca 	bl	80014dc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 fb7f 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe f92e 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	0800bbe0 	.word	0x0800bbe0
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_GetHCLKFreq+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003234:	f7ff fff0 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0a9b      	lsrs	r3, r3, #10
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	0800bbf0 	.word	0x0800bbf0

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800325c:	f7ff ffdc 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0b5b      	lsrs	r3, r3, #13
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	0800bbf0 	.word	0x0800bbf0

08003280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80032b8:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	496c      	ldr	r1, [pc, #432]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80032d6:	2301      	movs	r3, #1
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032e6:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	4960      	ldr	r1, [pc, #384]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003304:	2301      	movs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d017      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4955      	ldr	r1, [pc, #340]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d101      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003334:	2301      	movs	r3, #1
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003340:	2301      	movs	r3, #1
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003350:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	4946      	ldr	r1, [pc, #280]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d101      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003370:	2301      	movs	r3, #1
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800337c:	2301      	movs	r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808a 	beq.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a33      	ldr	r2, [pc, #204]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b6:	f7fe f891 	bl	80014dc <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe f88d 	bl	80014dc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e278      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d028      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d114      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe f85b 	bl	80014dc <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe f857 	bl	80014dc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e240      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003458:	d114      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	4902      	ldr	r1, [pc, #8]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	e00c      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470e40 	.word	0x42470e40
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a49      	ldr	r2, [pc, #292]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800348a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	4944      	ldr	r1, [pc, #272]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80034b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034e6:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	492e      	ldr	r1, [pc, #184]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d011      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	4926      	ldr	r1, [pc, #152]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003526:	d101      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003528:	2301      	movs	r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800353a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	491a      	ldr	r1, [pc, #104]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d011      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800355c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003560:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800357a:	2301      	movs	r3, #1
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d005      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	f040 80ff 	bne.w	800378e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003596:	f7fd ffa1 	bl	80014dc <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800359e:	f7fd ff9d 	bl	80014dc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e188      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	424711e0 	.word	0x424711e0
 80035b8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035bc:	4b7e      	ldr	r3, [pc, #504]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d124      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035f0:	4b71      	ldr	r3, [pc, #452]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	3301      	adds	r3, #1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	0e1b      	lsrs	r3, r3, #24
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	431a      	orrs	r2, r3
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	4961      	ldr	r1, [pc, #388]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003658:	2b00      	cmp	r3, #0
 800365a:	d035      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003664:	d130      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003666:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367e:	0f1b      	lsrs	r3, r3, #28
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	019b      	lsls	r3, r3, #6
 8003690:	431a      	orrs	r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	071b      	lsls	r3, r3, #28
 80036a8:	4943      	ldr	r1, [pc, #268]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b6:	f023 021f 	bic.w	r2, r3, #31
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	493d      	ldr	r1, [pc, #244]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d029      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036dc:	d124      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f6:	0f1b      	lsrs	r3, r3, #28
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	431a      	orrs	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	071b      	lsls	r3, r3, #28
 8003720:	4925      	ldr	r1, [pc, #148]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003730:	2b00      	cmp	r3, #0
 8003732:	d016      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	071b      	lsls	r3, r3, #28
 800375a:	4917      	ldr	r1, [pc, #92]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003768:	f7fd feb8 	bl	80014dc <HAL_GetTick>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003770:	f7fd feb4 	bl	80014dc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e09f      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 8095 	bne.w	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd fe9e 	bl	80014dc <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a2:	e00f      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037a4:	f7fd fe9a 	bl	80014dc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d908      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e085      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470068 	.word	0x42470068
 80037c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d0:	d0e8      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02b      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d127      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	431a      	orrs	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	4928      	ldr	r1, [pc, #160]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	3b01      	subs	r3, #1
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01d      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d118      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	3b01      	subs	r3, #1
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	4910      	ldr	r1, [pc, #64]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003898:	f7fd fe20 	bl	80014dc <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038a0:	f7fd fe1c 	bl	80014dc <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e007      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038be:	d1ef      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3730      	adds	r7, #48	; 0x30
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470070 	.word	0x42470070

080038d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0ae      	sub	sp, #184	; 0xb8
 80038da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fa:	4bcb      	ldr	r3, [pc, #812]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b0c      	cmp	r3, #12
 8003904:	f200 8204 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x43c>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_RCC_GetSysClockFreq+0x3c>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003945 	.word	0x08003945
 8003914:	08003d11 	.word	0x08003d11
 8003918:	08003d11 	.word	0x08003d11
 800391c:	08003d11 	.word	0x08003d11
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003d11 	.word	0x08003d11
 8003928:	08003d11 	.word	0x08003d11
 800392c:	08003d11 	.word	0x08003d11
 8003930:	08003955 	.word	0x08003955
 8003934:	08003d11 	.word	0x08003d11
 8003938:	08003d11 	.word	0x08003d11
 800393c:	08003d11 	.word	0x08003d11
 8003940:	08003b45 	.word	0x08003b45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4bb9      	ldr	r3, [pc, #740]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800394a:	e1e5      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4bb7      	ldr	r3, [pc, #732]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x358>)
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003952:	e1e1      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4bb4      	ldr	r3, [pc, #720]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4bb1      	ldr	r3, [pc, #708]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d071      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4bae      	ldr	r3, [pc, #696]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003978:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800398e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	0159      	lsls	r1, r3, #5
 80039a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a4:	0150      	lsls	r0, r2, #5
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4621      	mov	r1, r4
 80039ac:	1a51      	subs	r1, r2, r1
 80039ae:	6439      	str	r1, [r7, #64]	; 0x40
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb63 0301 	sbc.w	r3, r3, r1
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039c4:	4649      	mov	r1, r9
 80039c6:	018b      	lsls	r3, r1, #6
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ce:	4641      	mov	r1, r8
 80039d0:	018a      	lsls	r2, r1, #6
 80039d2:	4641      	mov	r1, r8
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d8:	4649      	mov	r1, r9
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039ec:	4649      	mov	r1, r9
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4641      	mov	r1, r8
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4622      	mov	r2, r4
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30
 8003a06:	462b      	mov	r3, r5
 8003a08:	460a      	mov	r2, r1
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	028b      	lsls	r3, r1, #10
 8003a20:	4621      	mov	r1, r4
 8003a22:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a26:	4621      	mov	r1, r4
 8003a28:	028a      	lsls	r2, r1, #10
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a40:	f7fc fc3e 	bl	80002c0 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a4e:	e067      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a84:	0150      	lsls	r0, r2, #5
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	1a51      	subs	r1, r2, r1
 8003a8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	018b      	lsls	r3, r1, #6
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aae:	4641      	mov	r1, r8
 8003ab0:	018a      	lsls	r2, r1, #6
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab8:	4649      	mov	r1, r9
 8003aba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad2:	4692      	mov	sl, r2
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb1a 0303 	adds.w	r3, sl, r3
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	462b      	mov	r3, r5
 8003ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003af2:	4629      	mov	r1, r5
 8003af4:	028b      	lsls	r3, r1, #10
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003afc:	4621      	mov	r1, r4
 8003afe:	028a      	lsls	r2, r1, #10
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b08:	2200      	movs	r2, #0
 8003b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b0c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b12:	f7fc fbd5 	bl	80002c0 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b42:	e0e9      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d069      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b70:	2300      	movs	r3, #0
 8003b72:	667b      	str	r3, [r7, #100]	; 0x64
 8003b74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8a:	0150      	lsls	r0, r2, #5
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4621      	mov	r1, r4
 8003b92:	1a51      	subs	r1, r2, r1
 8003b94:	61b9      	str	r1, [r7, #24]
 8003b96:	4629      	mov	r1, r5
 8003b98:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003baa:	4659      	mov	r1, fp
 8003bac:	018b      	lsls	r3, r1, #6
 8003bae:	4651      	mov	r1, sl
 8003bb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	018a      	lsls	r2, r1, #6
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ebb2 0801 	subs.w	r8, r2, r1
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd8:	4690      	mov	r8, r2
 8003bda:	4699      	mov	r9, r3
 8003bdc:	4623      	mov	r3, r4
 8003bde:	eb18 0303 	adds.w	r3, r8, r3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	462b      	mov	r3, r5
 8003be6:	eb49 0303 	adc.w	r3, r9, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	028b      	lsls	r3, r1, #10
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c02:	4621      	mov	r1, r4
 8003c04:	028a      	lsls	r2, r1, #10
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c0e:	2200      	movs	r2, #0
 8003c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c18:	f7fc fb52 	bl	80002c0 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c26:	e063      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x41c>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x454>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c40:	653b      	str	r3, [r7, #80]	; 0x50
 8003c42:	2300      	movs	r3, #0
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
 8003c46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	0159      	lsls	r1, r3, #5
 8003c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5c:	0150      	lsls	r0, r2, #5
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4641      	mov	r1, r8
 8003c64:	1a51      	subs	r1, r2, r1
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4649      	mov	r1, r9
 8003c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	018b      	lsls	r3, r1, #6
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c86:	4651      	mov	r1, sl
 8003c88:	018a      	lsls	r2, r1, #6
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	1a54      	subs	r4, r2, r1
 8003c8e:	4659      	mov	r1, fp
 8003c90:	eb63 0501 	sbc.w	r5, r3, r1
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	00eb      	lsls	r3, r5, #3
 8003c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	18e3      	adds	r3, r4, r3
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cdc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ce2:	f7fc faed 	bl	80002c0 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x454>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0f1b      	lsrs	r3, r3, #28
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	37b8      	adds	r7, #184	; 0xb8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e28d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8083 	beq.w	8003e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d50:	4b94      	ldr	r3, [pc, #592]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d5c:	4b91      	ldr	r3, [pc, #580]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d68:	4b8e      	ldr	r3, [pc, #568]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d74:	d00c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b8b      	ldr	r3, [pc, #556]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d112      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4b84      	ldr	r3, [pc, #528]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x124>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d157      	bne.n	8003e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e25a      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x90>
 8003db2:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0xb4>
 8003dca:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a75      	ldr	r2, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fb6a 	bl	80014dc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fb66 	bl	80014dc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e21f      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xdc>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fb56 	bl	80014dc <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fd fb52 	bl	80014dc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e20b      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x104>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d06f      	beq.n	8003f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e62:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1d3      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4937      	ldr	r1, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e03a      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fd faff 	bl	80014dc <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fd fafb 	bl	80014dc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e1b4      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4925      	ldr	r1, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd fade 	bl	80014dc <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fd fada 	bl	80014dc <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e193      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fabe 	bl	80014dc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd faba 	bl	80014dc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e173      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x234>
 8003f82:	e01b      	b.n	8003fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd faa7 	bl	80014dc <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	e00e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fd faa3 	bl	80014dc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d907      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e15c      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	42470000 	.word	0x42470000
 8003fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b8a      	ldr	r3, [pc, #552]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ea      	bne.n	8003f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8097 	beq.w	80040f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b83      	ldr	r3, [pc, #524]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b7f      	ldr	r3, [pc, #508]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd fa63 	bl	80014dc <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fa5f 	bl	80014dc <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e118      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x31e>
 8004040:	4b66      	ldr	r3, [pc, #408]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x340>
 8004056:	4b61      	ldr	r3, [pc, #388]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a60      	ldr	r2, [pc, #384]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 8004070:	4b5a      	ldr	r3, [pc, #360]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a59      	ldr	r2, [pc, #356]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fa24 	bl	80014dc <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd fa20 	bl	80014dc <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0d7      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <HAL_RCC_OscConfig+0x368>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fa0e 	bl	80014dc <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fa0a 	bl	80014dc <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0c1      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ee      	bne.n	80040c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80ad 	beq.w	800425c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b08      	cmp	r3, #8
 800410c:	d060      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d145      	bne.n	80041a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd f9de 	bl	80014dc <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd f9da 	bl	80014dc <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e093      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd f9af 	bl	80014dc <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd f9ab 	bl	80014dc <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e064      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x452>
 80041a0:	e05c      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd f998 	bl	80014dc <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fd f994 	bl	80014dc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x480>
 80041ce:	e045      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e040      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <HAL_RCC_OscConfig+0x538>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d030      	beq.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d129      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d122      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004220:	4293      	cmp	r3, r2
 8004222:	d119      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d10f      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e041      	b.n	8004302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fdd8 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f001 f858 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e04e      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d01d      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_Base_Start_IT+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d010      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e007      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800

080043ec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_TIM_OC_Start+0x24>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e022      	b.n	8004456 <HAL_TIM_OC_Start+0x6a>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b04      	cmp	r3, #4
 8004414:	d109      	bne.n	800442a <HAL_TIM_OC_Start+0x3e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e015      	b.n	8004456 <HAL_TIM_OC_Start+0x6a>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d109      	bne.n	8004444 <HAL_TIM_OC_Start+0x58>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e008      	b.n	8004456 <HAL_TIM_OC_Start+0x6a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07c      	b.n	8004558 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <HAL_TIM_OC_Start+0x82>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800446c:	e013      	b.n	8004496 <HAL_TIM_OC_Start+0xaa>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d104      	bne.n	800447e <HAL_TIM_OC_Start+0x92>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800447c:	e00b      	b.n	8004496 <HAL_TIM_OC_Start+0xaa>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d104      	bne.n	800448e <HAL_TIM_OC_Start+0xa2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	e003      	b.n	8004496 <HAL_TIM_OC_Start+0xaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2201      	movs	r2, #1
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 fb72 	bl	8005b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <HAL_TIM_OC_Start+0x174>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_OC_Start+0xcc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <HAL_TIM_OC_Start+0x178>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_OC_Start+0xd0>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_TIM_OC_Start+0xd2>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_TIM_OC_Start+0x174>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d01d      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_TIM_OC_Start+0x17c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_TIM_OC_Start+0x180>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_TIM_OC_Start+0x184>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_TIM_OC_Start+0x178>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_TIM_OC_Start+0x188>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIM_OC_Start+0x136>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_TIM_OC_Start+0x18c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d111      	bne.n	8004546 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d010      	beq.n	8004556 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	e007      	b.n	8004556 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800

0800457c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e041      	b.n	8004612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fc1a 	bl	8000ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fed0 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x24>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e022      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x3e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e015      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x58>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07c      	b.n	8004788 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0x82>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	e013      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0x92>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ac:	e00b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fa5a 	bl	8005b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_TIM_PWM_Start+0x174>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start+0xcc>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <HAL_TIM_PWM_Start+0x178>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_PWM_Start+0xd0>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_TIM_PWM_Start+0xd2>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a22      	ldr	r2, [pc, #136]	; (8004790 <HAL_TIM_PWM_Start+0x174>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <HAL_TIM_PWM_Start+0x17c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_TIM_PWM_Start+0x180>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1c      	ldr	r2, [pc, #112]	; (80047a0 <HAL_TIM_PWM_Start+0x184>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a16      	ldr	r2, [pc, #88]	; (8004794 <HAL_TIM_PWM_Start+0x178>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIM_PWM_Start+0x188>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_PWM_Start+0x136>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_TIM_PWM_Start+0x18c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d111      	bne.n	8004776 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d010      	beq.n	8004786 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	e007      	b.n	8004786 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40010000 	.word	0x40010000
 8004794:	40010400 	.word	0x40010400
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_TIM_PWM_Start_IT+0x28>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e022      	b.n	800481a <HAL_TIM_PWM_Start_IT+0x6e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d109      	bne.n	80047ee <HAL_TIM_PWM_Start_IT+0x42>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	bf14      	ite	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	2300      	moveq	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e015      	b.n	800481a <HAL_TIM_PWM_Start_IT+0x6e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d109      	bne.n	8004808 <HAL_TIM_PWM_Start_IT+0x5c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e008      	b.n	800481a <HAL_TIM_PWM_Start_IT+0x6e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0c7      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start_IT+0x86>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004830:	e013      	b.n	800485a <HAL_TIM_PWM_Start_IT+0xae>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start_IT+0x96>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004840:	e00b      	b.n	800485a <HAL_TIM_PWM_Start_IT+0xae>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start_IT+0xa6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	e003      	b.n	800485a <HAL_TIM_PWM_Start_IT+0xae>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d841      	bhi.n	80048e4 <HAL_TIM_PWM_Start_IT+0x138>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048e5 	.word	0x080048e5
 8004870:	080048e5 	.word	0x080048e5
 8004874:	080048e5 	.word	0x080048e5
 8004878:	080048af 	.word	0x080048af
 800487c:	080048e5 	.word	0x080048e5
 8004880:	080048e5 	.word	0x080048e5
 8004884:	080048e5 	.word	0x080048e5
 8004888:	080048c1 	.word	0x080048c1
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048e5 	.word	0x080048e5
 8004894:	080048e5 	.word	0x080048e5
 8004898:	080048d3 	.word	0x080048d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0202 	orr.w	r2, r2, #2
 80048aa:	60da      	str	r2, [r3, #12]
      break;
 80048ac:	e01d      	b.n	80048ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0204 	orr.w	r2, r2, #4
 80048bc:	60da      	str	r2, [r3, #12]
      break;
 80048be:	e014      	b.n	80048ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	60da      	str	r2, [r3, #12]
      break;
 80048d0:	e00b      	b.n	80048ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0210 	orr.w	r2, r2, #16
 80048e0:	60da      	str	r2, [r3, #12]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d15f      	bne.n	80049b0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 f945 	bl	8005b88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2e      	ldr	r2, [pc, #184]	; (80049bc <HAL_TIM_PWM_Start_IT+0x210>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIM_PWM_Start_IT+0x166>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <HAL_TIM_PWM_Start_IT+0x214>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PWM_Start_IT+0x16a>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_TIM_PWM_Start_IT+0x16c>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a22      	ldr	r2, [pc, #136]	; (80049bc <HAL_TIM_PWM_Start_IT+0x210>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d01d      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <HAL_TIM_PWM_Start_IT+0x218>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_TIM_PWM_Start_IT+0x220>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_TIM_PWM_Start_IT+0x214>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_TIM_PWM_Start_IT+0x224>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_TIM_PWM_Start_IT+0x1d0>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_TIM_PWM_Start_IT+0x228>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d111      	bne.n	80049a0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b06      	cmp	r3, #6
 800498c:	d010      	beq.n	80049b0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	e007      	b.n	80049b0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40001800 	.word	0x40001800

080049d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e041      	b.n	8004a6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f839 	bl	8004a76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 fca2 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0x1e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e013      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x46>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0x2e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e00b      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x46>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start_IT+0x3e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e003      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x46>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_TIM_IC_Start_IT+0x58>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e013      	b.n	8004b0c <HAL_TIM_IC_Start_IT+0x80>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_IC_Start_IT+0x68>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e00b      	b.n	8004b0c <HAL_TIM_IC_Start_IT+0x80>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d104      	bne.n	8004b04 <HAL_TIM_IC_Start_IT+0x78>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e003      	b.n	8004b0c <HAL_TIM_IC_Start_IT+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d102      	bne.n	8004b1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b14:	7b7b      	ldrb	r3, [r7, #13]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d001      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0cc      	b.n	8004cb8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	e013      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0xca>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_IC_Start_IT+0xb2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	e00b      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0xca>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_IC_Start_IT+0xc2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	e003      	b.n	8004b56 <HAL_TIM_IC_Start_IT+0xca>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_IC_Start_IT+0xda>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b64:	e013      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x102>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_IC_Start_IT+0xea>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b74:	e00b      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x102>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d104      	bne.n	8004b86 <HAL_TIM_IC_Start_IT+0xfa>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	e003      	b.n	8004b8e <HAL_TIM_IC_Start_IT+0x102>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d841      	bhi.n	8004c18 <HAL_TIM_IC_Start_IT+0x18c>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_IC_Start_IT+0x110>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004c19 	.word	0x08004c19
 8004ba4:	08004c19 	.word	0x08004c19
 8004ba8:	08004c19 	.word	0x08004c19
 8004bac:	08004be3 	.word	0x08004be3
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004c19 	.word	0x08004c19
 8004bb8:	08004c19 	.word	0x08004c19
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004c19 	.word	0x08004c19
 8004bcc:	08004c07 	.word	0x08004c07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0202 	orr.w	r2, r2, #2
 8004bde:	60da      	str	r2, [r3, #12]
      break;
 8004be0:	e01d      	b.n	8004c1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0204 	orr.w	r2, r2, #4
 8004bf0:	60da      	str	r2, [r3, #12]
      break;
 8004bf2:	e014      	b.n	8004c1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	60da      	str	r2, [r3, #12]
      break;
 8004c04:	e00b      	b.n	8004c1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0210 	orr.w	r2, r2, #16
 8004c14:	60da      	str	r2, [r3, #12]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d148      	bne.n	8004cb6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ffab 	bl	8005b88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_TIM_IC_Start_IT+0x234>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_TIM_IC_Start_IT+0x238>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_TIM_IC_Start_IT+0x240>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_IC_Start_IT+0x244>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_IC_Start_IT+0x248>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <HAL_TIM_IC_Start_IT+0x24c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d010      	beq.n	8004cb6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	e007      	b.n	8004cb6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40010400 	.word	0x40010400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40001800 	.word	0x40001800

08004cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0202 	mvn.w	r2, #2
 8004d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc f814 	bl	8000d4c <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb05 	bl	8005336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fb ffbd 	bl	8000cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d122      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d11b      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0204 	mvn.w	r2, #4
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fb ffea 	bl	8000d4c <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fadb 	bl	8005336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fb ff93 	bl	8000cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d122      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d11b      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0208 	mvn.w	r2, #8
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fb ffc0 	bl	8000d4c <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fab1 	bl	8005336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fb ff69 	bl	8000cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fb ff96 	bl	8000d4c <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa87 	bl	8005336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fb ff3f 	bl	8000cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0201 	mvn.w	r2, #1
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fb ff5a 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 ff2a 	bl	8005ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fa49 	bl	800534a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0220 	mvn.w	r2, #32
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fef4 	bl	8005ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e088      	b.n	800501c <HAL_TIM_IC_ConfigChannel+0x130>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f000 fc6a 	bl	8005800 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020c 	bic.w	r2, r2, #12
 8004f3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]
 8004f4e:	e060      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d11c      	bne.n	8004f90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f000 fcee 	bl	8005946 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6999      	ldr	r1, [r3, #24]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]
 8004f8e:	e040      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11b      	bne.n	8004fce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 fd3b 	bl	8005a20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020c 	bic.w	r2, r2, #12
 8004fb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69d9      	ldr	r1, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	e021      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d11c      	bne.n	800500e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f000 fd58 	bl	8005a98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ff6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69d9      	ldr	r1, [r3, #28]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	61da      	str	r2, [r3, #28]
 800500c:	e001      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800503e:	2302      	movs	r3, #2
 8005040:	e0ae      	b.n	80051a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	f200 809f 	bhi.w	8005190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800508d 	.word	0x0800508d
 800505c:	08005191 	.word	0x08005191
 8005060:	08005191 	.word	0x08005191
 8005064:	08005191 	.word	0x08005191
 8005068:	080050cd 	.word	0x080050cd
 800506c:	08005191 	.word	0x08005191
 8005070:	08005191 	.word	0x08005191
 8005074:	08005191 	.word	0x08005191
 8005078:	0800510f 	.word	0x0800510f
 800507c:	08005191 	.word	0x08005191
 8005080:	08005191 	.word	0x08005191
 8005084:	08005191 	.word	0x08005191
 8005088:	0800514f 	.word	0x0800514f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fa04 	bl	80054a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0208 	orr.w	r2, r2, #8
 80050a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	619a      	str	r2, [r3, #24]
      break;
 80050ca:	e064      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fa54 	bl	8005580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	619a      	str	r2, [r3, #24]
      break;
 800510c:	e043      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 faa9 	bl	800566c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0208 	orr.w	r2, r2, #8
 8005128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0204 	bic.w	r2, r2, #4
 8005138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	61da      	str	r2, [r3, #28]
      break;
 800514c:	e023      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fafd 	bl	8005754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	61da      	str	r2, [r3, #28]
      break;
 800518e:	e002      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	75fb      	strb	r3, [r7, #23]
      break;
 8005194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_ConfigClockSource+0x1c>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e0b4      	b.n	800532e <HAL_TIM_ConfigClockSource+0x186>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fc:	d03e      	beq.n	800527c <HAL_TIM_ConfigClockSource+0xd4>
 80051fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005202:	f200 8087 	bhi.w	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520a:	f000 8086 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x172>
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005212:	d87f      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b70      	cmp	r3, #112	; 0x70
 8005216:	d01a      	beq.n	800524e <HAL_TIM_ConfigClockSource+0xa6>
 8005218:	2b70      	cmp	r3, #112	; 0x70
 800521a:	d87b      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b60      	cmp	r3, #96	; 0x60
 800521e:	d050      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d877      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d03c      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005228:	2b50      	cmp	r3, #80	; 0x50
 800522a:	d873      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d058      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d86f      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d064      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d86b      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d060      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x15a>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d867      	bhi.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d05c      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	2b10      	cmp	r3, #16
 800524a:	d05a      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	e062      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f000 fc73 	bl	8005b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	609a      	str	r2, [r3, #8]
      break;
 800527a:	e04f      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f000 fc5c 	bl	8005b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529e:	609a      	str	r2, [r3, #8]
      break;
 80052a0:	e03c      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fb1a 	bl	80058e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2150      	movs	r1, #80	; 0x50
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fc29 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 80052c0:	e02c      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fb76 	bl	80059c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2160      	movs	r1, #96	; 0x60
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fc19 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e01c      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fafa 	bl	80058e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fc09 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 8005300:	e00c      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f000 fc00 	bl	8005b12 <TIM_ITRx_SetConfig>
      break;
 8005312:	e003      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      break;
 8005318:	e000      	b.n	800531c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800531a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a40      	ldr	r2, [pc, #256]	; (8005474 <TIM_Base_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537e:	d00f      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3d      	ldr	r2, [pc, #244]	; (8005478 <TIM_Base_SetConfig+0x118>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3c      	ldr	r2, [pc, #240]	; (800547c <TIM_Base_SetConfig+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3b      	ldr	r2, [pc, #236]	; (8005480 <TIM_Base_SetConfig+0x120>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3a      	ldr	r2, [pc, #232]	; (8005484 <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d108      	bne.n	80053b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <TIM_Base_SetConfig+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d027      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <TIM_Base_SetConfig+0x118>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d023      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <TIM_Base_SetConfig+0x11c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <TIM_Base_SetConfig+0x120>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_Base_SetConfig+0x124>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d017      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a28      	ldr	r2, [pc, #160]	; (8005488 <TIM_Base_SetConfig+0x128>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <TIM_Base_SetConfig+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a26      	ldr	r2, [pc, #152]	; (8005490 <TIM_Base_SetConfig+0x130>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <TIM_Base_SetConfig+0x134>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <TIM_Base_SetConfig+0x138>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <TIM_Base_SetConfig+0x13c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0xf8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <TIM_Base_SetConfig+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	615a      	str	r2, [r3, #20]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800
 8005494:	40001800 	.word	0x40001800
 8005498:	40001c00 	.word	0x40001c00
 800549c:	40002000 	.word	0x40002000

080054a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 0302 	bic.w	r3, r3, #2
 80054e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a20      	ldr	r2, [pc, #128]	; (8005578 <TIM_OC1_SetConfig+0xd8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC1_SetConfig+0x64>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1f      	ldr	r2, [pc, #124]	; (800557c <TIM_OC1_SetConfig+0xdc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10c      	bne.n	800551e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0308 	bic.w	r3, r3, #8
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <TIM_OC1_SetConfig+0xd8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC1_SetConfig+0x8e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <TIM_OC1_SetConfig+0xdc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d111      	bne.n	8005552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40010000 	.word	0x40010000
 800557c:	40010400 	.word	0x40010400

08005580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0320 	bic.w	r3, r3, #32
 80055ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a22      	ldr	r2, [pc, #136]	; (8005664 <TIM_OC2_SetConfig+0xe4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC2_SetConfig+0x68>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC2_SetConfig+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10d      	bne.n	8005604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a17      	ldr	r2, [pc, #92]	; (8005664 <TIM_OC2_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC2_SetConfig+0x94>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC2_SetConfig+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d113      	bne.n	800563c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800561a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <TIM_OC3_SetConfig+0xe0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC3_SetConfig+0x66>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a20      	ldr	r2, [pc, #128]	; (8005750 <TIM_OC3_SetConfig+0xe4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC3_SetConfig+0xe0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC3_SetConfig+0x92>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <TIM_OC3_SetConfig+0xe4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d113      	bne.n	8005726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <TIM_OC4_SetConfig+0xa4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC4_SetConfig+0x68>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a11      	ldr	r2, [pc, #68]	; (80057fc <TIM_OC4_SetConfig+0xa8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d109      	bne.n	80057d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	019b      	lsls	r3, r3, #6
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a28      	ldr	r2, [pc, #160]	; (80058cc <TIM_TI1_SetConfig+0xcc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01b      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d017      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <TIM_TI1_SetConfig+0xd0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a24      	ldr	r2, [pc, #144]	; (80058d4 <TIM_TI1_SetConfig+0xd4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00f      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <TIM_TI1_SetConfig+0xd8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00b      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <TIM_TI1_SetConfig+0xdc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <TIM_TI1_SetConfig+0xe0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_TI1_SetConfig+0x66>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <TIM_TI1_SetConfig+0xe4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <TIM_TI1_SetConfig+0x6a>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <TIM_TI1_SetConfig+0x6c>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e003      	b.n	800588a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	b2db      	uxtb	r3, r3
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f023 030a 	bic.w	r3, r3, #10
 80058a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f003 030a 	and.w	r3, r3, #10
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40001800 	.word	0x40001800

080058e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 030a 	bic.w	r3, r3, #10
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 0210 	bic.w	r2, r3, #16
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	b29b      	uxth	r3, r3
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005998:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	031b      	lsls	r3, r3, #12
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	031b      	lsls	r3, r3, #12
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	031b      	lsls	r3, r3, #12
 8005af0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f043 0307 	orr.w	r3, r3, #7
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1a      	ldr	r2, [r3, #32]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	401a      	ands	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e05a      	b.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a21      	ldr	r2, [pc, #132]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c38:	d01d      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1a      	ldr	r2, [pc, #104]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10c      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40001800 	.word	0x40001800

08005ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e03f      	b.n	8005d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fb f9dc 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2224      	movs	r2, #36	; 0x24
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f829 	bl	8005d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695a      	ldr	r2, [r3, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0c0      	sub	sp, #256	; 0x100
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	68d9      	ldr	r1, [r3, #12]
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	ea40 0301 	orr.w	r3, r0, r1
 8005db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de8:	f021 010c 	bic.w	r1, r1, #12
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	ea40 0301 	orr.w	r3, r0, r1
 8005e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	; (800605c <UART_SetConfig+0x2cc>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d005      	beq.n	8005e30 <UART_SetConfig+0xa0>
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	; (8006060 <UART_SetConfig+0x2d0>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d104      	bne.n	8005e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd fa12 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8005e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e38:	e003      	b.n	8005e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fd f9f9 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	f040 810c 	bne.w	8006068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e72:	4621      	mov	r1, r4
 8005e74:	eb12 0801 	adds.w	r8, r2, r1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	eb43 0901 	adc.w	r9, r3, r1
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e92:	4690      	mov	r8, r2
 8005e94:	4699      	mov	r9, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	eb18 0303 	adds.w	r3, r8, r3
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb49 0303 	adc.w	r3, r9, r3
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	18db      	adds	r3, r3, r3
 8005ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	eb42 0303 	adc.w	r3, r2, r3
 8005eca:	657b      	str	r3, [r7, #84]	; 0x54
 8005ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ed4:	f7fa f9f4 	bl	80002c0 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b61      	ldr	r3, [pc, #388]	; (8006064 <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011c      	lsls	r4, r3, #4
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	1891      	adds	r1, r2, r2
 8005efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f00:	415b      	adcs	r3, r3
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f08:	4641      	mov	r1, r8
 8005f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb43 0b01 	adc.w	fp, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f28:	4692      	mov	sl, r2
 8005f2a:	469b      	mov	fp, r3
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f36:	464b      	mov	r3, r9
 8005f38:	eb4b 0303 	adc.w	r3, fp, r3
 8005f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f54:	460b      	mov	r3, r1
 8005f56:	18db      	adds	r3, r3, r3
 8005f58:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f6a:	f7fa f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	2264      	movs	r2, #100	; 0x64
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	1acb      	subs	r3, r1, r3
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f8a:	4b36      	ldr	r3, [pc, #216]	; (8006064 <UART_SetConfig+0x2d4>)
 8005f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f98:	441c      	add	r4, r3
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	1891      	adds	r1, r2, r2
 8005fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fb4:	415b      	adcs	r3, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	1851      	adds	r1, r2, r1
 8005fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	00cb      	lsls	r3, r1, #3
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fde:	4651      	mov	r1, sl
 8005fe0:	00ca      	lsls	r2, r1, #3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800600c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006026:	f7fa f94b 	bl	80002c0 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <UART_SetConfig+0x2d4>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	; 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3332      	adds	r3, #50	; 0x32
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <UART_SetConfig+0x2d4>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f003 0207 	and.w	r2, r3, #7
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4422      	add	r2, r4
 8006056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006058:	e105      	b.n	8006266 <UART_SetConfig+0x4d6>
 800605a:	bf00      	nop
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	1891      	adds	r1, r2, r2
 8006080:	6239      	str	r1, [r7, #32]
 8006082:	415b      	adcs	r3, r3
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800608a:	4641      	mov	r1, r8
 800608c:	1854      	adds	r4, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb43 0501 	adc.w	r5, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	00eb      	lsls	r3, r5, #3
 800609e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a2:	00e2      	lsls	r2, r4, #3
 80060a4:	4614      	mov	r4, r2
 80060a6:	461d      	mov	r5, r3
 80060a8:	4643      	mov	r3, r8
 80060aa:	18e3      	adds	r3, r4, r3
 80060ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060b0:	464b      	mov	r3, r9
 80060b2:	eb45 0303 	adc.w	r3, r5, r3
 80060b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060d6:	4629      	mov	r1, r5
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e0:	4621      	mov	r1, r4
 80060e2:	008a      	lsls	r2, r1, #2
 80060e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060e8:	f7fa f8ea 	bl	80002c0 <__aeabi_uldivmod>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4b60      	ldr	r3, [pc, #384]	; (8006274 <UART_SetConfig+0x4e4>)
 80060f2:	fba3 2302 	umull	r2, r3, r3, r2
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	011c      	lsls	r4, r3, #4
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	1891      	adds	r1, r2, r2
 8006112:	61b9      	str	r1, [r7, #24]
 8006114:	415b      	adcs	r3, r3
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611c:	4641      	mov	r1, r8
 800611e:	1851      	adds	r1, r2, r1
 8006120:	6139      	str	r1, [r7, #16]
 8006122:	4649      	mov	r1, r9
 8006124:	414b      	adcs	r3, r1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006134:	4659      	mov	r1, fp
 8006136:	00cb      	lsls	r3, r1, #3
 8006138:	4651      	mov	r1, sl
 800613a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613e:	4651      	mov	r1, sl
 8006140:	00ca      	lsls	r2, r1, #3
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	4603      	mov	r3, r0
 8006148:	4642      	mov	r2, r8
 800614a:	189b      	adds	r3, r3, r2
 800614c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	67bb      	str	r3, [r7, #120]	; 0x78
 8006166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006174:	4649      	mov	r1, r9
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	4641      	mov	r1, r8
 800617a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617e:	4641      	mov	r1, r8
 8006180:	008a      	lsls	r2, r1, #2
 8006182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006186:	f7fa f89b 	bl	80002c0 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <UART_SetConfig+0x4e4>)
 8006190:	fba3 1302 	umull	r1, r3, r3, r2
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	2164      	movs	r1, #100	; 0x64
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	3332      	adds	r3, #50	; 0x32
 80061a2:	4a34      	ldr	r2, [pc, #208]	; (8006274 <UART_SetConfig+0x4e4>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ae:	441c      	add	r4, r3
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b4:	2200      	movs	r2, #0
 80061b6:	673b      	str	r3, [r7, #112]	; 0x70
 80061b8:	677a      	str	r2, [r7, #116]	; 0x74
 80061ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061be:	4642      	mov	r2, r8
 80061c0:	464b      	mov	r3, r9
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	415b      	adcs	r3, r3
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ce:	4641      	mov	r1, r8
 80061d0:	1851      	adds	r1, r2, r1
 80061d2:	6039      	str	r1, [r7, #0]
 80061d4:	4649      	mov	r1, r9
 80061d6:	414b      	adcs	r3, r1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e6:	4659      	mov	r1, fp
 80061e8:	00cb      	lsls	r3, r1, #3
 80061ea:	4651      	mov	r1, sl
 80061ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f0:	4651      	mov	r1, sl
 80061f2:	00ca      	lsls	r2, r1, #3
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	4642      	mov	r2, r8
 80061fc:	189b      	adds	r3, r3, r2
 80061fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006200:	464b      	mov	r3, r9
 8006202:	460a      	mov	r2, r1
 8006204:	eb42 0303 	adc.w	r3, r2, r3
 8006208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	663b      	str	r3, [r7, #96]	; 0x60
 8006214:	667a      	str	r2, [r7, #100]	; 0x64
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006222:	4649      	mov	r1, r9
 8006224:	008b      	lsls	r3, r1, #2
 8006226:	4641      	mov	r1, r8
 8006228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622c:	4641      	mov	r1, r8
 800622e:	008a      	lsls	r2, r1, #2
 8006230:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006234:	f7fa f844 	bl	80002c0 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <UART_SetConfig+0x4e4>)
 800623e:	fba3 1302 	umull	r1, r3, r3, r2
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	2164      	movs	r1, #100	; 0x64
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	3332      	adds	r3, #50	; 0x32
 8006250:	4a08      	ldr	r2, [pc, #32]	; (8006274 <UART_SetConfig+0x4e4>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	f003 020f 	and.w	r2, r3, #15
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4422      	add	r2, r4
 8006264:	609a      	str	r2, [r3, #8]
}
 8006266:	bf00      	nop
 8006268:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	51eb851f 	.word	0x51eb851f

08006278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006278:	b084      	sub	sp, #16
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	f107 001c 	add.w	r0, r7, #28
 8006286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2b01      	cmp	r3, #1
 800628e:	d122      	bne.n	80062d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d105      	bne.n	80062ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fbe8 	bl	8007aa0 <USB_CoreReset>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
 80062d4:	e01a      	b.n	800630c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fbdc 	bl	8007aa0 <USB_CoreReset>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	639a      	str	r2, [r3, #56]	; 0x38
 80062fe:	e005      	b.n	800630c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10b      	bne.n	800632a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f043 0206 	orr.w	r2, r3, #6
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006336:	b004      	add	sp, #16
 8006338:	4770      	bx	lr
	...

0800633c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d165      	bne.n	800641c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a41      	ldr	r2, [pc, #260]	; (8006458 <USB_SetTurnaroundTime+0x11c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d906      	bls.n	8006366 <USB_SetTurnaroundTime+0x2a>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a40      	ldr	r2, [pc, #256]	; (800645c <USB_SetTurnaroundTime+0x120>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d202      	bcs.n	8006366 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006360:	230f      	movs	r3, #15
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e062      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a3c      	ldr	r2, [pc, #240]	; (800645c <USB_SetTurnaroundTime+0x120>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d306      	bcc.n	800637c <USB_SetTurnaroundTime+0x40>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <USB_SetTurnaroundTime+0x124>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d202      	bcs.n	800637c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006376:	230e      	movs	r3, #14
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e057      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a38      	ldr	r2, [pc, #224]	; (8006460 <USB_SetTurnaroundTime+0x124>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d306      	bcc.n	8006392 <USB_SetTurnaroundTime+0x56>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a37      	ldr	r2, [pc, #220]	; (8006464 <USB_SetTurnaroundTime+0x128>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d202      	bcs.n	8006392 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800638c:	230d      	movs	r3, #13
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e04c      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4a33      	ldr	r2, [pc, #204]	; (8006464 <USB_SetTurnaroundTime+0x128>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d306      	bcc.n	80063a8 <USB_SetTurnaroundTime+0x6c>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a32      	ldr	r2, [pc, #200]	; (8006468 <USB_SetTurnaroundTime+0x12c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d802      	bhi.n	80063a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063a2:	230c      	movs	r3, #12
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e041      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a2f      	ldr	r2, [pc, #188]	; (8006468 <USB_SetTurnaroundTime+0x12c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d906      	bls.n	80063be <USB_SetTurnaroundTime+0x82>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a2e      	ldr	r2, [pc, #184]	; (800646c <USB_SetTurnaroundTime+0x130>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d802      	bhi.n	80063be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80063b8:	230b      	movs	r3, #11
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e036      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	; (800646c <USB_SetTurnaroundTime+0x130>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d906      	bls.n	80063d4 <USB_SetTurnaroundTime+0x98>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <USB_SetTurnaroundTime+0x134>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d802      	bhi.n	80063d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063ce:	230a      	movs	r3, #10
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e02b      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a26      	ldr	r2, [pc, #152]	; (8006470 <USB_SetTurnaroundTime+0x134>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d906      	bls.n	80063ea <USB_SetTurnaroundTime+0xae>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a25      	ldr	r2, [pc, #148]	; (8006474 <USB_SetTurnaroundTime+0x138>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d202      	bcs.n	80063ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063e4:	2309      	movs	r3, #9
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e020      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4a21      	ldr	r2, [pc, #132]	; (8006474 <USB_SetTurnaroundTime+0x138>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d306      	bcc.n	8006400 <USB_SetTurnaroundTime+0xc4>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <USB_SetTurnaroundTime+0x13c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d802      	bhi.n	8006400 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063fa:	2308      	movs	r3, #8
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e015      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <USB_SetTurnaroundTime+0x13c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d906      	bls.n	8006416 <USB_SetTurnaroundTime+0xda>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4a1c      	ldr	r2, [pc, #112]	; (800647c <USB_SetTurnaroundTime+0x140>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d202      	bcs.n	8006416 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006410:	2307      	movs	r3, #7
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e00a      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006416:	2306      	movs	r3, #6
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	e007      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006422:	2309      	movs	r3, #9
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e001      	b.n	800642c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006428:	2309      	movs	r3, #9
 800642a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	029b      	lsls	r3, r3, #10
 8006440:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006444:	431a      	orrs	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	00d8acbf 	.word	0x00d8acbf
 800645c:	00e4e1c0 	.word	0x00e4e1c0
 8006460:	00f42400 	.word	0x00f42400
 8006464:	01067380 	.word	0x01067380
 8006468:	011a499f 	.word	0x011a499f
 800646c:	01312cff 	.word	0x01312cff
 8006470:	014ca43f 	.word	0x014ca43f
 8006474:	016e3600 	.word	0x016e3600
 8006478:	01a6ab1f 	.word	0x01a6ab1f
 800647c:	01e84800 	.word	0x01e84800

08006480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f043 0201 	orr.w	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d115      	bne.n	8006512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064f2:	2001      	movs	r0, #1
 80064f4:	f7fa fffe 	bl	80014f4 <HAL_Delay>
      ms++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fa3f 	bl	8007982 <USB_GetMode>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d01e      	beq.n	8006548 <USB_SetCurrentMode+0x84>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b31      	cmp	r3, #49	; 0x31
 800650e:	d9f0      	bls.n	80064f2 <USB_SetCurrentMode+0x2e>
 8006510:	e01a      	b.n	8006548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d115      	bne.n	8006544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006524:	2001      	movs	r0, #1
 8006526:	f7fa ffe5 	bl	80014f4 <HAL_Delay>
      ms++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fa26 	bl	8007982 <USB_GetMode>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <USB_SetCurrentMode+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b31      	cmp	r3, #49	; 0x31
 8006540:	d9f0      	bls.n	8006524 <USB_SetCurrentMode+0x60>
 8006542:	e001      	b.n	8006548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e005      	b.n	8006554 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b32      	cmp	r3, #50	; 0x32
 800654c:	d101      	bne.n	8006552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800655c:	b084      	sub	sp, #16
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	e009      	b.n	8006590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3340      	adds	r3, #64	; 0x40
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	2200      	movs	r2, #0
 8006588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3301      	adds	r3, #1
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b0e      	cmp	r3, #14
 8006594:	d9f2      	bls.n	800657c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11c      	bne.n	80065d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065aa:	f043 0302 	orr.w	r3, r3, #2
 80065ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e005      	b.n	80065e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	4619      	mov	r1, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fc:	461a      	mov	r2, r3
 80065fe:	680b      	ldr	r3, [r1, #0]
 8006600:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10c      	bne.n	8006622 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800660e:	2100      	movs	r1, #0
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f965 	bl	80068e0 <USB_SetDevSpeed>
 8006616:	e008      	b.n	800662a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006618:	2101      	movs	r1, #1
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f960 	bl	80068e0 <USB_SetDevSpeed>
 8006620:	e003      	b.n	800662a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006622:	2103      	movs	r1, #3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f95b 	bl	80068e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800662a:	2110      	movs	r1, #16
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8f3 	bl	8006818 <USB_FlushTxFifo>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f91f 	bl	8006880 <USB_FlushRxFifo>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	461a      	mov	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	e043      	b.n	80066fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800668c:	d118      	bne.n	80066c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e013      	b.n	80066d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	461a      	mov	r2, r3
 80066b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e008      	b.n	80066d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	461a      	mov	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	461a      	mov	r2, r3
 80066f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	3301      	adds	r3, #1
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	429a      	cmp	r2, r3
 8006704:	d3b7      	bcc.n	8006676 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e043      	b.n	8006794 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006722:	d118      	bne.n	8006756 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e013      	b.n	8006768 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	461a      	mov	r2, r3
 800674e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e008      	b.n	8006768 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	461a      	mov	r2, r3
 8006776:	2300      	movs	r3, #0
 8006778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	461a      	mov	r2, r3
 8006788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800678c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3301      	adds	r3, #1
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d3b7      	bcc.n	800670c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f043 0210 	orr.w	r2, r3, #16
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <USB_DevInit+0x2b8>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f043 0208 	orr.w	r2, r3, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d107      	bne.n	8006804 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067fc:	f043 0304 	orr.w	r3, r3, #4
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006810:	b004      	add	sp, #16
 8006812:	4770      	bx	lr
 8006814:	803c3800 	.word	0x803c3800

08006818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <USB_FlushTxFifo+0x64>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d901      	bls.n	8006838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e01b      	b.n	8006870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	daf2      	bge.n	8006826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	019b      	lsls	r3, r3, #6
 8006848:	f043 0220 	orr.w	r2, r3, #32
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <USB_FlushTxFifo+0x64>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e006      	b.n	8006870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b20      	cmp	r3, #32
 800686c:	d0f0      	beq.n	8006850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	00030d40 	.word	0x00030d40

08006880 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a11      	ldr	r2, [pc, #68]	; (80068dc <USB_FlushRxFifo+0x5c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e018      	b.n	80068d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	daf2      	bge.n	800688c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2210      	movs	r2, #16
 80068ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <USB_FlushRxFifo+0x5c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d901      	bls.n	80068c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d0f0      	beq.n	80068b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	00030d40 	.word	0x00030d40

080068e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006900:	4313      	orrs	r3, r2
 8006902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006912:	b480      	push	{r7}
 8006914:	b087      	sub	sp, #28
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0306 	and.w	r3, r3, #6
 800692a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006932:	2300      	movs	r3, #0
 8006934:	75fb      	strb	r3, [r7, #23]
 8006936:	e00a      	b.n	800694e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d002      	beq.n	8006944 <USB_GetDevSpeed+0x32>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b06      	cmp	r3, #6
 8006942:	d102      	bne.n	800694a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006944:	2302      	movs	r3, #2
 8006946:	75fb      	strb	r3, [r7, #23]
 8006948:	e001      	b.n	800694e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800694a:	230f      	movs	r3, #15
 800694c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d13a      	bne.n	80069ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	2101      	movs	r1, #1
 800698a:	fa01 f303 	lsl.w	r3, r1, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006996:	4313      	orrs	r3, r2
 8006998:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d155      	bne.n	8006a5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	791b      	ldrb	r3, [r3, #4]
 80069ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	059b      	lsls	r3, r3, #22
 80069d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069d4:	4313      	orrs	r3, r2
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e036      	b.n	8006a5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	2101      	movs	r1, #1
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d11a      	bne.n	8006a5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	791b      	ldrb	r3, [r3, #4]
 8006a40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a42:	430b      	orrs	r3, r1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d161      	bne.n	8006b4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a9e:	d11f      	bne.n	8006ae0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006abe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	2101      	movs	r1, #1
 8006af2:	fa01 f303 	lsl.w	r3, r1, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b00:	4013      	ands	r3, r2
 8006b02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	2101      	movs	r1, #1
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b24:	4013      	ands	r3, r2
 8006b26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	0159      	lsls	r1, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	440b      	add	r3, r1
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	4619      	mov	r1, r3
 8006b44:	4b35      	ldr	r3, [pc, #212]	; (8006c1c <USB_DeactivateEndpoint+0x1b0>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	600b      	str	r3, [r1, #0]
 8006b4a:	e060      	b.n	8006c0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b62:	d11f      	bne.n	8006ba4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	43db      	mvns	r3, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be8:	4013      	ands	r3, r2
 8006bea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0159      	lsls	r1, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	440b      	add	r3, r1
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	4619      	mov	r1, r3
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <USB_DeactivateEndpoint+0x1b4>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	ec337800 	.word	0xec337800
 8006c20:	eff37800 	.word	0xeff37800

08006c24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 815c 	bne.w	8006efe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d132      	bne.n	8006cb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	0cdb      	lsrs	r3, r3, #19
 8006cae:	04db      	lsls	r3, r3, #19
 8006cb0:	6113      	str	r3, [r2, #16]
 8006cb2:	e074      	b.n	8006d9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cce:	0cdb      	lsrs	r3, r3, #19
 8006cd0:	04db      	lsls	r3, r3, #19
 8006cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6999      	ldr	r1, [r3, #24]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	440b      	add	r3, r1
 8006d10:	1e59      	subs	r1, r3, #1
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d1c:	4b9d      	ldr	r3, [pc, #628]	; (8006f94 <USB_EPStartXfer+0x370>)
 8006d1e:	400b      	ands	r3, r1
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	0148      	lsls	r0, r1, #5
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	4401      	add	r1, r0
 8006d28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	0148      	lsls	r0, r1, #5
 8006d4a:	69f9      	ldr	r1, [r7, #28]
 8006d4c:	4401      	add	r1, r0
 8006d4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d52:	4313      	orrs	r3, r2
 8006d54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	791b      	ldrb	r3, [r3, #4]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11f      	bne.n	8006d9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d14b      	bne.n	8006e3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	461a      	mov	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d128      	bne.n	8006e1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d110      	bne.n	8006dfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	e00f      	b.n	8006e1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e133      	b.n	80070a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d015      	beq.n	8006e90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 811b 	beq.w	80070a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	2101      	movs	r1, #1
 8006e80:	fa01 f303 	lsl.w	r3, r1, r3
 8006e84:	69f9      	ldr	r1, [r7, #28]
 8006e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	634b      	str	r3, [r1, #52]	; 0x34
 8006e8e:	e109      	b.n	80070a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d110      	bne.n	8006ec2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	e00f      	b.n	8006ee2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6919      	ldr	r1, [r3, #16]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	b298      	uxth	r0, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fade 	bl	80074b8 <USB_WritePacket>
 8006efc:	e0d2      	b.n	80070a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f18:	0cdb      	lsrs	r3, r3, #19
 8006f1a:	04db      	lsls	r3, r3, #19
 8006f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d126      	bne.n	8006f98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f8e:	6113      	str	r3, [r2, #16]
 8006f90:	e03a      	b.n	8007008 <USB_EPStartXfer+0x3e4>
 8006f92:	bf00      	nop
 8006f94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	1e5a      	subs	r2, r3, #1
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	8afa      	ldrh	r2, [r7, #22]
 8006fb4:	fb03 f202 	mul.w	r2, r3, r2
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	8afb      	ldrh	r3, [r7, #22]
 8006fcc:	04d9      	lsls	r1, r3, #19
 8006fce:	4b38      	ldr	r3, [pc, #224]	; (80070b0 <USB_EPStartXfer+0x48c>)
 8006fd0:	400b      	ands	r3, r1
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	0148      	lsls	r0, r1, #5
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	4401      	add	r1, r0
 8006fda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff8:	69b9      	ldr	r1, [r7, #24]
 8006ffa:	0148      	lsls	r0, r1, #5
 8006ffc:	69f9      	ldr	r1, [r7, #28]
 8006ffe:	4401      	add	r1, r0
 8007000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007004:	4313      	orrs	r3, r2
 8007006:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10d      	bne.n	800702a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6919      	ldr	r1, [r3, #16]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007026:	460a      	mov	r2, r1
 8007028:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d128      	bne.n	8007084 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d110      	bne.n	8007064 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	440a      	add	r2, r1
 8007058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e00f      	b.n	8007084 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007082:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	1ff80000 	.word	0x1ff80000

080070b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	f040 80ce 	bne.w	8007272 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d132      	bne.n	8007144 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	440a      	add	r2, r1
 8007118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713c:	0cdb      	lsrs	r3, r3, #19
 800713e:	04db      	lsls	r3, r3, #19
 8007140:	6113      	str	r3, [r2, #16]
 8007142:	e04e      	b.n	80071e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715e:	0cdb      	lsrs	r3, r3, #19
 8007160:	04db      	lsls	r3, r3, #19
 8007162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007182:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007186:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d2:	6939      	ldr	r1, [r7, #16]
 80071d4:	0148      	lsls	r0, r1, #5
 80071d6:	6979      	ldr	r1, [r7, #20]
 80071d8:	4401      	add	r1, r0
 80071da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071de:	4313      	orrs	r3, r2
 80071e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11e      	bne.n	8007226 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	e097      	b.n	8007356 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007244:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8083 	beq.w	8007356 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	2101      	movs	r1, #1
 8007262:	fa01 f303 	lsl.w	r3, r1, r3
 8007266:	6979      	ldr	r1, [r7, #20]
 8007268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800726c:	4313      	orrs	r3, r2
 800726e:	634b      	str	r3, [r1, #52]	; 0x34
 8007270:	e071      	b.n	8007356 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728c:	0cdb      	lsrs	r3, r3, #19
 800728e:	04db      	lsls	r3, r3, #19
 8007290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007304:	6939      	ldr	r1, [r7, #16]
 8007306:	0148      	lsls	r0, r1, #5
 8007308:	6979      	ldr	r1, [r7, #20]
 800730a:	4401      	add	r1, r0
 800730c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007310:	4313      	orrs	r3, r2
 8007312:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10d      	bne.n	8007336 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6919      	ldr	r1, [r3, #16]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	460a      	mov	r2, r1
 8007334:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007354:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d14a      	bne.n	8007418 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800739a:	f040 8086 	bne.w	80074aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d902      	bls.n	80073fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
          break;
 80073fa:	e056      	b.n	80074aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007414:	d0e7      	beq.n	80073e6 <USB_EPStopXfer+0x82>
 8007416:	e048      	b.n	80074aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007430:	d13b      	bne.n	80074aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007454:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007478:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3301      	adds	r3, #1
 800747e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f242 7210 	movw	r2, #10000	; 0x2710
 8007486:	4293      	cmp	r3, r2
 8007488:	d902      	bls.n	8007490 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
          break;
 800748e:	e00c      	b.n	80074aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a8:	d0e7      	beq.n	800747a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	460b      	mov	r3, r1
 80074c8:	71fb      	strb	r3, [r7, #7]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d123      	bne.n	8007526 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074de:	88bb      	ldrh	r3, [r7, #4]
 80074e0:	3303      	adds	r3, #3
 80074e2:	089b      	lsrs	r3, r3, #2
 80074e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074e6:	2300      	movs	r3, #0
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	e018      	b.n	800751e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	031a      	lsls	r2, r3, #12
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f8:	461a      	mov	r2, r3
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	3301      	adds	r3, #1
 8007504:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	3301      	adds	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3301      	adds	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	3301      	adds	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	3301      	adds	r3, #1
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	429a      	cmp	r2, r3
 8007524:	d3e2      	bcc.n	80074ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3724      	adds	r7, #36	; 0x24
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007534:	b480      	push	{r7}
 8007536:	b08b      	sub	sp, #44	; 0x2c
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	089b      	lsrs	r3, r3, #2
 800754e:	b29b      	uxth	r3, r3
 8007550:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800755a:	2300      	movs	r3, #0
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	e014      	b.n	800758a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	601a      	str	r2, [r3, #0]
    pDest++;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	3301      	adds	r3, #1
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	3301      	adds	r3, #1
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	3301      	adds	r3, #1
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	3301      	adds	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	3301      	adds	r3, #1
 8007588:	623b      	str	r3, [r7, #32]
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	429a      	cmp	r2, r3
 8007590:	d3e6      	bcc.n	8007560 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007592:	8bfb      	ldrh	r3, [r7, #30]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01e      	beq.n	80075d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a2:	461a      	mov	r2, r3
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	701a      	strb	r2, [r3, #0]
      i++;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	3301      	adds	r3, #1
 80075c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	3301      	adds	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075ca:	8bfb      	ldrh	r3, [r7, #30]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075d0:	8bfb      	ldrh	r3, [r7, #30]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1ea      	bne.n	80075ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075d8:	4618      	mov	r0, r3
 80075da:	372c      	adds	r7, #44	; 0x2c
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d12c      	bne.n	800765a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	db12      	blt.n	8007638 <USB_EPSetStall+0x54>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007636:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	440a      	add	r2, r1
 800764e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e02b      	b.n	80076b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	db12      	blt.n	8007692 <USB_EPSetStall+0xae>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007690:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d128      	bne.n	800772e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	791b      	ldrb	r3, [r3, #4]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d003      	beq.n	800770c <USB_EPClearStall+0x4c>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	791b      	ldrb	r3, [r3, #4]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d138      	bne.n	800777e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e027      	b.n	800777e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800774c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d003      	beq.n	800775e <USB_EPClearStall+0x9e>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	791b      	ldrb	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d10f      	bne.n	800777e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800777c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077c0:	68f9      	ldr	r1, [r7, #12]
 80077c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007806:	f023 0302 	bic.w	r3, r3, #2
 800780a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007848:	f043 0302 	orr.w	r3, r3, #2
 800784c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4013      	ands	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	4013      	ands	r3, r2
 80078a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	0c1b      	lsrs	r3, r3, #16
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	4013      	ands	r3, r2
 80078d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	b29b      	uxth	r3, r3
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4013      	ands	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007918:	68bb      	ldr	r3, [r7, #8]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	01db      	lsls	r3, r3, #7
 8007958:	b2db      	uxtb	r3, r3
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4013      	ands	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007974:	68bb      	ldr	r3, [r7, #8]
}
 8007976:	4618      	mov	r0, r3
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0301 	and.w	r3, r3, #1
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079bc:	f023 0307 	bic.w	r3, r3, #7
 80079c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	460b      	mov	r3, r1
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	333c      	adds	r3, #60	; 0x3c
 80079fa:	3304      	adds	r3, #4
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <USB_EP0_OutStart+0xb8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d90a      	bls.n	8007a1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a18:	d101      	bne.n	8007a1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e037      	b.n	8007a8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	f043 0318 	orr.w	r3, r3, #24
 8007a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d10f      	bne.n	8007a8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	4f54300a 	.word	0x4f54300a

08007aa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a13      	ldr	r2, [pc, #76]	; (8007b04 <USB_CoreReset+0x64>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e01b      	b.n	8007af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	daf2      	bge.n	8007aac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f043 0201 	orr.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <USB_CoreReset+0x64>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d0f0      	beq.n	8007ad6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	00030d40 	.word	0x00030d40

08007b08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b18:	f002 fd34 	bl	800a584 <USBD_static_malloc>
 8007b1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32b0      	adds	r2, #176	; 0xb0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0d4      	b.n	8007ce2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f002 fd8e 	bl	800a660 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32b0      	adds	r2, #176	; 0xb0
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32b0      	adds	r2, #176	; 0xb0
 8007b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	7c1b      	ldrb	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d138      	bne.n	8007be2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b70:	4b5e      	ldr	r3, [pc, #376]	; (8007cec <USBD_CDC_Init+0x1e4>)
 8007b72:	7819      	ldrb	r1, [r3, #0]
 8007b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b78:	2202      	movs	r2, #2
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f002 fb91 	bl	800a2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b80:	4b5a      	ldr	r3, [pc, #360]	; (8007cec <USBD_CDC_Init+0x1e4>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f003 020f 	and.w	r2, r3, #15
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3324      	adds	r3, #36	; 0x24
 8007b96:	2201      	movs	r2, #1
 8007b98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b9a:	4b55      	ldr	r3, [pc, #340]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007b9c:	7819      	ldrb	r1, [r3, #0]
 8007b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f002 fb7c 	bl	800a2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007baa:	4b51      	ldr	r3, [pc, #324]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bc6:	4b4b      	ldr	r3, [pc, #300]	; (8007cf4 <USBD_CDC_Init+0x1ec>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 020f 	and.w	r2, r3, #15
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	3326      	adds	r3, #38	; 0x26
 8007bdc:	2210      	movs	r2, #16
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	e035      	b.n	8007c4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007be2:	4b42      	ldr	r3, [pc, #264]	; (8007cec <USBD_CDC_Init+0x1e4>)
 8007be4:	7819      	ldrb	r1, [r3, #0]
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	2202      	movs	r2, #2
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 fb59 	bl	800a2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bf0:	4b3e      	ldr	r3, [pc, #248]	; (8007cec <USBD_CDC_Init+0x1e4>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3324      	adds	r3, #36	; 0x24
 8007c06:	2201      	movs	r2, #1
 8007c08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c0a:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007c0c:	7819      	ldrb	r1, [r3, #0]
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	2202      	movs	r2, #2
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 fb45 	bl	800a2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c18:	4b35      	ldr	r3, [pc, #212]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c30:	2201      	movs	r2, #1
 8007c32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c34:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <USBD_CDC_Init+0x1ec>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3326      	adds	r3, #38	; 0x26
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c4e:	4b29      	ldr	r3, [pc, #164]	; (8007cf4 <USBD_CDC_Init+0x1ec>)
 8007c50:	7819      	ldrb	r1, [r3, #0]
 8007c52:	2308      	movs	r3, #8
 8007c54:	2203      	movs	r2, #3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f002 fb23 	bl	800a2a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c5c:	4b25      	ldr	r3, [pc, #148]	; (8007cf4 <USBD_CDC_Init+0x1ec>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 020f 	and.w	r2, r3, #15
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	3324      	adds	r3, #36	; 0x24
 8007c72:	2201      	movs	r2, #1
 8007c74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	33b0      	adds	r3, #176	; 0xb0
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e018      	b.n	8007ce2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7c1b      	ldrb	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007cba:	7819      	ldrb	r1, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f002 fbda 	bl	800a480 <USBD_LL_PrepareReceive>
 8007ccc:	e008      	b.n	8007ce0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <USBD_CDC_Init+0x1e8>)
 8007cd0:	7819      	ldrb	r1, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f002 fbd0 	bl	800a480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000093 	.word	0x20000093
 8007cf0:	20000094 	.word	0x20000094
 8007cf4:	20000095 	.word	0x20000095

08007cf8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d04:	4b3a      	ldr	r3, [pc, #232]	; (8007df0 <USBD_CDC_DeInit+0xf8>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f002 faef 	bl	800a2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d10:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <USBD_CDC_DeInit+0xf8>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	3324      	adds	r3, #36	; 0x24
 8007d26:	2200      	movs	r2, #0
 8007d28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d2a:	4b32      	ldr	r3, [pc, #200]	; (8007df4 <USBD_CDC_DeInit+0xfc>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f002 fadc 	bl	800a2ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d36:	4b2f      	ldr	r3, [pc, #188]	; (8007df4 <USBD_CDC_DeInit+0xfc>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 020f 	and.w	r2, r3, #15
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d4e:	2200      	movs	r2, #0
 8007d50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d52:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <USBD_CDC_DeInit+0x100>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f002 fac8 	bl	800a2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d5e:	4b26      	ldr	r3, [pc, #152]	; (8007df8 <USBD_CDC_DeInit+0x100>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 020f 	and.w	r2, r3, #15
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3324      	adds	r3, #36	; 0x24
 8007d74:	2200      	movs	r2, #0
 8007d76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d78:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <USBD_CDC_DeInit+0x100>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 020f 	and.w	r2, r3, #15
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3326      	adds	r3, #38	; 0x26
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32b0      	adds	r2, #176	; 0xb0
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01f      	beq.n	8007de4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	33b0      	adds	r3, #176	; 0xb0
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32b0      	adds	r2, #176	; 0xb0
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 fbea 	bl	800a5a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	32b0      	adds	r2, #176	; 0xb0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000093 	.word	0x20000093
 8007df4:	20000094 	.word	0x20000094
 8007df8:	20000095 	.word	0x20000095

08007dfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	32b0      	adds	r2, #176	; 0xb0
 8007e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e0bf      	b.n	8007fac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d050      	beq.n	8007eda <USBD_CDC_Setup+0xde>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	f040 80af 	bne.w	8007f9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d03a      	beq.n	8007ebc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b25b      	sxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da1b      	bge.n	8007e88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	33b0      	adds	r3, #176	; 0xb0
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	88d2      	ldrh	r2, [r2, #6]
 8007e6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b07      	cmp	r3, #7
 8007e74:	bf28      	it	cs
 8007e76:	2307      	movcs	r3, #7
 8007e78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	89fa      	ldrh	r2, [r7, #14]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fdb3 	bl	80099ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e86:	e090      	b.n	8007faa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	785a      	ldrb	r2, [r3, #1]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88db      	ldrh	r3, [r3, #6]
 8007e96:	2b3f      	cmp	r3, #63	; 0x3f
 8007e98:	d803      	bhi.n	8007ea2 <USBD_CDC_Setup+0xa6>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88db      	ldrh	r3, [r3, #6]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	e000      	b.n	8007ea4 <USBD_CDC_Setup+0xa8>
 8007ea2:	2240      	movs	r2, #64	; 0x40
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007eaa:	6939      	ldr	r1, [r7, #16]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fdc5 	bl	8009a44 <USBD_CtlPrepareRx>
      break;
 8007eba:	e076      	b.n	8007faa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	33b0      	adds	r3, #176	; 0xb0
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	7850      	ldrb	r0, [r2, #1]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	4798      	blx	r3
      break;
 8007ed8:	e067      	b.n	8007faa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	2b0b      	cmp	r3, #11
 8007ee0:	d851      	bhi.n	8007f86 <USBD_CDC_Setup+0x18a>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_CDC_Setup+0xec>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f19 	.word	0x08007f19
 8007eec:	08007f95 	.word	0x08007f95
 8007ef0:	08007f87 	.word	0x08007f87
 8007ef4:	08007f87 	.word	0x08007f87
 8007ef8:	08007f87 	.word	0x08007f87
 8007efc:	08007f87 	.word	0x08007f87
 8007f00:	08007f87 	.word	0x08007f87
 8007f04:	08007f87 	.word	0x08007f87
 8007f08:	08007f87 	.word	0x08007f87
 8007f0c:	08007f87 	.word	0x08007f87
 8007f10:	08007f43 	.word	0x08007f43
 8007f14:	08007f6d 	.word	0x08007f6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d107      	bne.n	8007f34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f24:	f107 030a 	add.w	r3, r7, #10
 8007f28:	2202      	movs	r2, #2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 fd5d 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f32:	e032      	b.n	8007f9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fce7 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f40:	e02b      	b.n	8007f9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d107      	bne.n	8007f5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f4e:	f107 030d 	add.w	r3, r7, #13
 8007f52:	2201      	movs	r2, #1
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fd48 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f5c:	e01d      	b.n	8007f9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 fcd2 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f66:	2303      	movs	r3, #3
 8007f68:	75fb      	strb	r3, [r7, #23]
          break;
 8007f6a:	e016      	b.n	8007f9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d00f      	beq.n	8007f98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fcc5 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f80:	2303      	movs	r3, #3
 8007f82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f84:	e008      	b.n	8007f98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fcbe 	bl	800990a <USBD_CtlError>
          ret = USBD_FAIL;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	75fb      	strb	r3, [r7, #23]
          break;
 8007f92:	e002      	b.n	8007f9a <USBD_CDC_Setup+0x19e>
          break;
 8007f94:	bf00      	nop
 8007f96:	e008      	b.n	8007faa <USBD_CDC_Setup+0x1ae>
          break;
 8007f98:	bf00      	nop
      }
      break;
 8007f9a:	e006      	b.n	8007faa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fcb3 	bl	800990a <USBD_CtlError>
      ret = USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	; 0xb0
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e065      	b.n	80080aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	32b0      	adds	r2, #176	; 0xb0
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	3318      	adds	r3, #24
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d02f      	beq.n	8008068 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3318      	adds	r3, #24
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f003 010f 	and.w	r1, r3, #15
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	460b      	mov	r3, r1
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	440b      	add	r3, r1
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4403      	add	r3, r0
 8008030:	3348      	adds	r3, #72	; 0x48
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	fbb2 f1f3 	udiv	r1, r2, r3
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800803e:	2b00      	cmp	r3, #0
 8008040:	d112      	bne.n	8008068 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	3318      	adds	r3, #24
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800805a:	78f9      	ldrb	r1, [r7, #3]
 800805c:	2300      	movs	r3, #0
 800805e:	2200      	movs	r2, #0
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f002 f9ec 	bl	800a43e <USBD_LL_Transmit>
 8008066:	e01f      	b.n	80080a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	33b0      	adds	r3, #176	; 0xb0
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d010      	beq.n	80080a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	33b0      	adds	r3, #176	; 0xb0
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080a4:	78fa      	ldrb	r2, [r7, #3]
 80080a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	32b0      	adds	r2, #176	; 0xb0
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32b0      	adds	r2, #176	; 0xb0
 80080d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e01a      	b.n	800811a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f002 f9ea 	bl	800a4c2 <USBD_LL_GetRxDataSize>
 80080ee:	4602      	mov	r2, r0
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	33b0      	adds	r3, #176	; 0xb0
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008114:	4611      	mov	r1, r2
 8008116:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	32b0      	adds	r2, #176	; 0xb0
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	e025      	b.n	8008190 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	33b0      	adds	r3, #176	; 0xb0
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01a      	beq.n	800818e <USBD_CDC_EP0_RxReady+0x6c>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800815e:	2bff      	cmp	r3, #255	; 0xff
 8008160:	d015      	beq.n	800818e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	33b0      	adds	r3, #176	; 0xb0
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800817a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008182:	b292      	uxth	r2, r2
 8008184:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081a0:	2182      	movs	r1, #130	; 0x82
 80081a2:	4818      	ldr	r0, [pc, #96]	; (8008204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081a4:	f000 fd4f 	bl	8008c46 <USBD_GetEpDesc>
 80081a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081aa:	2101      	movs	r1, #1
 80081ac:	4815      	ldr	r0, [pc, #84]	; (8008204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081ae:	f000 fd4a 	bl	8008c46 <USBD_GetEpDesc>
 80081b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081b4:	2181      	movs	r1, #129	; 0x81
 80081b6:	4813      	ldr	r0, [pc, #76]	; (8008204 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80081b8:	f000 fd45 	bl	8008c46 <USBD_GetEpDesc>
 80081bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2210      	movs	r2, #16
 80081c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d8:	711a      	strb	r2, [r3, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ec:	711a      	strb	r2, [r3, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2243      	movs	r2, #67	; 0x43
 80081f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000050 	.word	0x20000050

08008208 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008210:	2182      	movs	r1, #130	; 0x82
 8008212:	4818      	ldr	r0, [pc, #96]	; (8008274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008214:	f000 fd17 	bl	8008c46 <USBD_GetEpDesc>
 8008218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800821a:	2101      	movs	r1, #1
 800821c:	4815      	ldr	r0, [pc, #84]	; (8008274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800821e:	f000 fd12 	bl	8008c46 <USBD_GetEpDesc>
 8008222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008224:	2181      	movs	r1, #129	; 0x81
 8008226:	4813      	ldr	r0, [pc, #76]	; (8008274 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008228:	f000 fd0d 	bl	8008c46 <USBD_GetEpDesc>
 800822c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2210      	movs	r2, #16
 8008238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2200      	movs	r2, #0
 8008244:	711a      	strb	r2, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f042 0202 	orr.w	r2, r2, #2
 800824c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d006      	beq.n	8008262 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	711a      	strb	r2, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f042 0202 	orr.w	r2, r2, #2
 8008260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2243      	movs	r2, #67	; 0x43
 8008266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000050 	.word	0x20000050

08008278 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008280:	2182      	movs	r1, #130	; 0x82
 8008282:	4818      	ldr	r0, [pc, #96]	; (80082e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008284:	f000 fcdf 	bl	8008c46 <USBD_GetEpDesc>
 8008288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800828a:	2101      	movs	r1, #1
 800828c:	4815      	ldr	r0, [pc, #84]	; (80082e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800828e:	f000 fcda 	bl	8008c46 <USBD_GetEpDesc>
 8008292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008294:	2181      	movs	r1, #129	; 0x81
 8008296:	4813      	ldr	r0, [pc, #76]	; (80082e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008298:	f000 fcd5 	bl	8008c46 <USBD_GetEpDesc>
 800829c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2210      	movs	r2, #16
 80082a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b8:	711a      	strb	r2, [r3, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d006      	beq.n	80082d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	711a      	strb	r2, [r3, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2243      	movs	r2, #67	; 0x43
 80082d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000050 	.word	0x20000050

080082e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220a      	movs	r2, #10
 80082f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	2000000c 	.word	0x2000000c

08008308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	e009      	b.n	8008330 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	33b0      	adds	r3, #176	; 0xb0
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	32b0      	adds	r2, #176	; 0xb0
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800835e:	2303      	movs	r3, #3
 8008360:	e008      	b.n	8008374 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32b0      	adds	r2, #176	; 0xb0
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e004      	b.n	80083ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32b0      	adds	r2, #176	; 0xb0
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	32b0      	adds	r2, #176	; 0xb0
 80083e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e025      	b.n	800843a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11f      	bne.n	8008438 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <USBD_CDC_TransmitPacket+0x88>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	f003 020f 	and.w	r2, r3, #15
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4403      	add	r3, r0
 800841a:	3318      	adds	r3, #24
 800841c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <USBD_CDC_TransmitPacket+0x88>)
 8008420:	7819      	ldrb	r1, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f002 f805 	bl	800a43e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000093 	.word	0x20000093

08008448 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	32b0      	adds	r2, #176	; 0xb0
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	32b0      	adds	r2, #176	; 0xb0
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008472:	2303      	movs	r3, #3
 8008474:	e018      	b.n	80084a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7c1b      	ldrb	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <USBD_CDC_ReceivePacket+0x68>)
 8008480:	7819      	ldrb	r1, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fff7 	bl	800a480 <USBD_LL_PrepareReceive>
 8008492:	e008      	b.n	80084a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008494:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <USBD_CDC_ReceivePacket+0x68>)
 8008496:	7819      	ldrb	r1, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 ffed 	bl	800a480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000094 	.word	0x20000094

080084b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e01f      	b.n	800850c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 fe67 	bl	800a1d4 <USBD_LL_Init>
 8008506:	4603      	mov	r3, r0
 8008508:	75fb      	strb	r3, [r7, #23]

  return ret;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e025      	b.n	8008578 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32ae      	adds	r2, #174	; 0xae
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00f      	beq.n	8008568 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	32ae      	adds	r2, #174	; 0xae
 8008552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	f107 020e 	add.w	r2, r7, #14
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 fe6f 	bl	800a26c <USBD_LL_Start>
 800858e:	4603      	mov	r3, r0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d009      	beq.n	80085dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	4611      	mov	r1, r2
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	4611      	mov	r1, r2
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800860c:	2303      	movs	r3, #3
 800860e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f932 	bl	8009896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2b02      	cmp	r3, #2
 8008654:	d01a      	beq.n	800868c <USBD_LL_SetupStage+0x72>
 8008656:	2b02      	cmp	r3, #2
 8008658:	d822      	bhi.n	80086a0 <USBD_LL_SetupStage+0x86>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <USBD_LL_SetupStage+0x4a>
 800865e:	2b01      	cmp	r3, #1
 8008660:	d00a      	beq.n	8008678 <USBD_LL_SetupStage+0x5e>
 8008662:	e01d      	b.n	80086a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fb5f 	bl	8008d30 <USBD_StdDevReq>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e020      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fbc7 	bl	8008e14 <USBD_StdItfReq>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e016      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc29 	bl	8008eec <USBD_StdEPReq>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	e00c      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fe3c 	bl	800a32c <USBD_LL_StallEP>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
      break;
 80086b8:	bf00      	nop
  }

  return ret;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	460b      	mov	r3, r1
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d16e      	bne.n	80087ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f040 8098 	bne.w	8008820 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d913      	bls.n	8008724 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4293      	cmp	r3, r2
 8008714:	bf28      	it	cs
 8008716:	4613      	movcs	r3, r2
 8008718:	461a      	mov	r2, r3
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f001 f9ae 	bl	8009a7e <USBD_CtlContinueRx>
 8008722:	e07d      	b.n	8008820 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2b02      	cmp	r3, #2
 8008730:	d014      	beq.n	800875c <USBD_LL_DataOutStage+0x98>
 8008732:	2b02      	cmp	r3, #2
 8008734:	d81d      	bhi.n	8008772 <USBD_LL_DataOutStage+0xae>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <USBD_LL_DataOutStage+0x7c>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d003      	beq.n	8008746 <USBD_LL_DataOutStage+0x82>
 800873e:	e018      	b.n	8008772 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	75bb      	strb	r3, [r7, #22]
            break;
 8008744:	e018      	b.n	8008778 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800874c:	b2db      	uxtb	r3, r3
 800874e:	4619      	mov	r1, r3
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fa5e 	bl	8008c12 <USBD_CoreFindIF>
 8008756:	4603      	mov	r3, r0
 8008758:	75bb      	strb	r3, [r7, #22]
            break;
 800875a:	e00d      	b.n	8008778 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4619      	mov	r1, r3
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fa60 	bl	8008c2c <USBD_CoreFindEP>
 800876c:	4603      	mov	r3, r0
 800876e:	75bb      	strb	r3, [r7, #22]
            break;
 8008770:	e002      	b.n	8008778 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	75bb      	strb	r3, [r7, #22]
            break;
 8008776:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008778:	7dbb      	ldrb	r3, [r7, #22]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d119      	bne.n	80087b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b03      	cmp	r3, #3
 8008788:	d113      	bne.n	80087b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800878a:	7dba      	ldrb	r2, [r7, #22]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	32ae      	adds	r2, #174	; 0xae
 8008790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800879a:	7dba      	ldrb	r2, [r7, #22]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087a2:	7dba      	ldrb	r2, [r7, #22]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	32ae      	adds	r2, #174	; 0xae
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f001 f974 	bl	8009aa0 <USBD_CtlSendStatus>
 80087b8:	e032      	b.n	8008820 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	4619      	mov	r1, r3
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fa31 	bl	8008c2c <USBD_CoreFindEP>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	2bff      	cmp	r3, #255	; 0xff
 80087d2:	d025      	beq.n	8008820 <USBD_LL_DataOutStage+0x15c>
 80087d4:	7dbb      	ldrb	r3, [r7, #22]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d122      	bne.n	8008820 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d117      	bne.n	8008816 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087e6:	7dba      	ldrb	r2, [r7, #22]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	32ae      	adds	r2, #174	; 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00f      	beq.n	8008816 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087f6:	7dba      	ldrb	r2, [r7, #22]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087fe:	7dba      	ldrb	r2, [r7, #22]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	32ae      	adds	r2, #174	; 0xae
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	7afa      	ldrb	r2, [r7, #11]
 800880c:	4611      	mov	r1, r2
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	4798      	blx	r3
 8008812:	4603      	mov	r3, r0
 8008814:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	e000      	b.n	8008822 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	460b      	mov	r3, r1
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d16f      	bne.n	800891e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3314      	adds	r3, #20
 8008842:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800884a:	2b02      	cmp	r3, #2
 800884c:	d15a      	bne.n	8008904 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	429a      	cmp	r2, r3
 8008858:	d914      	bls.n	8008884 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	1ad2      	subs	r2, r2, r3
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	461a      	mov	r2, r3
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f001 f8d6 	bl	8009a22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f001 fdff 	bl	800a480 <USBD_LL_PrepareReceive>
 8008882:	e03f      	b.n	8008904 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	d11c      	bne.n	80088ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008898:	429a      	cmp	r2, r3
 800889a:	d316      	bcc.n	80088ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d20f      	bcs.n	80088ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f001 f8b7 	bl	8009a22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088bc:	2300      	movs	r3, #0
 80088be:	2200      	movs	r2, #0
 80088c0:	2100      	movs	r1, #0
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f001 fddc 	bl	800a480 <USBD_LL_PrepareReceive>
 80088c8:	e01c      	b.n	8008904 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d10f      	bne.n	80088f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f001 fd17 	bl	800a32c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f001 f8e1 	bl	8009ac6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d03a      	beq.n	8008984 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff fe42 	bl	8008598 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800891c:	e032      	b.n	8008984 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800891e:	7afb      	ldrb	r3, [r7, #11]
 8008920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008924:	b2db      	uxtb	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f97f 	bl	8008c2c <USBD_CoreFindEP>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	2bff      	cmp	r3, #255	; 0xff
 8008936:	d025      	beq.n	8008984 <USBD_LL_DataInStage+0x15a>
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d122      	bne.n	8008984 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b03      	cmp	r3, #3
 8008948:	d11c      	bne.n	8008984 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800894a:	7dfa      	ldrb	r2, [r7, #23]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	32ae      	adds	r2, #174	; 0xae
 8008950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d014      	beq.n	8008984 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800895a:	7dfa      	ldrb	r2, [r7, #23]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008962:	7dfa      	ldrb	r2, [r7, #23]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	32ae      	adds	r2, #174	; 0xae
 8008968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	7afa      	ldrb	r2, [r7, #11]
 8008970:	4611      	mov	r1, r2
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	4798      	blx	r3
 8008976:	4603      	mov	r3, r0
 8008978:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800897a:	7dbb      	ldrb	r3, [r7, #22]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008980:	7dbb      	ldrb	r3, [r7, #22]
 8008982:	e000      	b.n	8008986 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d014      	beq.n	80089f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00e      	beq.n	80089f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6852      	ldr	r2, [r2, #4]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	4611      	mov	r1, r2
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fc51 	bl	800a2a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2240      	movs	r2, #64	; 0x40
 8008a0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	2200      	movs	r2, #0
 8008a14:	2180      	movs	r1, #128	; 0x80
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fc43 	bl	800a2a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	621a      	str	r2, [r3, #32]

  return ret;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2204      	movs	r2, #4
 8008a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d106      	bne.n	8008aa0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d110      	bne.n	8008ae4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	32ae      	adds	r2, #174	; 0xae
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e01c      	b.n	8008b4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d115      	bne.n	8008b48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	32ae      	adds	r2, #174	; 0xae
 8008b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32ae      	adds	r2, #174	; 0xae
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	4611      	mov	r1, r2
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	32ae      	adds	r2, #174	; 0xae
 8008b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e01c      	b.n	8008bae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d115      	bne.n	8008bac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32ae      	adds	r2, #174	; 0xae
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32ae      	adds	r2, #174	; 0xae
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00e      	beq.n	8008c08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6852      	ldr	r2, [r2, #4]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d920      	bls.n	8008cb0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c76:	e013      	b.n	8008ca0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c78:	f107 030a 	add.w	r3, r7, #10
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f000 f81b 	bl	8008cba <USBD_GetNextDesc>
 8008c84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d108      	bne.n	8008ca0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	789b      	ldrb	r3, [r3, #2]
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d008      	beq.n	8008cae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	885b      	ldrh	r3, [r3, #2]
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	897b      	ldrh	r3, [r7, #10]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d8e5      	bhi.n	8008c78 <USBD_GetEpDesc+0x32>
 8008cac:	e000      	b.n	8008cb0 <USBD_GetEpDesc+0x6a>
          break;
 8008cae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008cb0:	693b      	ldr	r3, [r7, #16]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	881a      	ldrh	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d12:	8a3b      	ldrh	r3, [r7, #16]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	b21a      	sxth	r2, r3
 8008d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d22:	89fb      	ldrh	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d005      	beq.n	8008d56 <USBD_StdDevReq+0x26>
 8008d4a:	2b40      	cmp	r3, #64	; 0x40
 8008d4c:	d857      	bhi.n	8008dfe <USBD_StdDevReq+0xce>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00f      	beq.n	8008d72 <USBD_StdDevReq+0x42>
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d153      	bne.n	8008dfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	32ae      	adds	r2, #174	; 0xae
 8008d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d70:	e04a      	b.n	8008e08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d83b      	bhi.n	8008df2 <USBD_StdDevReq+0xc2>
 8008d7a:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <USBD_StdDevReq+0x50>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008de9 	.word	0x08008de9
 8008d88:	08008df3 	.word	0x08008df3
 8008d8c:	08008ddf 	.word	0x08008ddf
 8008d90:	08008df3 	.word	0x08008df3
 8008d94:	08008db3 	.word	0x08008db3
 8008d98:	08008da9 	.word	0x08008da9
 8008d9c:	08008df3 	.word	0x08008df3
 8008da0:	08008dcb 	.word	0x08008dcb
 8008da4:	08008dbd 	.word	0x08008dbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa3c 	bl	8009228 <USBD_GetDescriptor>
          break;
 8008db0:	e024      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fbcb 	bl	8009550 <USBD_SetAddress>
          break;
 8008dba:	e01f      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc0a 	bl	80095d8 <USBD_SetConfig>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8008dc8:	e018      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fcad 	bl	800972c <USBD_GetConfig>
          break;
 8008dd2:	e013      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fcde 	bl	8009798 <USBD_GetStatus>
          break;
 8008ddc:	e00e      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fd0d 	bl	8009800 <USBD_SetFeature>
          break;
 8008de6:	e009      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fd31 	bl	8009852 <USBD_ClrFeature>
          break;
 8008df0:	e004      	b.n	8008dfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fd88 	bl	800990a <USBD_CtlError>
          break;
 8008dfa:	bf00      	nop
      }
      break;
 8008dfc:	e004      	b.n	8008e08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fd82 	bl	800990a <USBD_CtlError>
      break;
 8008e06:	bf00      	nop
  }

  return ret;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop

08008e14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e2a:	2b40      	cmp	r3, #64	; 0x40
 8008e2c:	d005      	beq.n	8008e3a <USBD_StdItfReq+0x26>
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d852      	bhi.n	8008ed8 <USBD_StdItfReq+0xc4>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <USBD_StdItfReq+0x26>
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d14e      	bne.n	8008ed8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d840      	bhi.n	8008eca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	889b      	ldrh	r3, [r3, #4]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d836      	bhi.n	8008ec0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	889b      	ldrh	r3, [r3, #4]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fed9 	bl	8008c12 <USBD_CoreFindIF>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2bff      	cmp	r3, #255	; 0xff
 8008e68:	d01d      	beq.n	8008ea6 <USBD_StdItfReq+0x92>
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11a      	bne.n	8008ea6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e70:	7bba      	ldrb	r2, [r7, #14]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	32ae      	adds	r2, #174	; 0xae
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00f      	beq.n	8008ea0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e80:	7bba      	ldrb	r2, [r7, #14]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e88:	7bba      	ldrb	r2, [r7, #14]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	32ae      	adds	r2, #174	; 0xae
 8008e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e9e:	e004      	b.n	8008eaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ea4:	e001      	b.n	8008eaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	88db      	ldrh	r3, [r3, #6]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d110      	bne.n	8008ed4 <USBD_StdItfReq+0xc0>
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10d      	bne.n	8008ed4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fdf1 	bl	8009aa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ebe:	e009      	b.n	8008ed4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fd21 	bl	800990a <USBD_CtlError>
          break;
 8008ec8:	e004      	b.n	8008ed4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fd1c 	bl	800990a <USBD_CtlError>
          break;
 8008ed2:	e000      	b.n	8008ed6 <USBD_StdItfReq+0xc2>
          break;
 8008ed4:	bf00      	nop
      }
      break;
 8008ed6:	e004      	b.n	8008ee2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fd15 	bl	800990a <USBD_CtlError>
      break;
 8008ee0:	bf00      	nop
  }

  return ret;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	889b      	ldrh	r3, [r3, #4]
 8008efe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d007      	beq.n	8008f1c <USBD_StdEPReq+0x30>
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	f200 817f 	bhi.w	8009210 <USBD_StdEPReq+0x324>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d02a      	beq.n	8008f6c <USBD_StdEPReq+0x80>
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	f040 817a 	bne.w	8009210 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fe83 	bl	8008c2c <USBD_CoreFindEP>
 8008f26:	4603      	mov	r3, r0
 8008f28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f2a:	7b7b      	ldrb	r3, [r7, #13]
 8008f2c:	2bff      	cmp	r3, #255	; 0xff
 8008f2e:	f000 8174 	beq.w	800921a <USBD_StdEPReq+0x32e>
 8008f32:	7b7b      	ldrb	r3, [r7, #13]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f040 8170 	bne.w	800921a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f3a:	7b7a      	ldrb	r2, [r7, #13]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f42:	7b7a      	ldrb	r2, [r7, #13]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32ae      	adds	r2, #174	; 0xae
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 8163 	beq.w	800921a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f54:	7b7a      	ldrb	r2, [r7, #13]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	32ae      	adds	r2, #174	; 0xae
 8008f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f6a:	e156      	b.n	800921a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d008      	beq.n	8008f86 <USBD_StdEPReq+0x9a>
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	f300 8145 	bgt.w	8009204 <USBD_StdEPReq+0x318>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 809b 	beq.w	80090b6 <USBD_StdEPReq+0x1ca>
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d03c      	beq.n	8008ffe <USBD_StdEPReq+0x112>
 8008f84:	e13e      	b.n	8009204 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d002      	beq.n	8008f98 <USBD_StdEPReq+0xac>
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d016      	beq.n	8008fc4 <USBD_StdEPReq+0xd8>
 8008f96:	e02c      	b.n	8008ff2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <USBD_StdEPReq+0xce>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	; 0x80
 8008fa2:	d00a      	beq.n	8008fba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f9bf 	bl	800a32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f9bb 	bl	800a32c <USBD_LL_StallEP>
 8008fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb8:	e020      	b.n	8008ffc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fca4 	bl	800990a <USBD_CtlError>
              break;
 8008fc2:	e01b      	b.n	8008ffc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	885b      	ldrh	r3, [r3, #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10e      	bne.n	8008fea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <USBD_StdEPReq+0xfe>
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d008      	beq.n	8008fea <USBD_StdEPReq+0xfe>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	88db      	ldrh	r3, [r3, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f9a1 	bl	800a32c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fd58 	bl	8009aa0 <USBD_CtlSendStatus>

              break;
 8008ff0:	e004      	b.n	8008ffc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc88 	bl	800990a <USBD_CtlError>
              break;
 8008ffa:	bf00      	nop
          }
          break;
 8008ffc:	e107      	b.n	800920e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d002      	beq.n	8009010 <USBD_StdEPReq+0x124>
 800900a:	2b03      	cmp	r3, #3
 800900c:	d016      	beq.n	800903c <USBD_StdEPReq+0x150>
 800900e:	e04b      	b.n	80090a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <USBD_StdEPReq+0x146>
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d00a      	beq.n	8009032 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f983 	bl	800a32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009026:	2180      	movs	r1, #128	; 0x80
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 f97f 	bl	800a32c <USBD_LL_StallEP>
 800902e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009030:	e040      	b.n	80090b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fc68 	bl	800990a <USBD_CtlError>
              break;
 800903a:	e03b      	b.n	80090b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	885b      	ldrh	r3, [r3, #2]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d136      	bne.n	80090b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 f989 	bl	800a36a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fd21 	bl	8009aa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fde2 	bl	8008c2c <USBD_CoreFindEP>
 8009068:	4603      	mov	r3, r0
 800906a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800906c:	7b7b      	ldrb	r3, [r7, #13]
 800906e:	2bff      	cmp	r3, #255	; 0xff
 8009070:	d01f      	beq.n	80090b2 <USBD_StdEPReq+0x1c6>
 8009072:	7b7b      	ldrb	r3, [r7, #13]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11c      	bne.n	80090b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009078:	7b7a      	ldrb	r2, [r7, #13]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009080:	7b7a      	ldrb	r2, [r7, #13]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	32ae      	adds	r2, #174	; 0xae
 8009086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d010      	beq.n	80090b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009090:	7b7a      	ldrb	r2, [r7, #13]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	32ae      	adds	r2, #174	; 0xae
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090a6:	e004      	b.n	80090b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fc2d 	bl	800990a <USBD_CtlError>
              break;
 80090b0:	e000      	b.n	80090b4 <USBD_StdEPReq+0x1c8>
              break;
 80090b2:	bf00      	nop
          }
          break;
 80090b4:	e0ab      	b.n	800920e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d002      	beq.n	80090c8 <USBD_StdEPReq+0x1dc>
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d032      	beq.n	800912c <USBD_StdEPReq+0x240>
 80090c6:	e097      	b.n	80091f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <USBD_StdEPReq+0x1f2>
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d004      	beq.n	80090de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fc17 	bl	800990a <USBD_CtlError>
                break;
 80090dc:	e091      	b.n	8009202 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da0b      	bge.n	80090fe <USBD_StdEPReq+0x212>
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	3310      	adds	r3, #16
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	3304      	adds	r3, #4
 80090fc:	e00b      	b.n	8009116 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	3304      	adds	r3, #4
 8009116:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2202      	movs	r2, #2
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fc61 	bl	80099ec <USBD_CtlSendData>
              break;
 800912a:	e06a      	b.n	8009202 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800912c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da11      	bge.n	8009158 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	3324      	adds	r3, #36	; 0x24
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d117      	bne.n	800917e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fbda 	bl	800990a <USBD_CtlError>
                  break;
 8009156:	e054      	b.n	8009202 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	f003 020f 	and.w	r2, r3, #15
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d104      	bne.n	800917e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbc7 	bl	800990a <USBD_CtlError>
                  break;
 800917c:	e041      	b.n	8009202 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0b      	bge.n	800919e <USBD_StdEPReq+0x2b2>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	3310      	adds	r3, #16
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	e00b      	b.n	80091b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	3304      	adds	r3, #4
 80091b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <USBD_StdEPReq+0x2d8>
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d103      	bne.n	80091cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	e00e      	b.n	80091ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f8e9 	bl	800a3a8 <USBD_LL_IsStallEP>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2201      	movs	r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	e002      	b.n	80091ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2202      	movs	r2, #2
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbfb 	bl	80099ec <USBD_CtlSendData>
              break;
 80091f6:	e004      	b.n	8009202 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fb85 	bl	800990a <USBD_CtlError>
              break;
 8009200:	bf00      	nop
          }
          break;
 8009202:	e004      	b.n	800920e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fb7f 	bl	800990a <USBD_CtlError>
          break;
 800920c:	bf00      	nop
      }
      break;
 800920e:	e005      	b.n	800921c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fb79 	bl	800990a <USBD_CtlError>
      break;
 8009218:	e000      	b.n	800921c <USBD_StdEPReq+0x330>
      break;
 800921a:	bf00      	nop
  }

  return ret;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	0a1b      	lsrs	r3, r3, #8
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	2b0e      	cmp	r3, #14
 800924a:	f200 8152 	bhi.w	80094f2 <USBD_GetDescriptor+0x2ca>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <USBD_GetDescriptor+0x2c>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	080092c5 	.word	0x080092c5
 8009258:	080092dd 	.word	0x080092dd
 800925c:	0800931d 	.word	0x0800931d
 8009260:	080094f3 	.word	0x080094f3
 8009264:	080094f3 	.word	0x080094f3
 8009268:	08009493 	.word	0x08009493
 800926c:	080094bf 	.word	0x080094bf
 8009270:	080094f3 	.word	0x080094f3
 8009274:	080094f3 	.word	0x080094f3
 8009278:	080094f3 	.word	0x080094f3
 800927c:	080094f3 	.word	0x080094f3
 8009280:	080094f3 	.word	0x080094f3
 8009284:	080094f3 	.word	0x080094f3
 8009288:	080094f3 	.word	0x080094f3
 800928c:	08009291 	.word	0x08009291
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	7c12      	ldrb	r2, [r2, #16]
 80092a8:	f107 0108 	add.w	r1, r7, #8
 80092ac:	4610      	mov	r0, r2
 80092ae:	4798      	blx	r3
 80092b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092b2:	e126      	b.n	8009502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fb27 	bl	800990a <USBD_CtlError>
        err++;
 80092bc:	7afb      	ldrb	r3, [r7, #11]
 80092be:	3301      	adds	r3, #1
 80092c0:	72fb      	strb	r3, [r7, #11]
      break;
 80092c2:	e11e      	b.n	8009502 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
      break;
 80092da:	e112      	b.n	8009502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092fe:	e100      	b.n	8009502 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f107 0208 	add.w	r2, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
      break;
 800931a:	e0f2      	b.n	8009502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b05      	cmp	r3, #5
 8009324:	f200 80ac 	bhi.w	8009480 <USBD_GetDescriptor+0x258>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBD_GetDescriptor+0x108>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009349 	.word	0x08009349
 8009334:	0800937d 	.word	0x0800937d
 8009338:	080093b1 	.word	0x080093b1
 800933c:	080093e5 	.word	0x080093e5
 8009340:	08009419 	.word	0x08009419
 8009344:	0800944d 	.word	0x0800944d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936a:	e091      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 facb 	bl	800990a <USBD_CtlError>
            err++;
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	3301      	adds	r3, #1
 8009378:	72fb      	strb	r3, [r7, #11]
          break;
 800937a:	e089      	b.n	8009490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939e:	e077      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fab1 	bl	800990a <USBD_CtlError>
            err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
          break;
 80093ae:	e06f      	b.n	8009490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 0108 	add.w	r1, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d2:	e05d      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa97 	bl	800990a <USBD_CtlError>
            err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
          break;
 80093e2:	e055      	b.n	8009490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e043      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa7d 	bl	800990a <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e03b      	b.n	8009490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e029      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa63 	bl	800990a <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e021      	b.n	8009490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	f107 0108 	add.w	r1, r7, #8
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946e:	e00f      	b.n	8009490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa49 	bl	800990a <USBD_CtlError>
            err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
          break;
 800947e:	e007      	b.n	8009490 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa41 	bl	800990a <USBD_CtlError>
          err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800948e:	bf00      	nop
      }
      break;
 8009490:	e037      	b.n	8009502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7c1b      	ldrb	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f107 0208 	add.w	r2, r7, #8
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
 80094aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ac:	e029      	b.n	8009502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa2a 	bl	800990a <USBD_CtlError>
        err++;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	3301      	adds	r3, #1
 80094ba:	72fb      	strb	r3, [r7, #11]
      break;
 80094bc:	e021      	b.n	8009502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7c1b      	ldrb	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	4610      	mov	r0, r2
 80094d4:	4798      	blx	r3
 80094d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	2207      	movs	r2, #7
 80094de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094e0:	e00f      	b.n	8009502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa10 	bl	800990a <USBD_CtlError>
        err++;
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3301      	adds	r3, #1
 80094ee:	72fb      	strb	r3, [r7, #11]
      break;
 80094f0:	e007      	b.n	8009502 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa08 	bl	800990a <USBD_CtlError>
      err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	bf00      	nop
  }

  if (err != 0U)
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11e      	bne.n	8009546 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	88db      	ldrh	r3, [r3, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d016      	beq.n	800953e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00e      	beq.n	8009534 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88da      	ldrh	r2, [r3, #6]
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	4293      	cmp	r3, r2
 800951e:	bf28      	it	cs
 8009520:	4613      	movcs	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa5d 	bl	80099ec <USBD_CtlSendData>
 8009532:	e009      	b.n	8009548 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f9e7 	bl	800990a <USBD_CtlError>
 800953c:	e004      	b.n	8009548 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 faae 	bl	8009aa0 <USBD_CtlSendStatus>
 8009544:	e000      	b.n	8009548 <USBD_GetDescriptor+0x320>
    return;
 8009546:	bf00      	nop
  }
}
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop

08009550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d131      	bne.n	80095c6 <USBD_SetAddress+0x76>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d12d      	bne.n	80095c6 <USBD_SetAddress+0x76>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	2b7f      	cmp	r3, #127	; 0x7f
 8009570:	d829      	bhi.n	80095c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d104      	bne.n	8009594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9bc 	bl	800990a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	e01d      	b.n	80095d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7bfa      	ldrb	r2, [r7, #15]
 8009598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 ff2d 	bl	800a400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa7a 	bl	8009aa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ba:	e009      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c4:	e004      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f99e 	bl	800990a <USBD_CtlError>
  }
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <USBD_SetConfig+0x150>)
 80095ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095f0:	4b4d      	ldr	r3, [pc, #308]	; (8009728 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d905      	bls.n	8009604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f985 	bl	800990a <USBD_CtlError>
    return USBD_FAIL;
 8009600:	2303      	movs	r3, #3
 8009602:	e08c      	b.n	800971e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d002      	beq.n	8009616 <USBD_SetConfig+0x3e>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d029      	beq.n	8009668 <USBD_SetConfig+0x90>
 8009614:	e075      	b.n	8009702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009616:	4b44      	ldr	r3, [pc, #272]	; (8009728 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d020      	beq.n	8009660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800961e:	4b42      	ldr	r3, [pc, #264]	; (8009728 <USBD_SetConfig+0x150>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009628:	4b3f      	ldr	r3, [pc, #252]	; (8009728 <USBD_SetConfig+0x150>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fe ffbd 	bl	80085ae <USBD_SetClassConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f962 	bl	800990a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800964e:	e065      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa25 	bl	8009aa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800965e:	e05d      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fa1d 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009666:	e059      	b.n	800971c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009668:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <USBD_SetConfig+0x150>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d112      	bne.n	8009696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009678:	4b2b      	ldr	r3, [pc, #172]	; (8009728 <USBD_SetConfig+0x150>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009682:	4b29      	ldr	r3, [pc, #164]	; (8009728 <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ffac 	bl	80085e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fa06 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009694:	e042      	b.n	800971c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d02a      	beq.n	80096fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fe ff9a 	bl	80085e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096b2:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <USBD_SetConfig+0x150>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <USBD_SetConfig+0x150>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe ff73 	bl	80085ae <USBD_SetClassConfig>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f918 	bl	800990a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe ff7f 	bl	80085e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096f0:	e014      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9d4 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 80096f8:	e010      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9d0 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009700:	e00c      	b.n	800971c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f900 	bl	800990a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <USBD_SetConfig+0x150>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fe ff68 	bl	80085e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	73fb      	strb	r3, [r7, #15]
      break;
 800971a:	bf00      	nop
  }

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	2000038c 	.word	0x2000038c

0800972c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d004      	beq.n	8009748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f8e2 	bl	800990a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009746:	e023      	b.n	8009790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	dc02      	bgt.n	800975a <USBD_GetConfig+0x2e>
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc03      	bgt.n	8009760 <USBD_GetConfig+0x34>
 8009758:	e015      	b.n	8009786 <USBD_GetConfig+0x5a>
 800975a:	2b03      	cmp	r3, #3
 800975c:	d00b      	beq.n	8009776 <USBD_GetConfig+0x4a>
 800975e:	e012      	b.n	8009786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3308      	adds	r3, #8
 800976a:	2201      	movs	r2, #1
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f93c 	bl	80099ec <USBD_CtlSendData>
        break;
 8009774:	e00c      	b.n	8009790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3304      	adds	r3, #4
 800977a:	2201      	movs	r2, #1
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f934 	bl	80099ec <USBD_CtlSendData>
        break;
 8009784:	e004      	b.n	8009790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8be 	bl	800990a <USBD_CtlError>
        break;
 800978e:	bf00      	nop
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d81e      	bhi.n	80097ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d004      	beq.n	80097c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f8a5 	bl	800990a <USBD_CtlError>
        break;
 80097c0:	e01a      	b.n	80097f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	330c      	adds	r3, #12
 80097e2:	2202      	movs	r2, #2
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f900 	bl	80099ec <USBD_CtlSendData>
      break;
 80097ec:	e004      	b.n	80097f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f88a 	bl	800990a <USBD_CtlError>
      break;
 80097f6:	bf00      	nop
  }
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d107      	bne.n	8009822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f940 	bl	8009aa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009820:	e013      	b.n	800984a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d10b      	bne.n	8009842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	889b      	ldrh	r3, [r3, #4]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	b2da      	uxtb	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f930 	bl	8009aa0 <USBD_CtlSendStatus>
}
 8009840:	e003      	b.n	800984a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f860 	bl	800990a <USBD_CtlError>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	2b02      	cmp	r3, #2
 8009868:	d80b      	bhi.n	8009882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10c      	bne.n	800988c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f910 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      break;
 8009880:	e004      	b.n	800988c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f840 	bl	800990a <USBD_CtlError>
      break;
 800988a:	e000      	b.n	800988e <USBD_ClrFeature+0x3c>
      break;
 800988c:	bf00      	nop
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fa17 	bl	8008cf4 <SWAPBYTE>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fa0a 	bl	8008cf4 <SWAPBYTE>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff f9fd 	bl	8008cf4 <SWAPBYTE>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	80da      	strh	r2, [r3, #6]
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009914:	2180      	movs	r1, #128	; 0x80
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fd08 	bl	800a32c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fd04 	bl	800a32c <USBD_LL_StallEP>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d036      	beq.n	80099b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009946:	6938      	ldr	r0, [r7, #16]
 8009948:	f000 f836 	bl	80099b8 <USBD_GetLen>
 800994c:	4603      	mov	r3, r0
 800994e:	3301      	adds	r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4413      	add	r3, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	701a      	strb	r2, [r3, #0]
  idx++;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	3301      	adds	r3, #1
 800996a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	2203      	movs	r2, #3
 8009974:	701a      	strb	r2, [r3, #0]
  idx++;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800997c:	e013      	b.n	80099a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4413      	add	r3, r2
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	3301      	adds	r3, #1
 800998e:	613b      	str	r3, [r7, #16]
    idx++;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	3301      	adds	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4413      	add	r3, r2
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
    idx++;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	3301      	adds	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e7      	bne.n	800997e <USBD_GetString+0x52>
 80099ae:	e000      	b.n	80099b2 <USBD_GetString+0x86>
    return;
 80099b0:	bf00      	nop
  }
}
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c8:	e005      	b.n	80099d6 <USBD_GetLen+0x1e>
  {
    len++;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1f5      	bne.n	80099ca <USBD_GetLen+0x12>
  }

  return len;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fd13 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	2100      	movs	r1, #0
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fd02 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2203      	movs	r2, #3
 8009a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fd06 	bl	800a480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	2100      	movs	r1, #0
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fcf5 	bl	800a480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fcc1 	bl	800a43e <USBD_LL_Transmit>

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2205      	movs	r2, #5
 8009ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fccf 	bl	800a480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009af0:	2200      	movs	r2, #0
 8009af2:	4912      	ldr	r1, [pc, #72]	; (8009b3c <MX_USB_DEVICE_Init+0x50>)
 8009af4:	4812      	ldr	r0, [pc, #72]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009af6:	f7fe fcdd 	bl	80084b4 <USBD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b00:	f7f7 f93e 	bl	8000d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b04:	490f      	ldr	r1, [pc, #60]	; (8009b44 <MX_USB_DEVICE_Init+0x58>)
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b08:	f7fe fd04 	bl	8008514 <USBD_RegisterClass>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b12:	f7f7 f935 	bl	8000d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b16:	490c      	ldr	r1, [pc, #48]	; (8009b48 <MX_USB_DEVICE_Init+0x5c>)
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b1a:	f7fe fbf5 	bl	8008308 <USBD_CDC_RegisterInterface>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b24:	f7f7 f92c 	bl	8000d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b2a:	f7fe fd29 	bl	8008580 <USBD_Start>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b34:	f7f7 f924 	bl	8000d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b38:	bf00      	nop
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200000ac 	.word	0x200000ac
 8009b40:	20000390 	.word	0x20000390
 8009b44:	20000018 	.word	0x20000018
 8009b48:	20000098 	.word	0x20000098

08009b4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	4905      	ldr	r1, [pc, #20]	; (8009b68 <CDC_Init_FS+0x1c>)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b56:	f7fe fbf1 	bl	800833c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b5a:	4905      	ldr	r1, [pc, #20]	; (8009b70 <CDC_Init_FS+0x24>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b5e:	f7fe fc0f 	bl	8008380 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000e6c 	.word	0x20000e6c
 8009b6c:	20000390 	.word	0x20000390
 8009b70:	2000066c 	.word	0x2000066c

08009b74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b23      	cmp	r3, #35	; 0x23
 8009b98:	d84a      	bhi.n	8009c30 <CDC_Control_FS+0xac>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <CDC_Control_FS+0x1c>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009c31 	.word	0x08009c31
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009c31 	.word	0x08009c31
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c31 	.word	0x08009c31
 8009bd8:	08009c31 	.word	0x08009c31
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c31 	.word	0x08009c31
 8009bf0:	08009c31 	.word	0x08009c31
 8009bf4:	08009c31 	.word	0x08009c31
 8009bf8:	08009c31 	.word	0x08009c31
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c31 	.word	0x08009c31
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c31 	.word	0x08009c31
 8009c28:	08009c31 	.word	0x08009c31
 8009c2c:	08009c31 	.word	0x08009c31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c30:	bf00      	nop
  }

  return (USBD_OK);
 8009c32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4805      	ldr	r0, [pc, #20]	; (8009c64 <CDC_Receive_FS+0x24>)
 8009c4e:	f7fe fb97 	bl	8008380 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c52:	4804      	ldr	r0, [pc, #16]	; (8009c64 <CDC_Receive_FS+0x24>)
 8009c54:	f7fe fbf8 	bl	8008448 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000390 	.word	0x20000390

08009c68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c78:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <CDC_Transmit_FS+0x48>)
 8009c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e00b      	b.n	8009ca6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	4806      	ldr	r0, [pc, #24]	; (8009cb0 <CDC_Transmit_FS+0x48>)
 8009c96:	f7fe fb51 	bl	800833c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c9a:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <CDC_Transmit_FS+0x48>)
 8009c9c:	f7fe fb8e 	bl	80083bc <USBD_CDC_TransmitPacket>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000390 	.word	0x20000390

08009cb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2212      	movs	r2, #18
 8009ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cea:	4b03      	ldr	r3, [pc, #12]	; (8009cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	200000cc 	.word	0x200000cc

08009cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	200000ec 	.word	0x200000ec

08009d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4907      	ldr	r1, [pc, #28]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d36:	4808      	ldr	r0, [pc, #32]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d38:	f7ff fdf8 	bl	800992c <USBD_GetString>
 8009d3c:	e004      	b.n	8009d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	4904      	ldr	r1, [pc, #16]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d42:	4805      	ldr	r0, [pc, #20]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d44:	f7ff fdf2 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2000166c 	.word	0x2000166c
 8009d58:	0800bb98 	.word	0x0800bb98

08009d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	4904      	ldr	r1, [pc, #16]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d6c:	4804      	ldr	r0, [pc, #16]	; (8009d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d6e:	f7ff fddd 	bl	800992c <USBD_GetString>
  return USBD_StrDesc;
 8009d72:	4b02      	ldr	r3, [pc, #8]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	2000166c 	.word	0x2000166c
 8009d80:	0800bbb0 	.word	0x0800bbb0

08009d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	221a      	movs	r2, #26
 8009d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d96:	f000 f855 	bl	8009e44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d9a:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	200000f0 	.word	0x200000f0

08009da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4907      	ldr	r1, [pc, #28]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dbe:	4808      	ldr	r0, [pc, #32]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dc0:	f7ff fdb4 	bl	800992c <USBD_GetString>
 8009dc4:	e004      	b.n	8009dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4904      	ldr	r1, [pc, #16]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dca:	4805      	ldr	r0, [pc, #20]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dcc:	f7ff fdae 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	2000166c 	.word	0x2000166c
 8009de0:	0800bbc4 	.word	0x0800bbc4

08009de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dfc:	f7ff fd96 	bl	800992c <USBD_GetString>
 8009e00:	e004      	b.n	8009e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	4904      	ldr	r1, [pc, #16]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e08:	f7ff fd90 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	2000166c 	.word	0x2000166c
 8009e1c:	0800bbd0 	.word	0x0800bbd0

08009e20 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	220c      	movs	r2, #12
 8009e30:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e32:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	200000e0 	.word	0x200000e0

08009e44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <Get_SerialNum+0x44>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e50:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <Get_SerialNum+0x48>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e56:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <Get_SerialNum+0x4c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	4909      	ldr	r1, [pc, #36]	; (8009e94 <Get_SerialNum+0x50>)
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f814 	bl	8009e9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e74:	2204      	movs	r2, #4
 8009e76:	4908      	ldr	r1, [pc, #32]	; (8009e98 <Get_SerialNum+0x54>)
 8009e78:	68b8      	ldr	r0, [r7, #8]
 8009e7a:	f000 f80f 	bl	8009e9c <IntToUnicode>
  }
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	1fff7a10 	.word	0x1fff7a10
 8009e8c:	1fff7a14 	.word	0x1fff7a14
 8009e90:	1fff7a18 	.word	0x1fff7a18
 8009e94:	200000f2 	.word	0x200000f2
 8009e98:	20000102 	.word	0x20000102

08009e9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
 8009eb2:	e027      	b.n	8009f04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	0f1b      	lsrs	r3, r3, #28
 8009eb8:	2b09      	cmp	r3, #9
 8009eba:	d80b      	bhi.n	8009ed4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0f1b      	lsrs	r3, r3, #28
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	440b      	add	r3, r1
 8009ecc:	3230      	adds	r2, #48	; 0x30
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e00a      	b.n	8009eea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	0f1b      	lsrs	r3, r3, #28
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3237      	adds	r2, #55	; 0x37
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	3301      	adds	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	7dfa      	ldrb	r2, [r7, #23]
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3d3      	bcc.n	8009eb4 <IntToUnicode+0x18>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b0a0      	sub	sp, #128	; 0x80
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	605a      	str	r2, [r3, #4]
 8009f2e:	609a      	str	r2, [r3, #8]
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f34:	f107 0310 	add.w	r3, r7, #16
 8009f38:	225c      	movs	r2, #92	; 0x5c
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fb8f 	bl	800a660 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f4a:	d149      	bne.n	8009fe0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009f52:	2300      	movs	r3, #0
 8009f54:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f9 f990 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009f66:	f7f6 ff0b 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	4b1e      	ldr	r3, [pc, #120]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	4a1d      	ldr	r2, [pc, #116]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009f74:	f043 0301 	orr.w	r3, r3, #1
 8009f78:	6313      	str	r3, [r2, #48]	; 0x30
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f94:	2303      	movs	r3, #3
 8009f96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f98:	230a      	movs	r3, #10
 8009f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4812      	ldr	r0, [pc, #72]	; (8009fec <HAL_PCD_MspInit+0xd0>)
 8009fa4:	f7f7 fbdc 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fa8:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	4a0e      	ldr	r2, [pc, #56]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60bb      	str	r3, [r7, #8]
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbc:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8009fc4:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <HAL_PCD_MspInit+0xcc>)
 8009fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	2043      	movs	r0, #67	; 0x43
 8009fd6:	f7f7 fb8c 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fda:	2043      	movs	r0, #67	; 0x43
 8009fdc:	f7f7 fba5 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	3780      	adds	r7, #128	; 0x80
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	40023800 	.word	0x40023800
 8009fec:	40020000 	.word	0x40020000

08009ff0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fe fb07 	bl	800861a <USBD_LL_SetupStage>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a026:	78fa      	ldrb	r2, [r7, #3]
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7fe fb41 	bl	80086c4 <USBD_LL_DataOutStage>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	460b      	mov	r3, r1
 800a054:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	334c      	adds	r3, #76	; 0x4c
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	4619      	mov	r1, r3
 800a072:	f7fe fbda 	bl	800882a <USBD_LL_DataInStage>
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fd0e 	bl	8008aae <USBD_LL_SOF>
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]
 800a0b2:	e008      	b.n	800a0c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d102      	bne.n	800a0c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
 800a0c0:	e001      	b.n	800a0c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0c2:	f7f6 fe5d 	bl	8000d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0cc:	7bfa      	ldrb	r2, [r7, #15]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fcae 	bl	8008a32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe fc56 	bl	800898e <USBD_LL_Reset>
}
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fca9 	bl	8008a52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a112:	f043 0301 	orr.w	r3, r3, #1
 800a116:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <HAL_PCD_SuspendCallback+0x48>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	4a03      	ldr	r2, [pc, #12]	; (800a134 <HAL_PCD_SuspendCallback+0x48>)
 800a126:	f043 0306 	orr.w	r3, r3, #6
 800a12a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	e000ed00 	.word	0xe000ed00

0800a138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fc99 	bl	8008a7e <USBD_LL_Resume>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fcf1 	bl	8008b52 <USBD_LL_IsoOUTIncomplete>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fcad 	bl	8008aee <USBD_LL_IsoINIncomplete>
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fd03 	bl	8008bb6 <USBD_LL_DevConnected>
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fd00 	bl	8008bcc <USBD_LL_DevDisconnected>
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d13c      	bne.n	800a25e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1e4:	4a20      	ldr	r2, [pc, #128]	; (800a268 <USBD_LL_Init+0x94>)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a1e      	ldr	r2, [pc, #120]	; (800a268 <USBD_LL_Init+0x94>)
 800a1f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <USBD_LL_Init+0x94>)
 800a1f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a1fc:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <USBD_LL_Init+0x94>)
 800a1fe:	2206      	movs	r2, #6
 800a200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a202:	4b19      	ldr	r3, [pc, #100]	; (800a268 <USBD_LL_Init+0x94>)
 800a204:	2202      	movs	r2, #2
 800a206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a208:	4b17      	ldr	r3, [pc, #92]	; (800a268 <USBD_LL_Init+0x94>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a20e:	4b16      	ldr	r3, [pc, #88]	; (800a268 <USBD_LL_Init+0x94>)
 800a210:	2202      	movs	r2, #2
 800a212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a214:	4b14      	ldr	r3, [pc, #80]	; (800a268 <USBD_LL_Init+0x94>)
 800a216:	2200      	movs	r2, #0
 800a218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a21a:	4b13      	ldr	r3, [pc, #76]	; (800a268 <USBD_LL_Init+0x94>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <USBD_LL_Init+0x94>)
 800a222:	2200      	movs	r2, #0
 800a224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a226:	4b10      	ldr	r3, [pc, #64]	; (800a268 <USBD_LL_Init+0x94>)
 800a228:	2200      	movs	r2, #0
 800a22a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a22c:	4b0e      	ldr	r3, [pc, #56]	; (800a268 <USBD_LL_Init+0x94>)
 800a22e:	2200      	movs	r2, #0
 800a230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a232:	480d      	ldr	r0, [pc, #52]	; (800a268 <USBD_LL_Init+0x94>)
 800a234:	f7f7 fc41 	bl	8001aba <HAL_PCD_Init>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a23e:	f7f6 fd9f 	bl	8000d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a242:	2180      	movs	r1, #128	; 0x80
 800a244:	4808      	ldr	r0, [pc, #32]	; (800a268 <USBD_LL_Init+0x94>)
 800a246:	f7f8 fecc 	bl	8002fe2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a24a:	2240      	movs	r2, #64	; 0x40
 800a24c:	2100      	movs	r1, #0
 800a24e:	4806      	ldr	r0, [pc, #24]	; (800a268 <USBD_LL_Init+0x94>)
 800a250:	f7f8 fe80 	bl	8002f54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a254:	2280      	movs	r2, #128	; 0x80
 800a256:	2101      	movs	r1, #1
 800a258:	4803      	ldr	r0, [pc, #12]	; (800a268 <USBD_LL_Init+0x94>)
 800a25a:	f7f8 fe7b 	bl	8002f54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	2000186c 	.word	0x2000186c

0800a26c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a282:	4618      	mov	r0, r3
 800a284:	f7f7 fd3d 	bl	8001d02 <HAL_PCD_Start>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f990 	bl	800a5b4 <USBD_Get_USB_Status>
 800a294:	4603      	mov	r3, r0
 800a296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a298:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	70fb      	strb	r3, [r7, #3]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70bb      	strb	r3, [r7, #2]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2ca:	78bb      	ldrb	r3, [r7, #2]
 800a2cc:	883a      	ldrh	r2, [r7, #0]
 800a2ce:	78f9      	ldrb	r1, [r7, #3]
 800a2d0:	f7f8 fa3b 	bl	800274a <HAL_PCD_EP_Open>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f96a 	bl	800a5b4 <USBD_Get_USB_Status>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f8 fa84 	bl	800281a <HAL_PCD_EP_Close>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 f94b 	bl	800a5b4 <USBD_Get_USB_Status>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a322:	7bbb      	ldrb	r3, [r7, #14]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a346:	78fa      	ldrb	r2, [r7, #3]
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f8 fb5c 	bl	8002a08 <HAL_PCD_EP_SetStall>
 800a350:	4603      	mov	r3, r0
 800a352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	4618      	mov	r0, r3
 800a358:	f000 f92c 	bl	800a5b4 <USBD_Get_USB_Status>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a360:	7bbb      	ldrb	r3, [r7, #14]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a384:	78fa      	ldrb	r2, [r7, #3]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f8 fba1 	bl	8002ad0 <HAL_PCD_EP_ClrStall>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f90d 	bl	800a5b4 <USBD_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	da0b      	bge.n	800a3dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	440b      	add	r3, r1
 800a3d6:	333e      	adds	r3, #62	; 0x3e
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	e00b      	b.n	800a3f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a3f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f8 f96e 	bl	8002700 <HAL_PCD_SetAddress>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f8c2 	bl	800a5b4 <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b086      	sub	sp, #24
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
 800a44a:	460b      	mov	r3, r1
 800a44c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a45c:	7af9      	ldrb	r1, [r7, #11]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	f7f8 fa87 	bl	8002974 <HAL_PCD_EP_Transmit>
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 f8a1 	bl	800a5b4 <USBD_Get_USB_Status>
 800a472:	4603      	mov	r3, r0
 800a474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a476:	7dbb      	ldrb	r3, [r7, #22]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	460b      	mov	r3, r1
 800a48e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a49e:	7af9      	ldrb	r1, [r7, #11]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	f7f8 fa03 	bl	80028ae <HAL_PCD_EP_Receive>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f880 	bl	800a5b4 <USBD_Get_USB_Status>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7f8 fa33 	bl	8002944 <HAL_PCD_EP_GetRxCount>
 800a4de:	4603      	mov	r3, r0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <HAL_PCDEx_LPM_Callback+0x18>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d01f      	beq.n	800a53e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a4fe:	e03b      	b.n	800a578 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a508:	f7f6 f90c 	bl	8000724 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a50c:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <HAL_PCDEx_LPM_Callback+0x98>)
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <HAL_PCDEx_LPM_Callback+0x98>)
 800a512:	f023 0306 	bic.w	r3, r3, #6
 800a516:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a52a:	f023 0301 	bic.w	r3, r3, #1
 800a52e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe faa1 	bl	8008a7e <USBD_LL_Resume>
    break;
 800a53c:	e01c      	b.n	800a578 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a550:	f043 0301 	orr.w	r3, r3, #1
 800a554:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe fa78 	bl	8008a52 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a56a:	4b05      	ldr	r3, [pc, #20]	; (800a580 <HAL_PCDEx_LPM_Callback+0x98>)
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	4a04      	ldr	r2, [pc, #16]	; (800a580 <HAL_PCDEx_LPM_Callback+0x98>)
 800a570:	f043 0306 	orr.w	r3, r3, #6
 800a574:	6113      	str	r3, [r2, #16]
    break;
 800a576:	bf00      	nop
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	e000ed00 	.word	0xe000ed00

0800a584 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a58c:	4b03      	ldr	r3, [pc, #12]	; (800a59c <USBD_static_malloc+0x18>)
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20001d78 	.word	0x20001d78

0800a5a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d817      	bhi.n	800a5f8 <USBD_Get_USB_Status+0x44>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <USBD_Get_USB_Status+0x1c>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a5e1 	.word	0x0800a5e1
 800a5d4:	0800a5e7 	.word	0x0800a5e7
 800a5d8:	0800a5ed 	.word	0x0800a5ed
 800a5dc:	0800a5f3 	.word	0x0800a5f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e4:	e00b      	b.n	800a5fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ea:	e008      	b.n	800a5fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f0:	e005      	b.n	800a5fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f6:	e002      	b.n	800a5fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fc:	bf00      	nop
  }
  return usb_status;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <__errno>:
 800a60c:	4b01      	ldr	r3, [pc, #4]	; (800a614 <__errno+0x8>)
 800a60e:	6818      	ldr	r0, [r3, #0]
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2000010c 	.word	0x2000010c

0800a618 <__libc_init_array>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	4d0d      	ldr	r5, [pc, #52]	; (800a650 <__libc_init_array+0x38>)
 800a61c:	4c0d      	ldr	r4, [pc, #52]	; (800a654 <__libc_init_array+0x3c>)
 800a61e:	1b64      	subs	r4, r4, r5
 800a620:	10a4      	asrs	r4, r4, #2
 800a622:	2600      	movs	r6, #0
 800a624:	42a6      	cmp	r6, r4
 800a626:	d109      	bne.n	800a63c <__libc_init_array+0x24>
 800a628:	4d0b      	ldr	r5, [pc, #44]	; (800a658 <__libc_init_array+0x40>)
 800a62a:	4c0c      	ldr	r4, [pc, #48]	; (800a65c <__libc_init_array+0x44>)
 800a62c:	f001 fa96 	bl	800bb5c <_init>
 800a630:	1b64      	subs	r4, r4, r5
 800a632:	10a4      	asrs	r4, r4, #2
 800a634:	2600      	movs	r6, #0
 800a636:	42a6      	cmp	r6, r4
 800a638:	d105      	bne.n	800a646 <__libc_init_array+0x2e>
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a640:	4798      	blx	r3
 800a642:	3601      	adds	r6, #1
 800a644:	e7ee      	b.n	800a624 <__libc_init_array+0xc>
 800a646:	f855 3b04 	ldr.w	r3, [r5], #4
 800a64a:	4798      	blx	r3
 800a64c:	3601      	adds	r6, #1
 800a64e:	e7f2      	b.n	800a636 <__libc_init_array+0x1e>
 800a650:	0800bd48 	.word	0x0800bd48
 800a654:	0800bd48 	.word	0x0800bd48
 800a658:	0800bd48 	.word	0x0800bd48
 800a65c:	0800bd4c 	.word	0x0800bd4c

0800a660 <memset>:
 800a660:	4402      	add	r2, r0
 800a662:	4603      	mov	r3, r0
 800a664:	4293      	cmp	r3, r2
 800a666:	d100      	bne.n	800a66a <memset+0xa>
 800a668:	4770      	bx	lr
 800a66a:	f803 1b01 	strb.w	r1, [r3], #1
 800a66e:	e7f9      	b.n	800a664 <memset+0x4>

0800a670 <srand>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <srand+0x44>)
 800a674:	681d      	ldr	r5, [r3, #0]
 800a676:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a678:	4604      	mov	r4, r0
 800a67a:	b9b3      	cbnz	r3, 800a6aa <srand+0x3a>
 800a67c:	2018      	movs	r0, #24
 800a67e:	f000 f8df 	bl	800a840 <malloc>
 800a682:	4602      	mov	r2, r0
 800a684:	63a8      	str	r0, [r5, #56]	; 0x38
 800a686:	b920      	cbnz	r0, 800a692 <srand+0x22>
 800a688:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <srand+0x48>)
 800a68a:	480c      	ldr	r0, [pc, #48]	; (800a6bc <srand+0x4c>)
 800a68c:	2142      	movs	r1, #66	; 0x42
 800a68e:	f000 f895 	bl	800a7bc <__assert_func>
 800a692:	490b      	ldr	r1, [pc, #44]	; (800a6c0 <srand+0x50>)
 800a694:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <srand+0x54>)
 800a696:	e9c0 1300 	strd	r1, r3, [r0]
 800a69a:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <srand+0x58>)
 800a69c:	6083      	str	r3, [r0, #8]
 800a69e:	230b      	movs	r3, #11
 800a6a0:	8183      	strh	r3, [r0, #12]
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a6aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	611c      	str	r4, [r3, #16]
 800a6b0:	615a      	str	r2, [r3, #20]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	2000010c 	.word	0x2000010c
 800a6b8:	0800bbfc 	.word	0x0800bbfc
 800a6bc:	0800bc13 	.word	0x0800bc13
 800a6c0:	abcd330e 	.word	0xabcd330e
 800a6c4:	e66d1234 	.word	0xe66d1234
 800a6c8:	0005deec 	.word	0x0005deec

0800a6cc <rand>:
 800a6cc:	4b16      	ldr	r3, [pc, #88]	; (800a728 <rand+0x5c>)
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	681c      	ldr	r4, [r3, #0]
 800a6d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6d4:	b9b3      	cbnz	r3, 800a704 <rand+0x38>
 800a6d6:	2018      	movs	r0, #24
 800a6d8:	f000 f8b2 	bl	800a840 <malloc>
 800a6dc:	63a0      	str	r0, [r4, #56]	; 0x38
 800a6de:	b928      	cbnz	r0, 800a6ec <rand+0x20>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <rand+0x60>)
 800a6e4:	4812      	ldr	r0, [pc, #72]	; (800a730 <rand+0x64>)
 800a6e6:	214e      	movs	r1, #78	; 0x4e
 800a6e8:	f000 f868 	bl	800a7bc <__assert_func>
 800a6ec:	4a11      	ldr	r2, [pc, #68]	; (800a734 <rand+0x68>)
 800a6ee:	4b12      	ldr	r3, [pc, #72]	; (800a738 <rand+0x6c>)
 800a6f0:	e9c0 2300 	strd	r2, r3, [r0]
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <rand+0x70>)
 800a6f6:	6083      	str	r3, [r0, #8]
 800a6f8:	230b      	movs	r3, #11
 800a6fa:	8183      	strh	r3, [r0, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	2300      	movs	r3, #0
 800a700:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a704:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a706:	4a0e      	ldr	r2, [pc, #56]	; (800a740 <rand+0x74>)
 800a708:	6920      	ldr	r0, [r4, #16]
 800a70a:	6963      	ldr	r3, [r4, #20]
 800a70c:	490d      	ldr	r1, [pc, #52]	; (800a744 <rand+0x78>)
 800a70e:	4342      	muls	r2, r0
 800a710:	fb01 2203 	mla	r2, r1, r3, r2
 800a714:	fba0 0101 	umull	r0, r1, r0, r1
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	eb42 0001 	adc.w	r0, r2, r1
 800a71e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a722:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a726:	bd10      	pop	{r4, pc}
 800a728:	2000010c 	.word	0x2000010c
 800a72c:	0800bbfc 	.word	0x0800bbfc
 800a730:	0800bc13 	.word	0x0800bc13
 800a734:	abcd330e 	.word	0xabcd330e
 800a738:	e66d1234 	.word	0xe66d1234
 800a73c:	0005deec 	.word	0x0005deec
 800a740:	5851f42d 	.word	0x5851f42d
 800a744:	4c957f2d 	.word	0x4c957f2d

0800a748 <siprintf>:
 800a748:	b40e      	push	{r1, r2, r3}
 800a74a:	b500      	push	{lr}
 800a74c:	b09c      	sub	sp, #112	; 0x70
 800a74e:	ab1d      	add	r3, sp, #116	; 0x74
 800a750:	9002      	str	r0, [sp, #8]
 800a752:	9006      	str	r0, [sp, #24]
 800a754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a758:	4809      	ldr	r0, [pc, #36]	; (800a780 <siprintf+0x38>)
 800a75a:	9107      	str	r1, [sp, #28]
 800a75c:	9104      	str	r1, [sp, #16]
 800a75e:	4909      	ldr	r1, [pc, #36]	; (800a784 <siprintf+0x3c>)
 800a760:	f853 2b04 	ldr.w	r2, [r3], #4
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	a902      	add	r1, sp, #8
 800a76c:	f000 f9ac 	bl	800aac8 <_svfiprintf_r>
 800a770:	9b02      	ldr	r3, [sp, #8]
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	b01c      	add	sp, #112	; 0x70
 800a778:	f85d eb04 	ldr.w	lr, [sp], #4
 800a77c:	b003      	add	sp, #12
 800a77e:	4770      	bx	lr
 800a780:	2000010c 	.word	0x2000010c
 800a784:	ffff0208 	.word	0xffff0208

0800a788 <time>:
 800a788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <time+0x30>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	4669      	mov	r1, sp
 800a790:	4604      	mov	r4, r0
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	f000 f842 	bl	800a81c <_gettimeofday_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	bfbe      	ittt	lt
 800a79c:	f04f 32ff 	movlt.w	r2, #4294967295
 800a7a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a4:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ac:	b10c      	cbz	r4, 800a7b2 <time+0x2a>
 800a7ae:	e9c4 0100 	strd	r0, r1, [r4]
 800a7b2:	b004      	add	sp, #16
 800a7b4:	bd10      	pop	{r4, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2000010c 	.word	0x2000010c

0800a7bc <__assert_func>:
 800a7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7be:	4614      	mov	r4, r2
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <__assert_func+0x2c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	68d8      	ldr	r0, [r3, #12]
 800a7ca:	b14c      	cbz	r4, 800a7e0 <__assert_func+0x24>
 800a7cc:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <__assert_func+0x30>)
 800a7ce:	9100      	str	r1, [sp, #0]
 800a7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7d4:	4906      	ldr	r1, [pc, #24]	; (800a7f0 <__assert_func+0x34>)
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	f000 f80e 	bl	800a7f8 <fiprintf>
 800a7dc:	f000 fe32 	bl	800b444 <abort>
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <__assert_func+0x38>)
 800a7e2:	461c      	mov	r4, r3
 800a7e4:	e7f3      	b.n	800a7ce <__assert_func+0x12>
 800a7e6:	bf00      	nop
 800a7e8:	2000010c 	.word	0x2000010c
 800a7ec:	0800bc6e 	.word	0x0800bc6e
 800a7f0:	0800bc7b 	.word	0x0800bc7b
 800a7f4:	0800bca9 	.word	0x0800bca9

0800a7f8 <fiprintf>:
 800a7f8:	b40e      	push	{r1, r2, r3}
 800a7fa:	b503      	push	{r0, r1, lr}
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	ab03      	add	r3, sp, #12
 800a800:	4805      	ldr	r0, [pc, #20]	; (800a818 <fiprintf+0x20>)
 800a802:	f853 2b04 	ldr.w	r2, [r3], #4
 800a806:	6800      	ldr	r0, [r0, #0]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	f000 fa87 	bl	800ad1c <_vfiprintf_r>
 800a80e:	b002      	add	sp, #8
 800a810:	f85d eb04 	ldr.w	lr, [sp], #4
 800a814:	b003      	add	sp, #12
 800a816:	4770      	bx	lr
 800a818:	2000010c 	.word	0x2000010c

0800a81c <_gettimeofday_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_gettimeofday_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f001 f98f 	bl	800bb4c <_gettimeofday>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_gettimeofday_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_gettimeofday_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20001fa0 	.word	0x20001fa0

0800a840 <malloc>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <malloc+0xc>)
 800a842:	4601      	mov	r1, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f000 b86f 	b.w	800a928 <_malloc_r>
 800a84a:	bf00      	nop
 800a84c:	2000010c 	.word	0x2000010c

0800a850 <_free_r>:
 800a850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a852:	2900      	cmp	r1, #0
 800a854:	d044      	beq.n	800a8e0 <_free_r+0x90>
 800a856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f1a1 0404 	sub.w	r4, r1, #4
 800a862:	bfb8      	it	lt
 800a864:	18e4      	addlt	r4, r4, r3
 800a866:	f001 f83d 	bl	800b8e4 <__malloc_lock>
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <_free_r+0x94>)
 800a86c:	9801      	ldr	r0, [sp, #4]
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	b933      	cbnz	r3, 800a880 <_free_r+0x30>
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	6014      	str	r4, [r2, #0]
 800a876:	b003      	add	sp, #12
 800a878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a87c:	f001 b838 	b.w	800b8f0 <__malloc_unlock>
 800a880:	42a3      	cmp	r3, r4
 800a882:	d908      	bls.n	800a896 <_free_r+0x46>
 800a884:	6825      	ldr	r5, [r4, #0]
 800a886:	1961      	adds	r1, r4, r5
 800a888:	428b      	cmp	r3, r1
 800a88a:	bf01      	itttt	eq
 800a88c:	6819      	ldreq	r1, [r3, #0]
 800a88e:	685b      	ldreq	r3, [r3, #4]
 800a890:	1949      	addeq	r1, r1, r5
 800a892:	6021      	streq	r1, [r4, #0]
 800a894:	e7ed      	b.n	800a872 <_free_r+0x22>
 800a896:	461a      	mov	r2, r3
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b10b      	cbz	r3, 800a8a0 <_free_r+0x50>
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d9fa      	bls.n	800a896 <_free_r+0x46>
 800a8a0:	6811      	ldr	r1, [r2, #0]
 800a8a2:	1855      	adds	r5, r2, r1
 800a8a4:	42a5      	cmp	r5, r4
 800a8a6:	d10b      	bne.n	800a8c0 <_free_r+0x70>
 800a8a8:	6824      	ldr	r4, [r4, #0]
 800a8aa:	4421      	add	r1, r4
 800a8ac:	1854      	adds	r4, r2, r1
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	d1e0      	bne.n	800a876 <_free_r+0x26>
 800a8b4:	681c      	ldr	r4, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	6053      	str	r3, [r2, #4]
 800a8ba:	4421      	add	r1, r4
 800a8bc:	6011      	str	r1, [r2, #0]
 800a8be:	e7da      	b.n	800a876 <_free_r+0x26>
 800a8c0:	d902      	bls.n	800a8c8 <_free_r+0x78>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	e7d6      	b.n	800a876 <_free_r+0x26>
 800a8c8:	6825      	ldr	r5, [r4, #0]
 800a8ca:	1961      	adds	r1, r4, r5
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf04      	itt	eq
 800a8d0:	6819      	ldreq	r1, [r3, #0]
 800a8d2:	685b      	ldreq	r3, [r3, #4]
 800a8d4:	6063      	str	r3, [r4, #4]
 800a8d6:	bf04      	itt	eq
 800a8d8:	1949      	addeq	r1, r1, r5
 800a8da:	6021      	streq	r1, [r4, #0]
 800a8dc:	6054      	str	r4, [r2, #4]
 800a8de:	e7ca      	b.n	800a876 <_free_r+0x26>
 800a8e0:	b003      	add	sp, #12
 800a8e2:	bd30      	pop	{r4, r5, pc}
 800a8e4:	20001f98 	.word	0x20001f98

0800a8e8 <sbrk_aligned>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4e0e      	ldr	r6, [pc, #56]	; (800a924 <sbrk_aligned+0x3c>)
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b911      	cbnz	r1, 800a8fa <sbrk_aligned+0x12>
 800a8f4:	f000 fcd6 	bl	800b2a4 <_sbrk_r>
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 fcd1 	bl	800b2a4 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d00a      	beq.n	800a91c <sbrk_aligned+0x34>
 800a906:	1cc4      	adds	r4, r0, #3
 800a908:	f024 0403 	bic.w	r4, r4, #3
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d007      	beq.n	800a920 <sbrk_aligned+0x38>
 800a910:	1a21      	subs	r1, r4, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f000 fcc6 	bl	800b2a4 <_sbrk_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	d101      	bne.n	800a920 <sbrk_aligned+0x38>
 800a91c:	f04f 34ff 	mov.w	r4, #4294967295
 800a920:	4620      	mov	r0, r4
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	20001f9c 	.word	0x20001f9c

0800a928 <_malloc_r>:
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4607      	mov	r7, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d905      	bls.n	800a950 <_malloc_r+0x28>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	2600      	movs	r6, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	4e2e      	ldr	r6, [pc, #184]	; (800aa0c <_malloc_r+0xe4>)
 800a952:	f000 ffc7 	bl	800b8e4 <__malloc_lock>
 800a956:	6833      	ldr	r3, [r6, #0]
 800a958:	461c      	mov	r4, r3
 800a95a:	bb34      	cbnz	r4, 800a9aa <_malloc_r+0x82>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	f7ff ffc2 	bl	800a8e8 <sbrk_aligned>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	4604      	mov	r4, r0
 800a968:	d14d      	bne.n	800aa06 <_malloc_r+0xde>
 800a96a:	6834      	ldr	r4, [r6, #0]
 800a96c:	4626      	mov	r6, r4
 800a96e:	2e00      	cmp	r6, #0
 800a970:	d140      	bne.n	800a9f4 <_malloc_r+0xcc>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	4631      	mov	r1, r6
 800a976:	4638      	mov	r0, r7
 800a978:	eb04 0803 	add.w	r8, r4, r3
 800a97c:	f000 fc92 	bl	800b2a4 <_sbrk_r>
 800a980:	4580      	cmp	r8, r0
 800a982:	d13a      	bne.n	800a9fa <_malloc_r+0xd2>
 800a984:	6821      	ldr	r1, [r4, #0]
 800a986:	3503      	adds	r5, #3
 800a988:	1a6d      	subs	r5, r5, r1
 800a98a:	f025 0503 	bic.w	r5, r5, #3
 800a98e:	3508      	adds	r5, #8
 800a990:	2d0c      	cmp	r5, #12
 800a992:	bf38      	it	cc
 800a994:	250c      	movcc	r5, #12
 800a996:	4629      	mov	r1, r5
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff ffa5 	bl	800a8e8 <sbrk_aligned>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d02b      	beq.n	800a9fa <_malloc_r+0xd2>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	442b      	add	r3, r5
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	e00e      	b.n	800a9c8 <_malloc_r+0xa0>
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	d41e      	bmi.n	800a9ee <_malloc_r+0xc6>
 800a9b0:	2a0b      	cmp	r2, #11
 800a9b2:	d916      	bls.n	800a9e2 <_malloc_r+0xba>
 800a9b4:	1961      	adds	r1, r4, r5
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	6025      	str	r5, [r4, #0]
 800a9ba:	bf18      	it	ne
 800a9bc:	6059      	strne	r1, [r3, #4]
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	bf08      	it	eq
 800a9c2:	6031      	streq	r1, [r6, #0]
 800a9c4:	5162      	str	r2, [r4, r5]
 800a9c6:	604b      	str	r3, [r1, #4]
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f104 060b 	add.w	r6, r4, #11
 800a9ce:	f000 ff8f 	bl	800b8f0 <__malloc_unlock>
 800a9d2:	f026 0607 	bic.w	r6, r6, #7
 800a9d6:	1d23      	adds	r3, r4, #4
 800a9d8:	1af2      	subs	r2, r6, r3
 800a9da:	d0b6      	beq.n	800a94a <_malloc_r+0x22>
 800a9dc:	1b9b      	subs	r3, r3, r6
 800a9de:	50a3      	str	r3, [r4, r2]
 800a9e0:	e7b3      	b.n	800a94a <_malloc_r+0x22>
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	bf0c      	ite	eq
 800a9e8:	6032      	streq	r2, [r6, #0]
 800a9ea:	605a      	strne	r2, [r3, #4]
 800a9ec:	e7ec      	b.n	800a9c8 <_malloc_r+0xa0>
 800a9ee:	4623      	mov	r3, r4
 800a9f0:	6864      	ldr	r4, [r4, #4]
 800a9f2:	e7b2      	b.n	800a95a <_malloc_r+0x32>
 800a9f4:	4634      	mov	r4, r6
 800a9f6:	6876      	ldr	r6, [r6, #4]
 800a9f8:	e7b9      	b.n	800a96e <_malloc_r+0x46>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	603b      	str	r3, [r7, #0]
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f000 ff76 	bl	800b8f0 <__malloc_unlock>
 800aa04:	e7a1      	b.n	800a94a <_malloc_r+0x22>
 800aa06:	6025      	str	r5, [r4, #0]
 800aa08:	e7de      	b.n	800a9c8 <_malloc_r+0xa0>
 800aa0a:	bf00      	nop
 800aa0c:	20001f98 	.word	0x20001f98

0800aa10 <__ssputs_r>:
 800aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	688e      	ldr	r6, [r1, #8]
 800aa16:	429e      	cmp	r6, r3
 800aa18:	4682      	mov	sl, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	4690      	mov	r8, r2
 800aa1e:	461f      	mov	r7, r3
 800aa20:	d838      	bhi.n	800aa94 <__ssputs_r+0x84>
 800aa22:	898a      	ldrh	r2, [r1, #12]
 800aa24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa28:	d032      	beq.n	800aa90 <__ssputs_r+0x80>
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	6909      	ldr	r1, [r1, #16]
 800aa2e:	eba5 0901 	sub.w	r9, r5, r1
 800aa32:	6965      	ldr	r5, [r4, #20]
 800aa34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	444b      	add	r3, r9
 800aa40:	106d      	asrs	r5, r5, #1
 800aa42:	429d      	cmp	r5, r3
 800aa44:	bf38      	it	cc
 800aa46:	461d      	movcc	r5, r3
 800aa48:	0553      	lsls	r3, r2, #21
 800aa4a:	d531      	bpl.n	800aab0 <__ssputs_r+0xa0>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	f7ff ff6b 	bl	800a928 <_malloc_r>
 800aa52:	4606      	mov	r6, r0
 800aa54:	b950      	cbnz	r0, 800aa6c <__ssputs_r+0x5c>
 800aa56:	230c      	movs	r3, #12
 800aa58:	f8ca 3000 	str.w	r3, [sl]
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	464a      	mov	r2, r9
 800aa70:	f000 ff10 	bl	800b894 <memcpy>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	6126      	str	r6, [r4, #16]
 800aa82:	6165      	str	r5, [r4, #20]
 800aa84:	444e      	add	r6, r9
 800aa86:	eba5 0509 	sub.w	r5, r5, r9
 800aa8a:	6026      	str	r6, [r4, #0]
 800aa8c:	60a5      	str	r5, [r4, #8]
 800aa8e:	463e      	mov	r6, r7
 800aa90:	42be      	cmp	r6, r7
 800aa92:	d900      	bls.n	800aa96 <__ssputs_r+0x86>
 800aa94:	463e      	mov	r6, r7
 800aa96:	6820      	ldr	r0, [r4, #0]
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	f000 ff08 	bl	800b8b0 <memmove>
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	1b9b      	subs	r3, r3, r6
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4433      	add	r3, r6
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	2000      	movs	r0, #0
 800aaae:	e7db      	b.n	800aa68 <__ssputs_r+0x58>
 800aab0:	462a      	mov	r2, r5
 800aab2:	f000 ff23 	bl	800b8fc <_realloc_r>
 800aab6:	4606      	mov	r6, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1e1      	bne.n	800aa80 <__ssputs_r+0x70>
 800aabc:	6921      	ldr	r1, [r4, #16]
 800aabe:	4650      	mov	r0, sl
 800aac0:	f7ff fec6 	bl	800a850 <_free_r>
 800aac4:	e7c7      	b.n	800aa56 <__ssputs_r+0x46>
	...

0800aac8 <_svfiprintf_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	4698      	mov	r8, r3
 800aace:	898b      	ldrh	r3, [r1, #12]
 800aad0:	061b      	lsls	r3, r3, #24
 800aad2:	b09d      	sub	sp, #116	; 0x74
 800aad4:	4607      	mov	r7, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	4614      	mov	r4, r2
 800aada:	d50e      	bpl.n	800aafa <_svfiprintf_r+0x32>
 800aadc:	690b      	ldr	r3, [r1, #16]
 800aade:	b963      	cbnz	r3, 800aafa <_svfiprintf_r+0x32>
 800aae0:	2140      	movs	r1, #64	; 0x40
 800aae2:	f7ff ff21 	bl	800a928 <_malloc_r>
 800aae6:	6028      	str	r0, [r5, #0]
 800aae8:	6128      	str	r0, [r5, #16]
 800aaea:	b920      	cbnz	r0, 800aaf6 <_svfiprintf_r+0x2e>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	e0d1      	b.n	800ac9a <_svfiprintf_r+0x1d2>
 800aaf6:	2340      	movs	r3, #64	; 0x40
 800aaf8:	616b      	str	r3, [r5, #20]
 800aafa:	2300      	movs	r3, #0
 800aafc:	9309      	str	r3, [sp, #36]	; 0x24
 800aafe:	2320      	movs	r3, #32
 800ab00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab08:	2330      	movs	r3, #48	; 0x30
 800ab0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acb4 <_svfiprintf_r+0x1ec>
 800ab0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab12:	f04f 0901 	mov.w	r9, #1
 800ab16:	4623      	mov	r3, r4
 800ab18:	469a      	mov	sl, r3
 800ab1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab1e:	b10a      	cbz	r2, 800ab24 <_svfiprintf_r+0x5c>
 800ab20:	2a25      	cmp	r2, #37	; 0x25
 800ab22:	d1f9      	bne.n	800ab18 <_svfiprintf_r+0x50>
 800ab24:	ebba 0b04 	subs.w	fp, sl, r4
 800ab28:	d00b      	beq.n	800ab42 <_svfiprintf_r+0x7a>
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7ff ff6d 	bl	800aa10 <__ssputs_r>
 800ab36:	3001      	adds	r0, #1
 800ab38:	f000 80aa 	beq.w	800ac90 <_svfiprintf_r+0x1c8>
 800ab3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3e:	445a      	add	r2, fp
 800ab40:	9209      	str	r2, [sp, #36]	; 0x24
 800ab42:	f89a 3000 	ldrb.w	r3, [sl]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80a2 	beq.w	800ac90 <_svfiprintf_r+0x1c8>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab56:	f10a 0a01 	add.w	sl, sl, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	9307      	str	r3, [sp, #28]
 800ab5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab62:	931a      	str	r3, [sp, #104]	; 0x68
 800ab64:	4654      	mov	r4, sl
 800ab66:	2205      	movs	r2, #5
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	4851      	ldr	r0, [pc, #324]	; (800acb4 <_svfiprintf_r+0x1ec>)
 800ab6e:	f7f5 fb57 	bl	8000220 <memchr>
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	b9d8      	cbnz	r0, 800abae <_svfiprintf_r+0xe6>
 800ab76:	06d0      	lsls	r0, r2, #27
 800ab78:	bf44      	itt	mi
 800ab7a:	2320      	movmi	r3, #32
 800ab7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab80:	0711      	lsls	r1, r2, #28
 800ab82:	bf44      	itt	mi
 800ab84:	232b      	movmi	r3, #43	; 0x2b
 800ab86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab90:	d015      	beq.n	800abbe <_svfiprintf_r+0xf6>
 800ab92:	9a07      	ldr	r2, [sp, #28]
 800ab94:	4654      	mov	r4, sl
 800ab96:	2000      	movs	r0, #0
 800ab98:	f04f 0c0a 	mov.w	ip, #10
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aba2:	3b30      	subs	r3, #48	; 0x30
 800aba4:	2b09      	cmp	r3, #9
 800aba6:	d94e      	bls.n	800ac46 <_svfiprintf_r+0x17e>
 800aba8:	b1b0      	cbz	r0, 800abd8 <_svfiprintf_r+0x110>
 800abaa:	9207      	str	r2, [sp, #28]
 800abac:	e014      	b.n	800abd8 <_svfiprintf_r+0x110>
 800abae:	eba0 0308 	sub.w	r3, r0, r8
 800abb2:	fa09 f303 	lsl.w	r3, r9, r3
 800abb6:	4313      	orrs	r3, r2
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	46a2      	mov	sl, r4
 800abbc:	e7d2      	b.n	800ab64 <_svfiprintf_r+0x9c>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	1d19      	adds	r1, r3, #4
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	9103      	str	r1, [sp, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bfbb      	ittet	lt
 800abca:	425b      	neglt	r3, r3
 800abcc:	f042 0202 	orrlt.w	r2, r2, #2
 800abd0:	9307      	strge	r3, [sp, #28]
 800abd2:	9307      	strlt	r3, [sp, #28]
 800abd4:	bfb8      	it	lt
 800abd6:	9204      	strlt	r2, [sp, #16]
 800abd8:	7823      	ldrb	r3, [r4, #0]
 800abda:	2b2e      	cmp	r3, #46	; 0x2e
 800abdc:	d10c      	bne.n	800abf8 <_svfiprintf_r+0x130>
 800abde:	7863      	ldrb	r3, [r4, #1]
 800abe0:	2b2a      	cmp	r3, #42	; 0x2a
 800abe2:	d135      	bne.n	800ac50 <_svfiprintf_r+0x188>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	9203      	str	r2, [sp, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bfb8      	it	lt
 800abf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abf4:	3402      	adds	r4, #2
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acc4 <_svfiprintf_r+0x1fc>
 800abfc:	7821      	ldrb	r1, [r4, #0]
 800abfe:	2203      	movs	r2, #3
 800ac00:	4650      	mov	r0, sl
 800ac02:	f7f5 fb0d 	bl	8000220 <memchr>
 800ac06:	b140      	cbz	r0, 800ac1a <_svfiprintf_r+0x152>
 800ac08:	2340      	movs	r3, #64	; 0x40
 800ac0a:	eba0 000a 	sub.w	r0, r0, sl
 800ac0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac12:	9b04      	ldr	r3, [sp, #16]
 800ac14:	4303      	orrs	r3, r0
 800ac16:	3401      	adds	r4, #1
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1e:	4826      	ldr	r0, [pc, #152]	; (800acb8 <_svfiprintf_r+0x1f0>)
 800ac20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac24:	2206      	movs	r2, #6
 800ac26:	f7f5 fafb 	bl	8000220 <memchr>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d038      	beq.n	800aca0 <_svfiprintf_r+0x1d8>
 800ac2e:	4b23      	ldr	r3, [pc, #140]	; (800acbc <_svfiprintf_r+0x1f4>)
 800ac30:	bb1b      	cbnz	r3, 800ac7a <_svfiprintf_r+0x1b2>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	3307      	adds	r3, #7
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	9303      	str	r3, [sp, #12]
 800ac3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac40:	4433      	add	r3, r6
 800ac42:	9309      	str	r3, [sp, #36]	; 0x24
 800ac44:	e767      	b.n	800ab16 <_svfiprintf_r+0x4e>
 800ac46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	e7a5      	b.n	800ab9c <_svfiprintf_r+0xd4>
 800ac50:	2300      	movs	r3, #0
 800ac52:	3401      	adds	r4, #1
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	4619      	mov	r1, r3
 800ac58:	f04f 0c0a 	mov.w	ip, #10
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac62:	3a30      	subs	r2, #48	; 0x30
 800ac64:	2a09      	cmp	r2, #9
 800ac66:	d903      	bls.n	800ac70 <_svfiprintf_r+0x1a8>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0c5      	beq.n	800abf8 <_svfiprintf_r+0x130>
 800ac6c:	9105      	str	r1, [sp, #20]
 800ac6e:	e7c3      	b.n	800abf8 <_svfiprintf_r+0x130>
 800ac70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac74:	4604      	mov	r4, r0
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7f0      	b.n	800ac5c <_svfiprintf_r+0x194>
 800ac7a:	ab03      	add	r3, sp, #12
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4b0f      	ldr	r3, [pc, #60]	; (800acc0 <_svfiprintf_r+0x1f8>)
 800ac82:	a904      	add	r1, sp, #16
 800ac84:	4638      	mov	r0, r7
 800ac86:	f3af 8000 	nop.w
 800ac8a:	1c42      	adds	r2, r0, #1
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	d1d6      	bne.n	800ac3e <_svfiprintf_r+0x176>
 800ac90:	89ab      	ldrh	r3, [r5, #12]
 800ac92:	065b      	lsls	r3, r3, #25
 800ac94:	f53f af2c 	bmi.w	800aaf0 <_svfiprintf_r+0x28>
 800ac98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9a:	b01d      	add	sp, #116	; 0x74
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	462a      	mov	r2, r5
 800aca6:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <_svfiprintf_r+0x1f8>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	4638      	mov	r0, r7
 800acac:	f000 f9d4 	bl	800b058 <_printf_i>
 800acb0:	e7eb      	b.n	800ac8a <_svfiprintf_r+0x1c2>
 800acb2:	bf00      	nop
 800acb4:	0800bcaa 	.word	0x0800bcaa
 800acb8:	0800bcb4 	.word	0x0800bcb4
 800acbc:	00000000 	.word	0x00000000
 800acc0:	0800aa11 	.word	0x0800aa11
 800acc4:	0800bcb0 	.word	0x0800bcb0

0800acc8 <__sfputc_r>:
 800acc8:	6893      	ldr	r3, [r2, #8]
 800acca:	3b01      	subs	r3, #1
 800accc:	2b00      	cmp	r3, #0
 800acce:	b410      	push	{r4}
 800acd0:	6093      	str	r3, [r2, #8]
 800acd2:	da08      	bge.n	800ace6 <__sfputc_r+0x1e>
 800acd4:	6994      	ldr	r4, [r2, #24]
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	db01      	blt.n	800acde <__sfputc_r+0x16>
 800acda:	290a      	cmp	r1, #10
 800acdc:	d103      	bne.n	800ace6 <__sfputc_r+0x1e>
 800acde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace2:	f000 baef 	b.w	800b2c4 <__swbuf_r>
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	1c58      	adds	r0, r3, #1
 800acea:	6010      	str	r0, [r2, #0]
 800acec:	7019      	strb	r1, [r3, #0]
 800acee:	4608      	mov	r0, r1
 800acf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <__sfputs_r>:
 800acf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf8:	4606      	mov	r6, r0
 800acfa:	460f      	mov	r7, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	18d5      	adds	r5, r2, r3
 800ad00:	42ac      	cmp	r4, r5
 800ad02:	d101      	bne.n	800ad08 <__sfputs_r+0x12>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e007      	b.n	800ad18 <__sfputs_r+0x22>
 800ad08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad0c:	463a      	mov	r2, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ffda 	bl	800acc8 <__sfputc_r>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d1f3      	bne.n	800ad00 <__sfputs_r+0xa>
 800ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad1c <_vfiprintf_r>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	460d      	mov	r5, r1
 800ad22:	b09d      	sub	sp, #116	; 0x74
 800ad24:	4614      	mov	r4, r2
 800ad26:	4698      	mov	r8, r3
 800ad28:	4606      	mov	r6, r0
 800ad2a:	b118      	cbz	r0, 800ad34 <_vfiprintf_r+0x18>
 800ad2c:	6983      	ldr	r3, [r0, #24]
 800ad2e:	b90b      	cbnz	r3, 800ad34 <_vfiprintf_r+0x18>
 800ad30:	f000 fcaa 	bl	800b688 <__sinit>
 800ad34:	4b89      	ldr	r3, [pc, #548]	; (800af5c <_vfiprintf_r+0x240>)
 800ad36:	429d      	cmp	r5, r3
 800ad38:	d11b      	bne.n	800ad72 <_vfiprintf_r+0x56>
 800ad3a:	6875      	ldr	r5, [r6, #4]
 800ad3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_vfiprintf_r+0x32>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_vfiprintf_r+0x32>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f000 fd3b 	bl	800b7c4 <__retarget_lock_acquire_recursive>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	071b      	lsls	r3, r3, #28
 800ad52:	d501      	bpl.n	800ad58 <_vfiprintf_r+0x3c>
 800ad54:	692b      	ldr	r3, [r5, #16]
 800ad56:	b9eb      	cbnz	r3, 800ad94 <_vfiprintf_r+0x78>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 fb04 	bl	800b368 <__swsetup_r>
 800ad60:	b1c0      	cbz	r0, 800ad94 <_vfiprintf_r+0x78>
 800ad62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad64:	07dc      	lsls	r4, r3, #31
 800ad66:	d50e      	bpl.n	800ad86 <_vfiprintf_r+0x6a>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	b01d      	add	sp, #116	; 0x74
 800ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad72:	4b7b      	ldr	r3, [pc, #492]	; (800af60 <_vfiprintf_r+0x244>)
 800ad74:	429d      	cmp	r5, r3
 800ad76:	d101      	bne.n	800ad7c <_vfiprintf_r+0x60>
 800ad78:	68b5      	ldr	r5, [r6, #8]
 800ad7a:	e7df      	b.n	800ad3c <_vfiprintf_r+0x20>
 800ad7c:	4b79      	ldr	r3, [pc, #484]	; (800af64 <_vfiprintf_r+0x248>)
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	bf08      	it	eq
 800ad82:	68f5      	ldreq	r5, [r6, #12]
 800ad84:	e7da      	b.n	800ad3c <_vfiprintf_r+0x20>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	0598      	lsls	r0, r3, #22
 800ad8a:	d4ed      	bmi.n	800ad68 <_vfiprintf_r+0x4c>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad8e:	f000 fd1a 	bl	800b7c6 <__retarget_lock_release_recursive>
 800ad92:	e7e9      	b.n	800ad68 <_vfiprintf_r+0x4c>
 800ad94:	2300      	movs	r3, #0
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ada2:	2330      	movs	r3, #48	; 0x30
 800ada4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af68 <_vfiprintf_r+0x24c>
 800ada8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adac:	f04f 0901 	mov.w	r9, #1
 800adb0:	4623      	mov	r3, r4
 800adb2:	469a      	mov	sl, r3
 800adb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb8:	b10a      	cbz	r2, 800adbe <_vfiprintf_r+0xa2>
 800adba:	2a25      	cmp	r2, #37	; 0x25
 800adbc:	d1f9      	bne.n	800adb2 <_vfiprintf_r+0x96>
 800adbe:	ebba 0b04 	subs.w	fp, sl, r4
 800adc2:	d00b      	beq.n	800addc <_vfiprintf_r+0xc0>
 800adc4:	465b      	mov	r3, fp
 800adc6:	4622      	mov	r2, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	4630      	mov	r0, r6
 800adcc:	f7ff ff93 	bl	800acf6 <__sfputs_r>
 800add0:	3001      	adds	r0, #1
 800add2:	f000 80aa 	beq.w	800af2a <_vfiprintf_r+0x20e>
 800add6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add8:	445a      	add	r2, fp
 800adda:	9209      	str	r2, [sp, #36]	; 0x24
 800addc:	f89a 3000 	ldrb.w	r3, [sl]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80a2 	beq.w	800af2a <_vfiprintf_r+0x20e>
 800ade6:	2300      	movs	r3, #0
 800ade8:	f04f 32ff 	mov.w	r2, #4294967295
 800adec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf0:	f10a 0a01 	add.w	sl, sl, #1
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	9307      	str	r3, [sp, #28]
 800adf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adfc:	931a      	str	r3, [sp, #104]	; 0x68
 800adfe:	4654      	mov	r4, sl
 800ae00:	2205      	movs	r2, #5
 800ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae06:	4858      	ldr	r0, [pc, #352]	; (800af68 <_vfiprintf_r+0x24c>)
 800ae08:	f7f5 fa0a 	bl	8000220 <memchr>
 800ae0c:	9a04      	ldr	r2, [sp, #16]
 800ae0e:	b9d8      	cbnz	r0, 800ae48 <_vfiprintf_r+0x12c>
 800ae10:	06d1      	lsls	r1, r2, #27
 800ae12:	bf44      	itt	mi
 800ae14:	2320      	movmi	r3, #32
 800ae16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1a:	0713      	lsls	r3, r2, #28
 800ae1c:	bf44      	itt	mi
 800ae1e:	232b      	movmi	r3, #43	; 0x2b
 800ae20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae24:	f89a 3000 	ldrb.w	r3, [sl]
 800ae28:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2a:	d015      	beq.n	800ae58 <_vfiprintf_r+0x13c>
 800ae2c:	9a07      	ldr	r2, [sp, #28]
 800ae2e:	4654      	mov	r4, sl
 800ae30:	2000      	movs	r0, #0
 800ae32:	f04f 0c0a 	mov.w	ip, #10
 800ae36:	4621      	mov	r1, r4
 800ae38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae3c:	3b30      	subs	r3, #48	; 0x30
 800ae3e:	2b09      	cmp	r3, #9
 800ae40:	d94e      	bls.n	800aee0 <_vfiprintf_r+0x1c4>
 800ae42:	b1b0      	cbz	r0, 800ae72 <_vfiprintf_r+0x156>
 800ae44:	9207      	str	r2, [sp, #28]
 800ae46:	e014      	b.n	800ae72 <_vfiprintf_r+0x156>
 800ae48:	eba0 0308 	sub.w	r3, r0, r8
 800ae4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae50:	4313      	orrs	r3, r2
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	46a2      	mov	sl, r4
 800ae56:	e7d2      	b.n	800adfe <_vfiprintf_r+0xe2>
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	1d19      	adds	r1, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	9103      	str	r1, [sp, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfbb      	ittet	lt
 800ae64:	425b      	neglt	r3, r3
 800ae66:	f042 0202 	orrlt.w	r2, r2, #2
 800ae6a:	9307      	strge	r3, [sp, #28]
 800ae6c:	9307      	strlt	r3, [sp, #28]
 800ae6e:	bfb8      	it	lt
 800ae70:	9204      	strlt	r2, [sp, #16]
 800ae72:	7823      	ldrb	r3, [r4, #0]
 800ae74:	2b2e      	cmp	r3, #46	; 0x2e
 800ae76:	d10c      	bne.n	800ae92 <_vfiprintf_r+0x176>
 800ae78:	7863      	ldrb	r3, [r4, #1]
 800ae7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7c:	d135      	bne.n	800aeea <_vfiprintf_r+0x1ce>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9203      	str	r2, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfb8      	it	lt
 800ae8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae8e:	3402      	adds	r4, #2
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af78 <_vfiprintf_r+0x25c>
 800ae96:	7821      	ldrb	r1, [r4, #0]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	f7f5 f9c0 	bl	8000220 <memchr>
 800aea0:	b140      	cbz	r0, 800aeb4 <_vfiprintf_r+0x198>
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	eba0 000a 	sub.w	r0, r0, sl
 800aea8:	fa03 f000 	lsl.w	r0, r3, r0
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	4303      	orrs	r3, r0
 800aeb0:	3401      	adds	r4, #1
 800aeb2:	9304      	str	r3, [sp, #16]
 800aeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb8:	482c      	ldr	r0, [pc, #176]	; (800af6c <_vfiprintf_r+0x250>)
 800aeba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aebe:	2206      	movs	r2, #6
 800aec0:	f7f5 f9ae 	bl	8000220 <memchr>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d03f      	beq.n	800af48 <_vfiprintf_r+0x22c>
 800aec8:	4b29      	ldr	r3, [pc, #164]	; (800af70 <_vfiprintf_r+0x254>)
 800aeca:	bb1b      	cbnz	r3, 800af14 <_vfiprintf_r+0x1f8>
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	3307      	adds	r3, #7
 800aed0:	f023 0307 	bic.w	r3, r3, #7
 800aed4:	3308      	adds	r3, #8
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeda:	443b      	add	r3, r7
 800aedc:	9309      	str	r3, [sp, #36]	; 0x24
 800aede:	e767      	b.n	800adb0 <_vfiprintf_r+0x94>
 800aee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee4:	460c      	mov	r4, r1
 800aee6:	2001      	movs	r0, #1
 800aee8:	e7a5      	b.n	800ae36 <_vfiprintf_r+0x11a>
 800aeea:	2300      	movs	r3, #0
 800aeec:	3401      	adds	r4, #1
 800aeee:	9305      	str	r3, [sp, #20]
 800aef0:	4619      	mov	r1, r3
 800aef2:	f04f 0c0a 	mov.w	ip, #10
 800aef6:	4620      	mov	r0, r4
 800aef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aefc:	3a30      	subs	r2, #48	; 0x30
 800aefe:	2a09      	cmp	r2, #9
 800af00:	d903      	bls.n	800af0a <_vfiprintf_r+0x1ee>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0c5      	beq.n	800ae92 <_vfiprintf_r+0x176>
 800af06:	9105      	str	r1, [sp, #20]
 800af08:	e7c3      	b.n	800ae92 <_vfiprintf_r+0x176>
 800af0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af0e:	4604      	mov	r4, r0
 800af10:	2301      	movs	r3, #1
 800af12:	e7f0      	b.n	800aef6 <_vfiprintf_r+0x1da>
 800af14:	ab03      	add	r3, sp, #12
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	462a      	mov	r2, r5
 800af1a:	4b16      	ldr	r3, [pc, #88]	; (800af74 <_vfiprintf_r+0x258>)
 800af1c:	a904      	add	r1, sp, #16
 800af1e:	4630      	mov	r0, r6
 800af20:	f3af 8000 	nop.w
 800af24:	4607      	mov	r7, r0
 800af26:	1c78      	adds	r0, r7, #1
 800af28:	d1d6      	bne.n	800aed8 <_vfiprintf_r+0x1bc>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2c:	07d9      	lsls	r1, r3, #31
 800af2e:	d405      	bmi.n	800af3c <_vfiprintf_r+0x220>
 800af30:	89ab      	ldrh	r3, [r5, #12]
 800af32:	059a      	lsls	r2, r3, #22
 800af34:	d402      	bmi.n	800af3c <_vfiprintf_r+0x220>
 800af36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af38:	f000 fc45 	bl	800b7c6 <__retarget_lock_release_recursive>
 800af3c:	89ab      	ldrh	r3, [r5, #12]
 800af3e:	065b      	lsls	r3, r3, #25
 800af40:	f53f af12 	bmi.w	800ad68 <_vfiprintf_r+0x4c>
 800af44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af46:	e711      	b.n	800ad6c <_vfiprintf_r+0x50>
 800af48:	ab03      	add	r3, sp, #12
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	462a      	mov	r2, r5
 800af4e:	4b09      	ldr	r3, [pc, #36]	; (800af74 <_vfiprintf_r+0x258>)
 800af50:	a904      	add	r1, sp, #16
 800af52:	4630      	mov	r0, r6
 800af54:	f000 f880 	bl	800b058 <_printf_i>
 800af58:	e7e4      	b.n	800af24 <_vfiprintf_r+0x208>
 800af5a:	bf00      	nop
 800af5c:	0800bd00 	.word	0x0800bd00
 800af60:	0800bd20 	.word	0x0800bd20
 800af64:	0800bce0 	.word	0x0800bce0
 800af68:	0800bcaa 	.word	0x0800bcaa
 800af6c:	0800bcb4 	.word	0x0800bcb4
 800af70:	00000000 	.word	0x00000000
 800af74:	0800acf7 	.word	0x0800acf7
 800af78:	0800bcb0 	.word	0x0800bcb0

0800af7c <_printf_common>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4616      	mov	r6, r2
 800af82:	4699      	mov	r9, r3
 800af84:	688a      	ldr	r2, [r1, #8]
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bfb8      	it	lt
 800af90:	4613      	movlt	r3, r2
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af98:	4607      	mov	r7, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b10a      	cbz	r2, 800afa2 <_printf_common+0x26>
 800af9e:	3301      	adds	r3, #1
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	0699      	lsls	r1, r3, #26
 800afa6:	bf42      	ittt	mi
 800afa8:	6833      	ldrmi	r3, [r6, #0]
 800afaa:	3302      	addmi	r3, #2
 800afac:	6033      	strmi	r3, [r6, #0]
 800afae:	6825      	ldr	r5, [r4, #0]
 800afb0:	f015 0506 	ands.w	r5, r5, #6
 800afb4:	d106      	bne.n	800afc4 <_printf_common+0x48>
 800afb6:	f104 0a19 	add.w	sl, r4, #25
 800afba:	68e3      	ldr	r3, [r4, #12]
 800afbc:	6832      	ldr	r2, [r6, #0]
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dc26      	bgt.n	800b012 <_printf_common+0x96>
 800afc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afc8:	1e13      	subs	r3, r2, #0
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	bf18      	it	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	0692      	lsls	r2, r2, #26
 800afd2:	d42b      	bmi.n	800b02c <_printf_common+0xb0>
 800afd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afd8:	4649      	mov	r1, r9
 800afda:	4638      	mov	r0, r7
 800afdc:	47c0      	blx	r8
 800afde:	3001      	adds	r0, #1
 800afe0:	d01e      	beq.n	800b020 <_printf_common+0xa4>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	68e5      	ldr	r5, [r4, #12]
 800afe6:	6832      	ldr	r2, [r6, #0]
 800afe8:	f003 0306 	and.w	r3, r3, #6
 800afec:	2b04      	cmp	r3, #4
 800afee:	bf08      	it	eq
 800aff0:	1aad      	subeq	r5, r5, r2
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	bf0c      	ite	eq
 800aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800affc:	2500      	movne	r5, #0
 800affe:	4293      	cmp	r3, r2
 800b000:	bfc4      	itt	gt
 800b002:	1a9b      	subgt	r3, r3, r2
 800b004:	18ed      	addgt	r5, r5, r3
 800b006:	2600      	movs	r6, #0
 800b008:	341a      	adds	r4, #26
 800b00a:	42b5      	cmp	r5, r6
 800b00c:	d11a      	bne.n	800b044 <_printf_common+0xc8>
 800b00e:	2000      	movs	r0, #0
 800b010:	e008      	b.n	800b024 <_printf_common+0xa8>
 800b012:	2301      	movs	r3, #1
 800b014:	4652      	mov	r2, sl
 800b016:	4649      	mov	r1, r9
 800b018:	4638      	mov	r0, r7
 800b01a:	47c0      	blx	r8
 800b01c:	3001      	adds	r0, #1
 800b01e:	d103      	bne.n	800b028 <_printf_common+0xac>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	3501      	adds	r5, #1
 800b02a:	e7c6      	b.n	800afba <_printf_common+0x3e>
 800b02c:	18e1      	adds	r1, r4, r3
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	2030      	movs	r0, #48	; 0x30
 800b032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b036:	4422      	add	r2, r4
 800b038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b040:	3302      	adds	r3, #2
 800b042:	e7c7      	b.n	800afd4 <_printf_common+0x58>
 800b044:	2301      	movs	r3, #1
 800b046:	4622      	mov	r2, r4
 800b048:	4649      	mov	r1, r9
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c0      	blx	r8
 800b04e:	3001      	adds	r0, #1
 800b050:	d0e6      	beq.n	800b020 <_printf_common+0xa4>
 800b052:	3601      	adds	r6, #1
 800b054:	e7d9      	b.n	800b00a <_printf_common+0x8e>
	...

0800b058 <_printf_i>:
 800b058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	7e0f      	ldrb	r7, [r1, #24]
 800b05e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b060:	2f78      	cmp	r7, #120	; 0x78
 800b062:	4691      	mov	r9, r2
 800b064:	4680      	mov	r8, r0
 800b066:	460c      	mov	r4, r1
 800b068:	469a      	mov	sl, r3
 800b06a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b06e:	d807      	bhi.n	800b080 <_printf_i+0x28>
 800b070:	2f62      	cmp	r7, #98	; 0x62
 800b072:	d80a      	bhi.n	800b08a <_printf_i+0x32>
 800b074:	2f00      	cmp	r7, #0
 800b076:	f000 80d8 	beq.w	800b22a <_printf_i+0x1d2>
 800b07a:	2f58      	cmp	r7, #88	; 0x58
 800b07c:	f000 80a3 	beq.w	800b1c6 <_printf_i+0x16e>
 800b080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b088:	e03a      	b.n	800b100 <_printf_i+0xa8>
 800b08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b08e:	2b15      	cmp	r3, #21
 800b090:	d8f6      	bhi.n	800b080 <_printf_i+0x28>
 800b092:	a101      	add	r1, pc, #4	; (adr r1, 800b098 <_printf_i+0x40>)
 800b094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b105 	.word	0x0800b105
 800b0a0:	0800b081 	.word	0x0800b081
 800b0a4:	0800b081 	.word	0x0800b081
 800b0a8:	0800b081 	.word	0x0800b081
 800b0ac:	0800b081 	.word	0x0800b081
 800b0b0:	0800b105 	.word	0x0800b105
 800b0b4:	0800b081 	.word	0x0800b081
 800b0b8:	0800b081 	.word	0x0800b081
 800b0bc:	0800b081 	.word	0x0800b081
 800b0c0:	0800b081 	.word	0x0800b081
 800b0c4:	0800b211 	.word	0x0800b211
 800b0c8:	0800b135 	.word	0x0800b135
 800b0cc:	0800b1f3 	.word	0x0800b1f3
 800b0d0:	0800b081 	.word	0x0800b081
 800b0d4:	0800b081 	.word	0x0800b081
 800b0d8:	0800b233 	.word	0x0800b233
 800b0dc:	0800b081 	.word	0x0800b081
 800b0e0:	0800b135 	.word	0x0800b135
 800b0e4:	0800b081 	.word	0x0800b081
 800b0e8:	0800b081 	.word	0x0800b081
 800b0ec:	0800b1fb 	.word	0x0800b1fb
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	602a      	str	r2, [r5, #0]
 800b0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b100:	2301      	movs	r3, #1
 800b102:	e0a3      	b.n	800b24c <_printf_i+0x1f4>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	6829      	ldr	r1, [r5, #0]
 800b108:	0606      	lsls	r6, r0, #24
 800b10a:	f101 0304 	add.w	r3, r1, #4
 800b10e:	d50a      	bpl.n	800b126 <_printf_i+0xce>
 800b110:	680e      	ldr	r6, [r1, #0]
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	2e00      	cmp	r6, #0
 800b116:	da03      	bge.n	800b120 <_printf_i+0xc8>
 800b118:	232d      	movs	r3, #45	; 0x2d
 800b11a:	4276      	negs	r6, r6
 800b11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b120:	485e      	ldr	r0, [pc, #376]	; (800b29c <_printf_i+0x244>)
 800b122:	230a      	movs	r3, #10
 800b124:	e019      	b.n	800b15a <_printf_i+0x102>
 800b126:	680e      	ldr	r6, [r1, #0]
 800b128:	602b      	str	r3, [r5, #0]
 800b12a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b12e:	bf18      	it	ne
 800b130:	b236      	sxthne	r6, r6
 800b132:	e7ef      	b.n	800b114 <_printf_i+0xbc>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	6820      	ldr	r0, [r4, #0]
 800b138:	1d19      	adds	r1, r3, #4
 800b13a:	6029      	str	r1, [r5, #0]
 800b13c:	0601      	lsls	r1, r0, #24
 800b13e:	d501      	bpl.n	800b144 <_printf_i+0xec>
 800b140:	681e      	ldr	r6, [r3, #0]
 800b142:	e002      	b.n	800b14a <_printf_i+0xf2>
 800b144:	0646      	lsls	r6, r0, #25
 800b146:	d5fb      	bpl.n	800b140 <_printf_i+0xe8>
 800b148:	881e      	ldrh	r6, [r3, #0]
 800b14a:	4854      	ldr	r0, [pc, #336]	; (800b29c <_printf_i+0x244>)
 800b14c:	2f6f      	cmp	r7, #111	; 0x6f
 800b14e:	bf0c      	ite	eq
 800b150:	2308      	moveq	r3, #8
 800b152:	230a      	movne	r3, #10
 800b154:	2100      	movs	r1, #0
 800b156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b15a:	6865      	ldr	r5, [r4, #4]
 800b15c:	60a5      	str	r5, [r4, #8]
 800b15e:	2d00      	cmp	r5, #0
 800b160:	bfa2      	ittt	ge
 800b162:	6821      	ldrge	r1, [r4, #0]
 800b164:	f021 0104 	bicge.w	r1, r1, #4
 800b168:	6021      	strge	r1, [r4, #0]
 800b16a:	b90e      	cbnz	r6, 800b170 <_printf_i+0x118>
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	d04d      	beq.n	800b20c <_printf_i+0x1b4>
 800b170:	4615      	mov	r5, r2
 800b172:	fbb6 f1f3 	udiv	r1, r6, r3
 800b176:	fb03 6711 	mls	r7, r3, r1, r6
 800b17a:	5dc7      	ldrb	r7, [r0, r7]
 800b17c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b180:	4637      	mov	r7, r6
 800b182:	42bb      	cmp	r3, r7
 800b184:	460e      	mov	r6, r1
 800b186:	d9f4      	bls.n	800b172 <_printf_i+0x11a>
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d10b      	bne.n	800b1a4 <_printf_i+0x14c>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07de      	lsls	r6, r3, #31
 800b190:	d508      	bpl.n	800b1a4 <_printf_i+0x14c>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4299      	cmp	r1, r3
 800b198:	bfde      	ittt	le
 800b19a:	2330      	movle	r3, #48	; 0x30
 800b19c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1a4:	1b52      	subs	r2, r2, r5
 800b1a6:	6122      	str	r2, [r4, #16]
 800b1a8:	f8cd a000 	str.w	sl, [sp]
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f7ff fee2 	bl	800af7c <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14c      	bne.n	800b256 <_printf_i+0x1fe>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b004      	add	sp, #16
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	4835      	ldr	r0, [pc, #212]	; (800b29c <_printf_i+0x244>)
 800b1c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1cc:	6829      	ldr	r1, [r5, #0]
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1d4:	6029      	str	r1, [r5, #0]
 800b1d6:	061d      	lsls	r5, r3, #24
 800b1d8:	d514      	bpl.n	800b204 <_printf_i+0x1ac>
 800b1da:	07df      	lsls	r7, r3, #31
 800b1dc:	bf44      	itt	mi
 800b1de:	f043 0320 	orrmi.w	r3, r3, #32
 800b1e2:	6023      	strmi	r3, [r4, #0]
 800b1e4:	b91e      	cbnz	r6, 800b1ee <_printf_i+0x196>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	f023 0320 	bic.w	r3, r3, #32
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	2310      	movs	r3, #16
 800b1f0:	e7b0      	b.n	800b154 <_printf_i+0xfc>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	f043 0320 	orr.w	r3, r3, #32
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	2378      	movs	r3, #120	; 0x78
 800b1fc:	4828      	ldr	r0, [pc, #160]	; (800b2a0 <_printf_i+0x248>)
 800b1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b202:	e7e3      	b.n	800b1cc <_printf_i+0x174>
 800b204:	0659      	lsls	r1, r3, #25
 800b206:	bf48      	it	mi
 800b208:	b2b6      	uxthmi	r6, r6
 800b20a:	e7e6      	b.n	800b1da <_printf_i+0x182>
 800b20c:	4615      	mov	r5, r2
 800b20e:	e7bb      	b.n	800b188 <_printf_i+0x130>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	6826      	ldr	r6, [r4, #0]
 800b214:	6961      	ldr	r1, [r4, #20]
 800b216:	1d18      	adds	r0, r3, #4
 800b218:	6028      	str	r0, [r5, #0]
 800b21a:	0635      	lsls	r5, r6, #24
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	d501      	bpl.n	800b224 <_printf_i+0x1cc>
 800b220:	6019      	str	r1, [r3, #0]
 800b222:	e002      	b.n	800b22a <_printf_i+0x1d2>
 800b224:	0670      	lsls	r0, r6, #25
 800b226:	d5fb      	bpl.n	800b220 <_printf_i+0x1c8>
 800b228:	8019      	strh	r1, [r3, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4615      	mov	r5, r2
 800b230:	e7ba      	b.n	800b1a8 <_printf_i+0x150>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	1d1a      	adds	r2, r3, #4
 800b236:	602a      	str	r2, [r5, #0]
 800b238:	681d      	ldr	r5, [r3, #0]
 800b23a:	6862      	ldr	r2, [r4, #4]
 800b23c:	2100      	movs	r1, #0
 800b23e:	4628      	mov	r0, r5
 800b240:	f7f4 ffee 	bl	8000220 <memchr>
 800b244:	b108      	cbz	r0, 800b24a <_printf_i+0x1f2>
 800b246:	1b40      	subs	r0, r0, r5
 800b248:	6060      	str	r0, [r4, #4]
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	2300      	movs	r3, #0
 800b250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b254:	e7a8      	b.n	800b1a8 <_printf_i+0x150>
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	462a      	mov	r2, r5
 800b25a:	4649      	mov	r1, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	47d0      	blx	sl
 800b260:	3001      	adds	r0, #1
 800b262:	d0ab      	beq.n	800b1bc <_printf_i+0x164>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	079b      	lsls	r3, r3, #30
 800b268:	d413      	bmi.n	800b292 <_printf_i+0x23a>
 800b26a:	68e0      	ldr	r0, [r4, #12]
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	4298      	cmp	r0, r3
 800b270:	bfb8      	it	lt
 800b272:	4618      	movlt	r0, r3
 800b274:	e7a4      	b.n	800b1c0 <_printf_i+0x168>
 800b276:	2301      	movs	r3, #1
 800b278:	4632      	mov	r2, r6
 800b27a:	4649      	mov	r1, r9
 800b27c:	4640      	mov	r0, r8
 800b27e:	47d0      	blx	sl
 800b280:	3001      	adds	r0, #1
 800b282:	d09b      	beq.n	800b1bc <_printf_i+0x164>
 800b284:	3501      	adds	r5, #1
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	9903      	ldr	r1, [sp, #12]
 800b28a:	1a5b      	subs	r3, r3, r1
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dcf2      	bgt.n	800b276 <_printf_i+0x21e>
 800b290:	e7eb      	b.n	800b26a <_printf_i+0x212>
 800b292:	2500      	movs	r5, #0
 800b294:	f104 0619 	add.w	r6, r4, #25
 800b298:	e7f5      	b.n	800b286 <_printf_i+0x22e>
 800b29a:	bf00      	nop
 800b29c:	0800bcbb 	.word	0x0800bcbb
 800b2a0:	0800bccc 	.word	0x0800bccc

0800b2a4 <_sbrk_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d06      	ldr	r5, [pc, #24]	; (800b2c0 <_sbrk_r+0x1c>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	602b      	str	r3, [r5, #0]
 800b2b0:	f7f6 f83c 	bl	800132c <_sbrk>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_sbrk_r+0x1a>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_sbrk_r+0x1a>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20001fa0 	.word	0x20001fa0

0800b2c4 <__swbuf_r>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	460e      	mov	r6, r1
 800b2c8:	4614      	mov	r4, r2
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	b118      	cbz	r0, 800b2d6 <__swbuf_r+0x12>
 800b2ce:	6983      	ldr	r3, [r0, #24]
 800b2d0:	b90b      	cbnz	r3, 800b2d6 <__swbuf_r+0x12>
 800b2d2:	f000 f9d9 	bl	800b688 <__sinit>
 800b2d6:	4b21      	ldr	r3, [pc, #132]	; (800b35c <__swbuf_r+0x98>)
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	d12b      	bne.n	800b334 <__swbuf_r+0x70>
 800b2dc:	686c      	ldr	r4, [r5, #4]
 800b2de:	69a3      	ldr	r3, [r4, #24]
 800b2e0:	60a3      	str	r3, [r4, #8]
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	071a      	lsls	r2, r3, #28
 800b2e6:	d52f      	bpl.n	800b348 <__swbuf_r+0x84>
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	b36b      	cbz	r3, 800b348 <__swbuf_r+0x84>
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	1ac0      	subs	r0, r0, r3
 800b2f2:	6963      	ldr	r3, [r4, #20]
 800b2f4:	b2f6      	uxtb	r6, r6
 800b2f6:	4283      	cmp	r3, r0
 800b2f8:	4637      	mov	r7, r6
 800b2fa:	dc04      	bgt.n	800b306 <__swbuf_r+0x42>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 f92e 	bl	800b560 <_fflush_r>
 800b304:	bb30      	cbnz	r0, 800b354 <__swbuf_r+0x90>
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	3b01      	subs	r3, #1
 800b30a:	60a3      	str	r3, [r4, #8]
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	6022      	str	r2, [r4, #0]
 800b312:	701e      	strb	r6, [r3, #0]
 800b314:	6963      	ldr	r3, [r4, #20]
 800b316:	3001      	adds	r0, #1
 800b318:	4283      	cmp	r3, r0
 800b31a:	d004      	beq.n	800b326 <__swbuf_r+0x62>
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	07db      	lsls	r3, r3, #31
 800b320:	d506      	bpl.n	800b330 <__swbuf_r+0x6c>
 800b322:	2e0a      	cmp	r6, #10
 800b324:	d104      	bne.n	800b330 <__swbuf_r+0x6c>
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f919 	bl	800b560 <_fflush_r>
 800b32e:	b988      	cbnz	r0, 800b354 <__swbuf_r+0x90>
 800b330:	4638      	mov	r0, r7
 800b332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <__swbuf_r+0x9c>)
 800b336:	429c      	cmp	r4, r3
 800b338:	d101      	bne.n	800b33e <__swbuf_r+0x7a>
 800b33a:	68ac      	ldr	r4, [r5, #8]
 800b33c:	e7cf      	b.n	800b2de <__swbuf_r+0x1a>
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <__swbuf_r+0xa0>)
 800b340:	429c      	cmp	r4, r3
 800b342:	bf08      	it	eq
 800b344:	68ec      	ldreq	r4, [r5, #12]
 800b346:	e7ca      	b.n	800b2de <__swbuf_r+0x1a>
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f000 f80c 	bl	800b368 <__swsetup_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	d0cb      	beq.n	800b2ec <__swbuf_r+0x28>
 800b354:	f04f 37ff 	mov.w	r7, #4294967295
 800b358:	e7ea      	b.n	800b330 <__swbuf_r+0x6c>
 800b35a:	bf00      	nop
 800b35c:	0800bd00 	.word	0x0800bd00
 800b360:	0800bd20 	.word	0x0800bd20
 800b364:	0800bce0 	.word	0x0800bce0

0800b368 <__swsetup_r>:
 800b368:	4b32      	ldr	r3, [pc, #200]	; (800b434 <__swsetup_r+0xcc>)
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	681d      	ldr	r5, [r3, #0]
 800b36e:	4606      	mov	r6, r0
 800b370:	460c      	mov	r4, r1
 800b372:	b125      	cbz	r5, 800b37e <__swsetup_r+0x16>
 800b374:	69ab      	ldr	r3, [r5, #24]
 800b376:	b913      	cbnz	r3, 800b37e <__swsetup_r+0x16>
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 f985 	bl	800b688 <__sinit>
 800b37e:	4b2e      	ldr	r3, [pc, #184]	; (800b438 <__swsetup_r+0xd0>)
 800b380:	429c      	cmp	r4, r3
 800b382:	d10f      	bne.n	800b3a4 <__swsetup_r+0x3c>
 800b384:	686c      	ldr	r4, [r5, #4]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b38c:	0719      	lsls	r1, r3, #28
 800b38e:	d42c      	bmi.n	800b3ea <__swsetup_r+0x82>
 800b390:	06dd      	lsls	r5, r3, #27
 800b392:	d411      	bmi.n	800b3b8 <__swsetup_r+0x50>
 800b394:	2309      	movs	r3, #9
 800b396:	6033      	str	r3, [r6, #0]
 800b398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	e03e      	b.n	800b422 <__swsetup_r+0xba>
 800b3a4:	4b25      	ldr	r3, [pc, #148]	; (800b43c <__swsetup_r+0xd4>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d101      	bne.n	800b3ae <__swsetup_r+0x46>
 800b3aa:	68ac      	ldr	r4, [r5, #8]
 800b3ac:	e7eb      	b.n	800b386 <__swsetup_r+0x1e>
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <__swsetup_r+0xd8>)
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	bf08      	it	eq
 800b3b4:	68ec      	ldreq	r4, [r5, #12]
 800b3b6:	e7e6      	b.n	800b386 <__swsetup_r+0x1e>
 800b3b8:	0758      	lsls	r0, r3, #29
 800b3ba:	d512      	bpl.n	800b3e2 <__swsetup_r+0x7a>
 800b3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3be:	b141      	cbz	r1, 800b3d2 <__swsetup_r+0x6a>
 800b3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	d002      	beq.n	800b3ce <__swsetup_r+0x66>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff fa41 	bl	800a850 <_free_r>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b94b      	cbnz	r3, 800b402 <__swsetup_r+0x9a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f8:	d003      	beq.n	800b402 <__swsetup_r+0x9a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 fa09 	bl	800b814 <__smakebuf_r>
 800b402:	89a0      	ldrh	r0, [r4, #12]
 800b404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b408:	f010 0301 	ands.w	r3, r0, #1
 800b40c:	d00a      	beq.n	800b424 <__swsetup_r+0xbc>
 800b40e:	2300      	movs	r3, #0
 800b410:	60a3      	str	r3, [r4, #8]
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	425b      	negs	r3, r3
 800b416:	61a3      	str	r3, [r4, #24]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	b943      	cbnz	r3, 800b42e <__swsetup_r+0xc6>
 800b41c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b420:	d1ba      	bne.n	800b398 <__swsetup_r+0x30>
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	0781      	lsls	r1, r0, #30
 800b426:	bf58      	it	pl
 800b428:	6963      	ldrpl	r3, [r4, #20]
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	e7f4      	b.n	800b418 <__swsetup_r+0xb0>
 800b42e:	2000      	movs	r0, #0
 800b430:	e7f7      	b.n	800b422 <__swsetup_r+0xba>
 800b432:	bf00      	nop
 800b434:	2000010c 	.word	0x2000010c
 800b438:	0800bd00 	.word	0x0800bd00
 800b43c:	0800bd20 	.word	0x0800bd20
 800b440:	0800bce0 	.word	0x0800bce0

0800b444 <abort>:
 800b444:	b508      	push	{r3, lr}
 800b446:	2006      	movs	r0, #6
 800b448:	f000 fab0 	bl	800b9ac <raise>
 800b44c:	2001      	movs	r0, #1
 800b44e:	f7f5 fef5 	bl	800123c <_exit>
	...

0800b454 <__sflush_r>:
 800b454:	898a      	ldrh	r2, [r1, #12]
 800b456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45a:	4605      	mov	r5, r0
 800b45c:	0710      	lsls	r0, r2, #28
 800b45e:	460c      	mov	r4, r1
 800b460:	d458      	bmi.n	800b514 <__sflush_r+0xc0>
 800b462:	684b      	ldr	r3, [r1, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	dc05      	bgt.n	800b474 <__sflush_r+0x20>
 800b468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dc02      	bgt.n	800b474 <__sflush_r+0x20>
 800b46e:	2000      	movs	r0, #0
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b476:	2e00      	cmp	r6, #0
 800b478:	d0f9      	beq.n	800b46e <__sflush_r+0x1a>
 800b47a:	2300      	movs	r3, #0
 800b47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b480:	682f      	ldr	r7, [r5, #0]
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	d032      	beq.n	800b4ec <__sflush_r+0x98>
 800b486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	075a      	lsls	r2, r3, #29
 800b48c:	d505      	bpl.n	800b49a <__sflush_r+0x46>
 800b48e:	6863      	ldr	r3, [r4, #4]
 800b490:	1ac0      	subs	r0, r0, r3
 800b492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b494:	b10b      	cbz	r3, 800b49a <__sflush_r+0x46>
 800b496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b498:	1ac0      	subs	r0, r0, r3
 800b49a:	2300      	movs	r3, #0
 800b49c:	4602      	mov	r2, r0
 800b49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4a0:	6a21      	ldr	r1, [r4, #32]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b0      	blx	r6
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	d106      	bne.n	800b4ba <__sflush_r+0x66>
 800b4ac:	6829      	ldr	r1, [r5, #0]
 800b4ae:	291d      	cmp	r1, #29
 800b4b0:	d82c      	bhi.n	800b50c <__sflush_r+0xb8>
 800b4b2:	4a2a      	ldr	r2, [pc, #168]	; (800b55c <__sflush_r+0x108>)
 800b4b4:	40ca      	lsrs	r2, r1
 800b4b6:	07d6      	lsls	r6, r2, #31
 800b4b8:	d528      	bpl.n	800b50c <__sflush_r+0xb8>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	6062      	str	r2, [r4, #4]
 800b4be:	04d9      	lsls	r1, r3, #19
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	d504      	bpl.n	800b4d0 <__sflush_r+0x7c>
 800b4c6:	1c42      	adds	r2, r0, #1
 800b4c8:	d101      	bne.n	800b4ce <__sflush_r+0x7a>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	b903      	cbnz	r3, 800b4d0 <__sflush_r+0x7c>
 800b4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4d2:	602f      	str	r7, [r5, #0]
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	d0ca      	beq.n	800b46e <__sflush_r+0x1a>
 800b4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4dc:	4299      	cmp	r1, r3
 800b4de:	d002      	beq.n	800b4e6 <__sflush_r+0x92>
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7ff f9b5 	bl	800a850 <_free_r>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ea:	e7c1      	b.n	800b470 <__sflush_r+0x1c>
 800b4ec:	6a21      	ldr	r1, [r4, #32]
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b0      	blx	r6
 800b4f4:	1c41      	adds	r1, r0, #1
 800b4f6:	d1c7      	bne.n	800b488 <__sflush_r+0x34>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0c4      	beq.n	800b488 <__sflush_r+0x34>
 800b4fe:	2b1d      	cmp	r3, #29
 800b500:	d001      	beq.n	800b506 <__sflush_r+0xb2>
 800b502:	2b16      	cmp	r3, #22
 800b504:	d101      	bne.n	800b50a <__sflush_r+0xb6>
 800b506:	602f      	str	r7, [r5, #0]
 800b508:	e7b1      	b.n	800b46e <__sflush_r+0x1a>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	e7ad      	b.n	800b470 <__sflush_r+0x1c>
 800b514:	690f      	ldr	r7, [r1, #16]
 800b516:	2f00      	cmp	r7, #0
 800b518:	d0a9      	beq.n	800b46e <__sflush_r+0x1a>
 800b51a:	0793      	lsls	r3, r2, #30
 800b51c:	680e      	ldr	r6, [r1, #0]
 800b51e:	bf08      	it	eq
 800b520:	694b      	ldreq	r3, [r1, #20]
 800b522:	600f      	str	r7, [r1, #0]
 800b524:	bf18      	it	ne
 800b526:	2300      	movne	r3, #0
 800b528:	eba6 0807 	sub.w	r8, r6, r7
 800b52c:	608b      	str	r3, [r1, #8]
 800b52e:	f1b8 0f00 	cmp.w	r8, #0
 800b532:	dd9c      	ble.n	800b46e <__sflush_r+0x1a>
 800b534:	6a21      	ldr	r1, [r4, #32]
 800b536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b538:	4643      	mov	r3, r8
 800b53a:	463a      	mov	r2, r7
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b0      	blx	r6
 800b540:	2800      	cmp	r0, #0
 800b542:	dc06      	bgt.n	800b552 <__sflush_r+0xfe>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295
 800b550:	e78e      	b.n	800b470 <__sflush_r+0x1c>
 800b552:	4407      	add	r7, r0
 800b554:	eba8 0800 	sub.w	r8, r8, r0
 800b558:	e7e9      	b.n	800b52e <__sflush_r+0xda>
 800b55a:	bf00      	nop
 800b55c:	20400001 	.word	0x20400001

0800b560 <_fflush_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	690b      	ldr	r3, [r1, #16]
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b913      	cbnz	r3, 800b570 <_fflush_r+0x10>
 800b56a:	2500      	movs	r5, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	b118      	cbz	r0, 800b57a <_fflush_r+0x1a>
 800b572:	6983      	ldr	r3, [r0, #24]
 800b574:	b90b      	cbnz	r3, 800b57a <_fflush_r+0x1a>
 800b576:	f000 f887 	bl	800b688 <__sinit>
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <_fflush_r+0x6c>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	d11b      	bne.n	800b5b8 <_fflush_r+0x58>
 800b580:	686c      	ldr	r4, [r5, #4]
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0ef      	beq.n	800b56a <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x3a>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x3a>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f000 f915 	bl	800b7c4 <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff59 	bl	800b454 <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5a4:	07da      	lsls	r2, r3, #31
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	d4e0      	bmi.n	800b56c <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4dd      	bmi.n	800b56c <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b2:	f000 f908 	bl	800b7c6 <__retarget_lock_release_recursive>
 800b5b6:	e7d9      	b.n	800b56c <_fflush_r+0xc>
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <_fflush_r+0x70>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d101      	bne.n	800b5c2 <_fflush_r+0x62>
 800b5be:	68ac      	ldr	r4, [r5, #8]
 800b5c0:	e7df      	b.n	800b582 <_fflush_r+0x22>
 800b5c2:	4b04      	ldr	r3, [pc, #16]	; (800b5d4 <_fflush_r+0x74>)
 800b5c4:	429c      	cmp	r4, r3
 800b5c6:	bf08      	it	eq
 800b5c8:	68ec      	ldreq	r4, [r5, #12]
 800b5ca:	e7da      	b.n	800b582 <_fflush_r+0x22>
 800b5cc:	0800bd00 	.word	0x0800bd00
 800b5d0:	0800bd20 	.word	0x0800bd20
 800b5d4:	0800bce0 	.word	0x0800bce0

0800b5d8 <std>:
 800b5d8:	2300      	movs	r3, #0
 800b5da:	b510      	push	{r4, lr}
 800b5dc:	4604      	mov	r4, r0
 800b5de:	e9c0 3300 	strd	r3, r3, [r0]
 800b5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5e6:	6083      	str	r3, [r0, #8]
 800b5e8:	8181      	strh	r1, [r0, #12]
 800b5ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b5ec:	81c2      	strh	r2, [r0, #14]
 800b5ee:	6183      	str	r3, [r0, #24]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	2208      	movs	r2, #8
 800b5f4:	305c      	adds	r0, #92	; 0x5c
 800b5f6:	f7ff f833 	bl	800a660 <memset>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <std+0x38>)
 800b5fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <std+0x3c>)
 800b600:	62a3      	str	r3, [r4, #40]	; 0x28
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <std+0x40>)
 800b604:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <std+0x44>)
 800b608:	6224      	str	r4, [r4, #32]
 800b60a:	6323      	str	r3, [r4, #48]	; 0x30
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800b9e5 	.word	0x0800b9e5
 800b614:	0800ba07 	.word	0x0800ba07
 800b618:	0800ba3f 	.word	0x0800ba3f
 800b61c:	0800ba63 	.word	0x0800ba63

0800b620 <_cleanup_r>:
 800b620:	4901      	ldr	r1, [pc, #4]	; (800b628 <_cleanup_r+0x8>)
 800b622:	f000 b8af 	b.w	800b784 <_fwalk_reent>
 800b626:	bf00      	nop
 800b628:	0800b561 	.word	0x0800b561

0800b62c <__sfmoreglue>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	2268      	movs	r2, #104	; 0x68
 800b630:	1e4d      	subs	r5, r1, #1
 800b632:	4355      	muls	r5, r2
 800b634:	460e      	mov	r6, r1
 800b636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b63a:	f7ff f975 	bl	800a928 <_malloc_r>
 800b63e:	4604      	mov	r4, r0
 800b640:	b140      	cbz	r0, 800b654 <__sfmoreglue+0x28>
 800b642:	2100      	movs	r1, #0
 800b644:	e9c0 1600 	strd	r1, r6, [r0]
 800b648:	300c      	adds	r0, #12
 800b64a:	60a0      	str	r0, [r4, #8]
 800b64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b650:	f7ff f806 	bl	800a660 <memset>
 800b654:	4620      	mov	r0, r4
 800b656:	bd70      	pop	{r4, r5, r6, pc}

0800b658 <__sfp_lock_acquire>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sfp_lock_acquire+0x8>)
 800b65a:	f000 b8b3 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	20001fa5 	.word	0x20001fa5

0800b664 <__sfp_lock_release>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sfp_lock_release+0x8>)
 800b666:	f000 b8ae 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	20001fa5 	.word	0x20001fa5

0800b670 <__sinit_lock_acquire>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__sinit_lock_acquire+0x8>)
 800b672:	f000 b8a7 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b676:	bf00      	nop
 800b678:	20001fa6 	.word	0x20001fa6

0800b67c <__sinit_lock_release>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__sinit_lock_release+0x8>)
 800b67e:	f000 b8a2 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b682:	bf00      	nop
 800b684:	20001fa6 	.word	0x20001fa6

0800b688 <__sinit>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	f7ff fff0 	bl	800b670 <__sinit_lock_acquire>
 800b690:	69a3      	ldr	r3, [r4, #24]
 800b692:	b11b      	cbz	r3, 800b69c <__sinit+0x14>
 800b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b698:	f7ff bff0 	b.w	800b67c <__sinit_lock_release>
 800b69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <__sinit+0x68>)
 800b6a4:	4a13      	ldr	r2, [pc, #76]	; (800b6f4 <__sinit+0x6c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	bf04      	itt	eq
 800b6ae:	2301      	moveq	r3, #1
 800b6b0:	61a3      	streq	r3, [r4, #24]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 f820 	bl	800b6f8 <__sfp>
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f81c 	bl	800b6f8 <__sfp>
 800b6c0:	60a0      	str	r0, [r4, #8]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f818 	bl	800b6f8 <__sfp>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	60e0      	str	r0, [r4, #12]
 800b6cc:	2104      	movs	r1, #4
 800b6ce:	6860      	ldr	r0, [r4, #4]
 800b6d0:	f7ff ff82 	bl	800b5d8 <std>
 800b6d4:	68a0      	ldr	r0, [r4, #8]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2109      	movs	r1, #9
 800b6da:	f7ff ff7d 	bl	800b5d8 <std>
 800b6de:	68e0      	ldr	r0, [r4, #12]
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	2112      	movs	r1, #18
 800b6e4:	f7ff ff78 	bl	800b5d8 <std>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	61a3      	str	r3, [r4, #24]
 800b6ec:	e7d2      	b.n	800b694 <__sinit+0xc>
 800b6ee:	bf00      	nop
 800b6f0:	0800bbf8 	.word	0x0800bbf8
 800b6f4:	0800b621 	.word	0x0800b621

0800b6f8 <__sfp>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	f7ff ffac 	bl	800b658 <__sfp_lock_acquire>
 800b700:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <__sfp+0x84>)
 800b702:	681e      	ldr	r6, [r3, #0]
 800b704:	69b3      	ldr	r3, [r6, #24]
 800b706:	b913      	cbnz	r3, 800b70e <__sfp+0x16>
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff ffbd 	bl	800b688 <__sinit>
 800b70e:	3648      	adds	r6, #72	; 0x48
 800b710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b714:	3b01      	subs	r3, #1
 800b716:	d503      	bpl.n	800b720 <__sfp+0x28>
 800b718:	6833      	ldr	r3, [r6, #0]
 800b71a:	b30b      	cbz	r3, 800b760 <__sfp+0x68>
 800b71c:	6836      	ldr	r6, [r6, #0]
 800b71e:	e7f7      	b.n	800b710 <__sfp+0x18>
 800b720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b724:	b9d5      	cbnz	r5, 800b75c <__sfp+0x64>
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <__sfp+0x88>)
 800b728:	60e3      	str	r3, [r4, #12]
 800b72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b72e:	6665      	str	r5, [r4, #100]	; 0x64
 800b730:	f000 f847 	bl	800b7c2 <__retarget_lock_init_recursive>
 800b734:	f7ff ff96 	bl	800b664 <__sfp_lock_release>
 800b738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b740:	6025      	str	r5, [r4, #0]
 800b742:	61a5      	str	r5, [r4, #24]
 800b744:	2208      	movs	r2, #8
 800b746:	4629      	mov	r1, r5
 800b748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b74c:	f7fe ff88 	bl	800a660 <memset>
 800b750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b758:	4620      	mov	r0, r4
 800b75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75c:	3468      	adds	r4, #104	; 0x68
 800b75e:	e7d9      	b.n	800b714 <__sfp+0x1c>
 800b760:	2104      	movs	r1, #4
 800b762:	4638      	mov	r0, r7
 800b764:	f7ff ff62 	bl	800b62c <__sfmoreglue>
 800b768:	4604      	mov	r4, r0
 800b76a:	6030      	str	r0, [r6, #0]
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d1d5      	bne.n	800b71c <__sfp+0x24>
 800b770:	f7ff ff78 	bl	800b664 <__sfp_lock_release>
 800b774:	230c      	movs	r3, #12
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	e7ee      	b.n	800b758 <__sfp+0x60>
 800b77a:	bf00      	nop
 800b77c:	0800bbf8 	.word	0x0800bbf8
 800b780:	ffff0001 	.word	0xffff0001

0800b784 <_fwalk_reent>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	4606      	mov	r6, r0
 800b78a:	4688      	mov	r8, r1
 800b78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b790:	2700      	movs	r7, #0
 800b792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b796:	f1b9 0901 	subs.w	r9, r9, #1
 800b79a:	d505      	bpl.n	800b7a8 <_fwalk_reent+0x24>
 800b79c:	6824      	ldr	r4, [r4, #0]
 800b79e:	2c00      	cmp	r4, #0
 800b7a0:	d1f7      	bne.n	800b792 <_fwalk_reent+0xe>
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a8:	89ab      	ldrh	r3, [r5, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d907      	bls.n	800b7be <_fwalk_reent+0x3a>
 800b7ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	d003      	beq.n	800b7be <_fwalk_reent+0x3a>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	47c0      	blx	r8
 800b7bc:	4307      	orrs	r7, r0
 800b7be:	3568      	adds	r5, #104	; 0x68
 800b7c0:	e7e9      	b.n	800b796 <_fwalk_reent+0x12>

0800b7c2 <__retarget_lock_init_recursive>:
 800b7c2:	4770      	bx	lr

0800b7c4 <__retarget_lock_acquire_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__retarget_lock_release_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <__swhatbuf_r>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	460e      	mov	r6, r1
 800b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	b096      	sub	sp, #88	; 0x58
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	da08      	bge.n	800b7ec <__swhatbuf_r+0x24>
 800b7da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	061a      	lsls	r2, r3, #24
 800b7e4:	d410      	bmi.n	800b808 <__swhatbuf_r+0x40>
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	e00e      	b.n	800b80a <__swhatbuf_r+0x42>
 800b7ec:	466a      	mov	r2, sp
 800b7ee:	f000 f95f 	bl	800bab0 <_fstat_r>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	dbf1      	blt.n	800b7da <__swhatbuf_r+0x12>
 800b7f6:	9a01      	ldr	r2, [sp, #4]
 800b7f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b800:	425a      	negs	r2, r3
 800b802:	415a      	adcs	r2, r3
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	e7ee      	b.n	800b7e6 <__swhatbuf_r+0x1e>
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	2000      	movs	r0, #0
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	b016      	add	sp, #88	; 0x58
 800b810:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b814 <__smakebuf_r>:
 800b814:	898b      	ldrh	r3, [r1, #12]
 800b816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b818:	079d      	lsls	r5, r3, #30
 800b81a:	4606      	mov	r6, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	d507      	bpl.n	800b830 <__smakebuf_r+0x1c>
 800b820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	2301      	movs	r3, #1
 800b82a:	6163      	str	r3, [r4, #20]
 800b82c:	b002      	add	sp, #8
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	ab01      	add	r3, sp, #4
 800b832:	466a      	mov	r2, sp
 800b834:	f7ff ffc8 	bl	800b7c8 <__swhatbuf_r>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	4605      	mov	r5, r0
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff f873 	bl	800a928 <_malloc_r>
 800b842:	b948      	cbnz	r0, 800b858 <__smakebuf_r+0x44>
 800b844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b848:	059a      	lsls	r2, r3, #22
 800b84a:	d4ef      	bmi.n	800b82c <__smakebuf_r+0x18>
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	f043 0302 	orr.w	r3, r3, #2
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	e7e3      	b.n	800b820 <__smakebuf_r+0xc>
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <__smakebuf_r+0x7c>)
 800b85a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	6020      	str	r0, [r4, #0]
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	9b00      	ldr	r3, [sp, #0]
 800b868:	6163      	str	r3, [r4, #20]
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	6120      	str	r0, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x74>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 f92d 	bl	800bad4 <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x74>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a0      	ldrh	r0, [r4, #12]
 800b88a:	4305      	orrs	r5, r0
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cd      	b.n	800b82c <__smakebuf_r+0x18>
 800b890:	0800b621 	.word	0x0800b621

0800b894 <memcpy>:
 800b894:	440a      	add	r2, r1
 800b896:	4291      	cmp	r1, r2
 800b898:	f100 33ff 	add.w	r3, r0, #4294967295
 800b89c:	d100      	bne.n	800b8a0 <memcpy+0xc>
 800b89e:	4770      	bx	lr
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8aa:	4291      	cmp	r1, r2
 800b8ac:	d1f9      	bne.n	800b8a2 <memcpy+0xe>
 800b8ae:	bd10      	pop	{r4, pc}

0800b8b0 <memmove>:
 800b8b0:	4288      	cmp	r0, r1
 800b8b2:	b510      	push	{r4, lr}
 800b8b4:	eb01 0402 	add.w	r4, r1, r2
 800b8b8:	d902      	bls.n	800b8c0 <memmove+0x10>
 800b8ba:	4284      	cmp	r4, r0
 800b8bc:	4623      	mov	r3, r4
 800b8be:	d807      	bhi.n	800b8d0 <memmove+0x20>
 800b8c0:	1e43      	subs	r3, r0, #1
 800b8c2:	42a1      	cmp	r1, r4
 800b8c4:	d008      	beq.n	800b8d8 <memmove+0x28>
 800b8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ce:	e7f8      	b.n	800b8c2 <memmove+0x12>
 800b8d0:	4402      	add	r2, r0
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	428a      	cmp	r2, r1
 800b8d6:	d100      	bne.n	800b8da <memmove+0x2a>
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8e2:	e7f7      	b.n	800b8d4 <memmove+0x24>

0800b8e4 <__malloc_lock>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__malloc_lock+0x8>)
 800b8e6:	f7ff bf6d 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20001fa4 	.word	0x20001fa4

0800b8f0 <__malloc_unlock>:
 800b8f0:	4801      	ldr	r0, [pc, #4]	; (800b8f8 <__malloc_unlock+0x8>)
 800b8f2:	f7ff bf68 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b8f6:	bf00      	nop
 800b8f8:	20001fa4 	.word	0x20001fa4

0800b8fc <_realloc_r>:
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	4680      	mov	r8, r0
 800b902:	4614      	mov	r4, r2
 800b904:	460e      	mov	r6, r1
 800b906:	b921      	cbnz	r1, 800b912 <_realloc_r+0x16>
 800b908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90c:	4611      	mov	r1, r2
 800b90e:	f7ff b80b 	b.w	800a928 <_malloc_r>
 800b912:	b92a      	cbnz	r2, 800b920 <_realloc_r+0x24>
 800b914:	f7fe ff9c 	bl	800a850 <_free_r>
 800b918:	4625      	mov	r5, r4
 800b91a:	4628      	mov	r0, r5
 800b91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b920:	f000 f8fa 	bl	800bb18 <_malloc_usable_size_r>
 800b924:	4284      	cmp	r4, r0
 800b926:	4607      	mov	r7, r0
 800b928:	d802      	bhi.n	800b930 <_realloc_r+0x34>
 800b92a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b92e:	d812      	bhi.n	800b956 <_realloc_r+0x5a>
 800b930:	4621      	mov	r1, r4
 800b932:	4640      	mov	r0, r8
 800b934:	f7fe fff8 	bl	800a928 <_malloc_r>
 800b938:	4605      	mov	r5, r0
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d0ed      	beq.n	800b91a <_realloc_r+0x1e>
 800b93e:	42bc      	cmp	r4, r7
 800b940:	4622      	mov	r2, r4
 800b942:	4631      	mov	r1, r6
 800b944:	bf28      	it	cs
 800b946:	463a      	movcs	r2, r7
 800b948:	f7ff ffa4 	bl	800b894 <memcpy>
 800b94c:	4631      	mov	r1, r6
 800b94e:	4640      	mov	r0, r8
 800b950:	f7fe ff7e 	bl	800a850 <_free_r>
 800b954:	e7e1      	b.n	800b91a <_realloc_r+0x1e>
 800b956:	4635      	mov	r5, r6
 800b958:	e7df      	b.n	800b91a <_realloc_r+0x1e>

0800b95a <_raise_r>:
 800b95a:	291f      	cmp	r1, #31
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4604      	mov	r4, r0
 800b960:	460d      	mov	r5, r1
 800b962:	d904      	bls.n	800b96e <_raise_r+0x14>
 800b964:	2316      	movs	r3, #22
 800b966:	6003      	str	r3, [r0, #0]
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b970:	b112      	cbz	r2, 800b978 <_raise_r+0x1e>
 800b972:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b976:	b94b      	cbnz	r3, 800b98c <_raise_r+0x32>
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 f831 	bl	800b9e0 <_getpid_r>
 800b97e:	462a      	mov	r2, r5
 800b980:	4601      	mov	r1, r0
 800b982:	4620      	mov	r0, r4
 800b984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b988:	f000 b818 	b.w	800b9bc <_kill_r>
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d00a      	beq.n	800b9a6 <_raise_r+0x4c>
 800b990:	1c59      	adds	r1, r3, #1
 800b992:	d103      	bne.n	800b99c <_raise_r+0x42>
 800b994:	2316      	movs	r3, #22
 800b996:	6003      	str	r3, [r0, #0]
 800b998:	2001      	movs	r0, #1
 800b99a:	e7e7      	b.n	800b96c <_raise_r+0x12>
 800b99c:	2400      	movs	r4, #0
 800b99e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	4798      	blx	r3
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e7e0      	b.n	800b96c <_raise_r+0x12>
	...

0800b9ac <raise>:
 800b9ac:	4b02      	ldr	r3, [pc, #8]	; (800b9b8 <raise+0xc>)
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	f7ff bfd2 	b.w	800b95a <_raise_r>
 800b9b6:	bf00      	nop
 800b9b8:	2000010c 	.word	0x2000010c

0800b9bc <_kill_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d07      	ldr	r5, [pc, #28]	; (800b9dc <_kill_r+0x20>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	602b      	str	r3, [r5, #0]
 800b9ca:	f7f5 fc27 	bl	800121c <_kill>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	d102      	bne.n	800b9d8 <_kill_r+0x1c>
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	b103      	cbz	r3, 800b9d8 <_kill_r+0x1c>
 800b9d6:	6023      	str	r3, [r4, #0]
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
 800b9da:	bf00      	nop
 800b9dc:	20001fa0 	.word	0x20001fa0

0800b9e0 <_getpid_r>:
 800b9e0:	f7f5 bc14 	b.w	800120c <_getpid>

0800b9e4 <__sread>:
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ec:	f000 f89c 	bl	800bb28 <_read_r>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	bfab      	itete	ge
 800b9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f8:	181b      	addge	r3, r3, r0
 800b9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9fe:	bfac      	ite	ge
 800ba00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba02:	81a3      	strhlt	r3, [r4, #12]
 800ba04:	bd10      	pop	{r4, pc}

0800ba06 <__swrite>:
 800ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0a:	461f      	mov	r7, r3
 800ba0c:	898b      	ldrh	r3, [r1, #12]
 800ba0e:	05db      	lsls	r3, r3, #23
 800ba10:	4605      	mov	r5, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	4616      	mov	r6, r2
 800ba16:	d505      	bpl.n	800ba24 <__swrite+0x1e>
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f000 f868 	bl	800baf4 <_lseek_r>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	4632      	mov	r2, r6
 800ba32:	463b      	mov	r3, r7
 800ba34:	4628      	mov	r0, r5
 800ba36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	f000 b817 	b.w	800ba6c <_write_r>

0800ba3e <__sseek>:
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	460c      	mov	r4, r1
 800ba42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba46:	f000 f855 	bl	800baf4 <_lseek_r>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	bf15      	itete	ne
 800ba50:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba5a:	81a3      	strheq	r3, [r4, #12]
 800ba5c:	bf18      	it	ne
 800ba5e:	81a3      	strhne	r3, [r4, #12]
 800ba60:	bd10      	pop	{r4, pc}

0800ba62 <__sclose>:
 800ba62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba66:	f000 b813 	b.w	800ba90 <_close_r>
	...

0800ba6c <_write_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_write_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7f5 fc05 	bl	800128a <_write>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_write_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_write_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20001fa0 	.word	0x20001fa0

0800ba90 <_close_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d06      	ldr	r5, [pc, #24]	; (800baac <_close_r+0x1c>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	4604      	mov	r4, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	602b      	str	r3, [r5, #0]
 800ba9c:	f7f5 fc11 	bl	80012c2 <_close>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_close_r+0x1a>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_close_r+0x1a>
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	20001fa0 	.word	0x20001fa0

0800bab0 <_fstat_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d07      	ldr	r5, [pc, #28]	; (800bad0 <_fstat_r+0x20>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	4611      	mov	r1, r2
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	f7f5 fc0c 	bl	80012da <_fstat>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d102      	bne.n	800bacc <_fstat_r+0x1c>
 800bac6:	682b      	ldr	r3, [r5, #0]
 800bac8:	b103      	cbz	r3, 800bacc <_fstat_r+0x1c>
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	bd38      	pop	{r3, r4, r5, pc}
 800bace:	bf00      	nop
 800bad0:	20001fa0 	.word	0x20001fa0

0800bad4 <_isatty_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d06      	ldr	r5, [pc, #24]	; (800baf0 <_isatty_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f5 fc0b 	bl	80012fa <_isatty>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_isatty_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_isatty_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20001fa0 	.word	0x20001fa0

0800baf4 <_lseek_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d07      	ldr	r5, [pc, #28]	; (800bb14 <_lseek_r+0x20>)
 800baf8:	4604      	mov	r4, r0
 800bafa:	4608      	mov	r0, r1
 800bafc:	4611      	mov	r1, r2
 800bafe:	2200      	movs	r2, #0
 800bb00:	602a      	str	r2, [r5, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f7f5 fc04 	bl	8001310 <_lseek>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_lseek_r+0x1e>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_lseek_r+0x1e>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20001fa0 	.word	0x20001fa0

0800bb18 <_malloc_usable_size_r>:
 800bb18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb1c:	1f18      	subs	r0, r3, #4
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bfbc      	itt	lt
 800bb22:	580b      	ldrlt	r3, [r1, r0]
 800bb24:	18c0      	addlt	r0, r0, r3
 800bb26:	4770      	bx	lr

0800bb28 <_read_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	; (800bb48 <_read_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f5 fb8a 	bl	8001250 <_read>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_read_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_read_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20001fa0 	.word	0x20001fa0

0800bb4c <_gettimeofday>:
 800bb4c:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <_gettimeofday+0xc>)
 800bb4e:	2258      	movs	r2, #88	; 0x58
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	4770      	bx	lr
 800bb58:	20001fa0 	.word	0x20001fa0

0800bb5c <_init>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	bf00      	nop
 800bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb62:	bc08      	pop	{r3}
 800bb64:	469e      	mov	lr, r3
 800bb66:	4770      	bx	lr

0800bb68 <_fini>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr
